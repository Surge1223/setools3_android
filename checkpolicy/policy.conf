#line 1 "system/sepolicy/security_classes"
# FLASK

#
# Define the security object classes
#

# Classes marked as userspace are classes
# for userspace object managers

class security
class process
class system
class capability

# file-related classes
class filesystem
class file
class dir
class fd
class lnk_file
class chr_file
class blk_file
class sock_file
class fifo_file

# network-related classes
class socket
class tcp_socket
class udp_socket
class rawip_socket
class node
class netif
class netlink_socket
class packet_socket
class key_socket
class unix_stream_socket
class unix_dgram_socket

# sysv-ipc-related classes
class sem
class msg
class msgq
class shm
class ipc

# extended netlink sockets
class netlink_route_socket
class netlink_firewall_socket
class netlink_tcpdiag_socket
class netlink_nflog_socket
class netlink_xfrm_socket
class netlink_selinux_socket
class netlink_audit_socket
class netlink_ip6fw_socket
class netlink_dnrt_socket

# IPSec association
class association

# Updated Netlink class for KOBJECT_UEVENT family.
class netlink_kobject_uevent_socket

class appletalk_socket

class packet

# Kernel access key retention
class key

class dccp_socket

class memprotect

# network peer labels
class peer

# Capabilities >= 32
class capability2

# kernel services that need to override task security, e.g. cachefiles
class kernel_service

class tun_socket

class binder

# Updated netlink classes for more recent netlink protocols.
class netlink_iscsi_socket
class netlink_fib_lookup_socket
class netlink_connector_socket
class netlink_netfilter_socket
class netlink_generic_socket
class netlink_scsitransport_socket
class netlink_rdma_socket
class netlink_crypto_socket

# Property service
class property_service          # userspace

# Service manager
class service_manager           # userspace

# Keystore Key
class keystore_key              # userspace

# debuggerd service
class debuggerd                 # userspace

class drmservice                # userspace
# FLASK
#line 1 "system/sepolicy/initial_sids"
# FLASK

#
# Define initial security identifiers
#

sid kernel
sid security
sid unlabeled
sid fs
sid file
sid file_labels
sid init
sid any_socket
sid port
sid netif
sid netmsg
sid node
sid igmp_packet
sid icmp_socket
sid tcp_socket
sid sysctl_modprobe
sid sysctl
sid sysctl_fs
sid sysctl_kernel
sid sysctl_net
sid sysctl_net_unix
sid sysctl_vm
sid sysctl_dev
sid kmod
sid policy
sid scmp_packet
sid devnull

# FLASK
#line 1 "system/sepolicy/access_vectors"
#
# Define common prefixes for access vectors
#
# common common_name { permission_name ... }


#
# Define a common prefix for file access vectors.
#

common file
{
	ioctl
	read
	write
	create
	getattr
	setattr
	lock
	relabelfrom
	relabelto
	append
	unlink
	link
	rename
	execute
	swapon
	quotaon
	mounton
}


#
# Define a common prefix for socket access vectors.
#

common socket
{
# inherited from file
	ioctl
	read
	write
	create
	getattr
	setattr
	lock
	relabelfrom
	relabelto
	append
# socket-specific
	bind
	connect
	listen
	accept
	getopt
	setopt
	shutdown
	recvfrom
	sendto
	recv_msg
	send_msg
	name_bind
}

#
# Define a common prefix for ipc access vectors.
#

common ipc
{
	create
	destroy
	getattr
	setattr
	read
	write
	associate
	unix_read
	unix_write
}

#
# Define the access vectors.
#
# class class_name [ inherits common_name ] { permission_name ... }


#
# Define the access vector interpretation for file-related objects.
#

class filesystem
{
	mount
	remount
	unmount
	getattr
	relabelfrom
	relabelto
	transition
	associate
	quotamod
	quotaget
}

class dir
inherits file
{
	add_name
	remove_name
	reparent
	search
	rmdir
	open
	audit_access
	execmod
}

class file
inherits file
{
	execute_no_trans
	entrypoint
	execmod
	open
	audit_access
}

class lnk_file
inherits file
{
	open
	audit_access
	execmod
}

class chr_file
inherits file
{
	execute_no_trans
	entrypoint
	execmod
	open
	audit_access
}

class blk_file
inherits file
{
	open
	audit_access
	execmod
}

class sock_file
inherits file
{
	open
	audit_access
	execmod
}

class fifo_file
inherits file
{
	open
	audit_access
	execmod
}

class fd
{
	use
}


#
# Define the access vector interpretation for network-related objects.
#

class socket
inherits socket

class tcp_socket
inherits socket
{
	connectto
	newconn
	acceptfrom
	node_bind
	name_connect
}

class udp_socket
inherits socket
{
	node_bind
}

class rawip_socket
inherits socket
{
	node_bind
}

class node
{
	tcp_recv
	tcp_send
	udp_recv
	udp_send
	rawip_recv
	rawip_send
	enforce_dest
	dccp_recv
	dccp_send
	recvfrom
	sendto
}

class netif
{
	tcp_recv
	tcp_send
	udp_recv
	udp_send
	rawip_recv
	rawip_send
	dccp_recv
	dccp_send
	ingress
	egress
}

class netlink_socket
inherits socket

class packet_socket
inherits socket

class key_socket
inherits socket

class unix_stream_socket
inherits socket
{
	connectto
	newconn
	acceptfrom
}

class unix_dgram_socket
inherits socket

#
# Define the access vector interpretation for process-related objects
#

class process
{
	fork
	transition
	sigchld # commonly granted from child to parent
	sigkill # cannot be caught or ignored
	sigstop # cannot be caught or ignored
	signull # for kill(pid, 0)
	signal  # all other signals
	ptrace
	getsched
	setsched
	getsession
	getpgid
	setpgid
	getcap
	setcap
	share
	getattr
	setexec
	setfscreate
	noatsecure
	siginh
	setrlimit
	rlimitinh
	dyntransition
	setcurrent
	execmem
	execstack
	execheap
	setkeycreate
	setsockcreate
}


#
# Define the access vector interpretation for ipc-related objects
#

class ipc
inherits ipc

class sem
inherits ipc

class msgq
inherits ipc
{
	enqueue
}

class msg
{
	send
	receive
}

class shm
inherits ipc
{
	lock
}


#
# Define the access vector interpretation for the security server.
#

class security
{
	compute_av
	compute_create
	compute_member
	check_context
	load_policy
	compute_relabel
	compute_user
	setenforce     # was avc_toggle in system class
	setbool
	setsecparam
	setcheckreqprot
	read_policy
}


#
# Define the access vector interpretation for system operations.
#

class system
{
	ipc_info
	syslog_read
	syslog_mod
	syslog_console
	module_request
	module_load
}

#
# Define the access vector interpretation for controling capabilies
#

class capability
{
	# The capabilities are defined in include/linux/capability.h
	# Capabilities >= 32 are defined in the capability2 class.
	# Care should be taken to ensure that these are consistent with
	# those definitions. (Order matters)

	chown
	dac_override
	dac_read_search
	fowner
	fsetid
	kill
	setgid
	setuid
	setpcap
	linux_immutable
	net_bind_service
	net_broadcast
	net_admin
	net_raw
	ipc_lock
	ipc_owner
	sys_module
	sys_rawio
	sys_chroot
	sys_ptrace
	sys_pacct
	sys_admin
	sys_boot
	sys_nice
	sys_resource
	sys_time
	sys_tty_config
	mknod
	lease
	audit_write
	audit_control
	setfcap
}

class capability2
{
	mac_override	# unused by SELinux
	mac_admin	# unused by SELinux
	syslog
	wake_alarm
	block_suspend
	audit_read
}

#
# Extended Netlink classes
#
class netlink_route_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_firewall_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_tcpdiag_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_nflog_socket
inherits socket

class netlink_xfrm_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_selinux_socket
inherits socket

class netlink_audit_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
	nlmsg_relay
	nlmsg_readpriv
	nlmsg_tty_audit
}

class netlink_ip6fw_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_dnrt_socket
inherits socket

# Define the access vector interpretation for controlling
# access to IPSec network data by association
#
class association
{
	sendto
	recvfrom
	setcontext
	polmatch
}

# Updated Netlink class for KOBJECT_UEVENT family.
class netlink_kobject_uevent_socket
inherits socket

class appletalk_socket
inherits socket

class packet
{
	send
	recv
	relabelto
	flow_in		# deprecated
	flow_out	# deprecated
	forward_in
	forward_out
}

class key
{
	view
	read
	write
	search
	link
	setattr
	create
}

class dccp_socket
inherits socket
{
	node_bind
	name_connect
}

class memprotect
{
	mmap_zero
}

# network peer labels
class peer
{
	recv
}

class kernel_service
{
	use_as_override
	create_files_as
}

class tun_socket
inherits socket
{
	attach_queue
}

class binder
{
	impersonate
	call
	set_context_mgr
	transfer
}

class netlink_iscsi_socket
inherits socket

class netlink_fib_lookup_socket
inherits socket

class netlink_connector_socket
inherits socket

class netlink_netfilter_socket
inherits socket

class netlink_generic_socket
inherits socket

class netlink_scsitransport_socket
inherits socket

class netlink_rdma_socket
inherits socket

class netlink_crypto_socket
inherits socket

class property_service
{
	set
}

class service_manager
{
	add
	find
	list
}

class keystore_key
{
	get_state
	get
	insert
	delete
	exist
	list
	reset
	password
	lock
	unlock
	is_empty
	sign
	verify
	grant
	duplicate
	clear_uid
	add_auth
	user_changed
}

class debuggerd
{
	dump_tombstone
	dump_backtrace
}

class drmservice {
	consumeRights
	setPlaybackStatus
	openDecryptSession
	closeDecryptSession
	initializeDecryptUnit
	decrypt
	finalizeDecryptUnit
	pread
}
#line 1 "system/sepolicy/global_macros"
#####################################
# Common groupings of object classes.
#














#####################################
# Common groupings of permissions.
#




















#####################################
# Common socket permission sets.




#line 1 "system/sepolicy/neverallow_macros"
#
# Common neverallow permissions




#line 1 "system/sepolicy/mls_macros"
########################################
#
# gen_cats(N)
#
# declares categores c0 to c(N-1)
#
#line 10




########################################
#
# gen_sens(N)
#
# declares sensitivites s0 to s(N-1) with dominance
# in increasing numeric order with s0 lowest, s(N-1) highest
#
#line 24




#line 34


########################################
#
# gen_levels(N,M)
#
# levels from s0 to (N-1) with categories c0 to (M-1)
#
#line 45




########################################
#
# Basic level names for system low and high
#


#line 1 "system/sepolicy/mls"
#########################################
# MLS declarations
#

# Generate the desired number of sensitivities and categories.

#line 6
# Each sensitivity has a name and zero or more aliases.
#line 6
sensitivity s0;
#line 6

#line 6

#line 6
# Define the ordering of the sensitivity levels (least to greatest)
#line 6
dominance { s0  }
#line 6

category c0;
#line 7
category c1;
#line 7
category c2;
#line 7
category c3;
#line 7
category c4;
#line 7
category c5;
#line 7
category c6;
#line 7
category c7;
#line 7
category c8;
#line 7
category c9;
#line 7
category c10;
#line 7
category c11;
#line 7
category c12;
#line 7
category c13;
#line 7
category c14;
#line 7
category c15;
#line 7
category c16;
#line 7
category c17;
#line 7
category c18;
#line 7
category c19;
#line 7
category c20;
#line 7
category c21;
#line 7
category c22;
#line 7
category c23;
#line 7
category c24;
#line 7
category c25;
#line 7
category c26;
#line 7
category c27;
#line 7
category c28;
#line 7
category c29;
#line 7
category c30;
#line 7
category c31;
#line 7
category c32;
#line 7
category c33;
#line 7
category c34;
#line 7
category c35;
#line 7
category c36;
#line 7
category c37;
#line 7
category c38;
#line 7
category c39;
#line 7
category c40;
#line 7
category c41;
#line 7
category c42;
#line 7
category c43;
#line 7
category c44;
#line 7
category c45;
#line 7
category c46;
#line 7
category c47;
#line 7
category c48;
#line 7
category c49;
#line 7
category c50;
#line 7
category c51;
#line 7
category c52;
#line 7
category c53;
#line 7
category c54;
#line 7
category c55;
#line 7
category c56;
#line 7
category c57;
#line 7
category c58;
#line 7
category c59;
#line 7
category c60;
#line 7
category c61;
#line 7
category c62;
#line 7
category c63;
#line 7
category c64;
#line 7
category c65;
#line 7
category c66;
#line 7
category c67;
#line 7
category c68;
#line 7
category c69;
#line 7
category c70;
#line 7
category c71;
#line 7
category c72;
#line 7
category c73;
#line 7
category c74;
#line 7
category c75;
#line 7
category c76;
#line 7
category c77;
#line 7
category c78;
#line 7
category c79;
#line 7
category c80;
#line 7
category c81;
#line 7
category c82;
#line 7
category c83;
#line 7
category c84;
#line 7
category c85;
#line 7
category c86;
#line 7
category c87;
#line 7
category c88;
#line 7
category c89;
#line 7
category c90;
#line 7
category c91;
#line 7
category c92;
#line 7
category c93;
#line 7
category c94;
#line 7
category c95;
#line 7
category c96;
#line 7
category c97;
#line 7
category c98;
#line 7
category c99;
#line 7
category c100;
#line 7
category c101;
#line 7
category c102;
#line 7
category c103;
#line 7
category c104;
#line 7
category c105;
#line 7
category c106;
#line 7
category c107;
#line 7
category c108;
#line 7
category c109;
#line 7
category c110;
#line 7
category c111;
#line 7
category c112;
#line 7
category c113;
#line 7
category c114;
#line 7
category c115;
#line 7
category c116;
#line 7
category c117;
#line 7
category c118;
#line 7
category c119;
#line 7
category c120;
#line 7
category c121;
#line 7
category c122;
#line 7
category c123;
#line 7
category c124;
#line 7
category c125;
#line 7
category c126;
#line 7
category c127;
#line 7
category c128;
#line 7
category c129;
#line 7
category c130;
#line 7
category c131;
#line 7
category c132;
#line 7
category c133;
#line 7
category c134;
#line 7
category c135;
#line 7
category c136;
#line 7
category c137;
#line 7
category c138;
#line 7
category c139;
#line 7
category c140;
#line 7
category c141;
#line 7
category c142;
#line 7
category c143;
#line 7
category c144;
#line 7
category c145;
#line 7
category c146;
#line 7
category c147;
#line 7
category c148;
#line 7
category c149;
#line 7
category c150;
#line 7
category c151;
#line 7
category c152;
#line 7
category c153;
#line 7
category c154;
#line 7
category c155;
#line 7
category c156;
#line 7
category c157;
#line 7
category c158;
#line 7
category c159;
#line 7
category c160;
#line 7
category c161;
#line 7
category c162;
#line 7
category c163;
#line 7
category c164;
#line 7
category c165;
#line 7
category c166;
#line 7
category c167;
#line 7
category c168;
#line 7
category c169;
#line 7
category c170;
#line 7
category c171;
#line 7
category c172;
#line 7
category c173;
#line 7
category c174;
#line 7
category c175;
#line 7
category c176;
#line 7
category c177;
#line 7
category c178;
#line 7
category c179;
#line 7
category c180;
#line 7
category c181;
#line 7
category c182;
#line 7
category c183;
#line 7
category c184;
#line 7
category c185;
#line 7
category c186;
#line 7
category c187;
#line 7
category c188;
#line 7
category c189;
#line 7
category c190;
#line 7
category c191;
#line 7
category c192;
#line 7
category c193;
#line 7
category c194;
#line 7
category c195;
#line 7
category c196;
#line 7
category c197;
#line 7
category c198;
#line 7
category c199;
#line 7
category c200;
#line 7
category c201;
#line 7
category c202;
#line 7
category c203;
#line 7
category c204;
#line 7
category c205;
#line 7
category c206;
#line 7
category c207;
#line 7
category c208;
#line 7
category c209;
#line 7
category c210;
#line 7
category c211;
#line 7
category c212;
#line 7
category c213;
#line 7
category c214;
#line 7
category c215;
#line 7
category c216;
#line 7
category c217;
#line 7
category c218;
#line 7
category c219;
#line 7
category c220;
#line 7
category c221;
#line 7
category c222;
#line 7
category c223;
#line 7
category c224;
#line 7
category c225;
#line 7
category c226;
#line 7
category c227;
#line 7
category c228;
#line 7
category c229;
#line 7
category c230;
#line 7
category c231;
#line 7
category c232;
#line 7
category c233;
#line 7
category c234;
#line 7
category c235;
#line 7
category c236;
#line 7
category c237;
#line 7
category c238;
#line 7
category c239;
#line 7
category c240;
#line 7
category c241;
#line 7
category c242;
#line 7
category c243;
#line 7
category c244;
#line 7
category c245;
#line 7
category c246;
#line 7
category c247;
#line 7
category c248;
#line 7
category c249;
#line 7
category c250;
#line 7
category c251;
#line 7
category c252;
#line 7
category c253;
#line 7
category c254;
#line 7
category c255;
#line 7
category c256;
#line 7
category c257;
#line 7
category c258;
#line 7
category c259;
#line 7
category c260;
#line 7
category c261;
#line 7
category c262;
#line 7
category c263;
#line 7
category c264;
#line 7
category c265;
#line 7
category c266;
#line 7
category c267;
#line 7
category c268;
#line 7
category c269;
#line 7
category c270;
#line 7
category c271;
#line 7
category c272;
#line 7
category c273;
#line 7
category c274;
#line 7
category c275;
#line 7
category c276;
#line 7
category c277;
#line 7
category c278;
#line 7
category c279;
#line 7
category c280;
#line 7
category c281;
#line 7
category c282;
#line 7
category c283;
#line 7
category c284;
#line 7
category c285;
#line 7
category c286;
#line 7
category c287;
#line 7
category c288;
#line 7
category c289;
#line 7
category c290;
#line 7
category c291;
#line 7
category c292;
#line 7
category c293;
#line 7
category c294;
#line 7
category c295;
#line 7
category c296;
#line 7
category c297;
#line 7
category c298;
#line 7
category c299;
#line 7
category c300;
#line 7
category c301;
#line 7
category c302;
#line 7
category c303;
#line 7
category c304;
#line 7
category c305;
#line 7
category c306;
#line 7
category c307;
#line 7
category c308;
#line 7
category c309;
#line 7
category c310;
#line 7
category c311;
#line 7
category c312;
#line 7
category c313;
#line 7
category c314;
#line 7
category c315;
#line 7
category c316;
#line 7
category c317;
#line 7
category c318;
#line 7
category c319;
#line 7
category c320;
#line 7
category c321;
#line 7
category c322;
#line 7
category c323;
#line 7
category c324;
#line 7
category c325;
#line 7
category c326;
#line 7
category c327;
#line 7
category c328;
#line 7
category c329;
#line 7
category c330;
#line 7
category c331;
#line 7
category c332;
#line 7
category c333;
#line 7
category c334;
#line 7
category c335;
#line 7
category c336;
#line 7
category c337;
#line 7
category c338;
#line 7
category c339;
#line 7
category c340;
#line 7
category c341;
#line 7
category c342;
#line 7
category c343;
#line 7
category c344;
#line 7
category c345;
#line 7
category c346;
#line 7
category c347;
#line 7
category c348;
#line 7
category c349;
#line 7
category c350;
#line 7
category c351;
#line 7
category c352;
#line 7
category c353;
#line 7
category c354;
#line 7
category c355;
#line 7
category c356;
#line 7
category c357;
#line 7
category c358;
#line 7
category c359;
#line 7
category c360;
#line 7
category c361;
#line 7
category c362;
#line 7
category c363;
#line 7
category c364;
#line 7
category c365;
#line 7
category c366;
#line 7
category c367;
#line 7
category c368;
#line 7
category c369;
#line 7
category c370;
#line 7
category c371;
#line 7
category c372;
#line 7
category c373;
#line 7
category c374;
#line 7
category c375;
#line 7
category c376;
#line 7
category c377;
#line 7
category c378;
#line 7
category c379;
#line 7
category c380;
#line 7
category c381;
#line 7
category c382;
#line 7
category c383;
#line 7
category c384;
#line 7
category c385;
#line 7
category c386;
#line 7
category c387;
#line 7
category c388;
#line 7
category c389;
#line 7
category c390;
#line 7
category c391;
#line 7
category c392;
#line 7
category c393;
#line 7
category c394;
#line 7
category c395;
#line 7
category c396;
#line 7
category c397;
#line 7
category c398;
#line 7
category c399;
#line 7
category c400;
#line 7
category c401;
#line 7
category c402;
#line 7
category c403;
#line 7
category c404;
#line 7
category c405;
#line 7
category c406;
#line 7
category c407;
#line 7
category c408;
#line 7
category c409;
#line 7
category c410;
#line 7
category c411;
#line 7
category c412;
#line 7
category c413;
#line 7
category c414;
#line 7
category c415;
#line 7
category c416;
#line 7
category c417;
#line 7
category c418;
#line 7
category c419;
#line 7
category c420;
#line 7
category c421;
#line 7
category c422;
#line 7
category c423;
#line 7
category c424;
#line 7
category c425;
#line 7
category c426;
#line 7
category c427;
#line 7
category c428;
#line 7
category c429;
#line 7
category c430;
#line 7
category c431;
#line 7
category c432;
#line 7
category c433;
#line 7
category c434;
#line 7
category c435;
#line 7
category c436;
#line 7
category c437;
#line 7
category c438;
#line 7
category c439;
#line 7
category c440;
#line 7
category c441;
#line 7
category c442;
#line 7
category c443;
#line 7
category c444;
#line 7
category c445;
#line 7
category c446;
#line 7
category c447;
#line 7
category c448;
#line 7
category c449;
#line 7
category c450;
#line 7
category c451;
#line 7
category c452;
#line 7
category c453;
#line 7
category c454;
#line 7
category c455;
#line 7
category c456;
#line 7
category c457;
#line 7
category c458;
#line 7
category c459;
#line 7
category c460;
#line 7
category c461;
#line 7
category c462;
#line 7
category c463;
#line 7
category c464;
#line 7
category c465;
#line 7
category c466;
#line 7
category c467;
#line 7
category c468;
#line 7
category c469;
#line 7
category c470;
#line 7
category c471;
#line 7
category c472;
#line 7
category c473;
#line 7
category c474;
#line 7
category c475;
#line 7
category c476;
#line 7
category c477;
#line 7
category c478;
#line 7
category c479;
#line 7
category c480;
#line 7
category c481;
#line 7
category c482;
#line 7
category c483;
#line 7
category c484;
#line 7
category c485;
#line 7
category c486;
#line 7
category c487;
#line 7
category c488;
#line 7
category c489;
#line 7
category c490;
#line 7
category c491;
#line 7
category c492;
#line 7
category c493;
#line 7
category c494;
#line 7
category c495;
#line 7
category c496;
#line 7
category c497;
#line 7
category c498;
#line 7
category c499;
#line 7
category c500;
#line 7
category c501;
#line 7
category c502;
#line 7
category c503;
#line 7
category c504;
#line 7
category c505;
#line 7
category c506;
#line 7
category c507;
#line 7
category c508;
#line 7
category c509;
#line 7
category c510;
#line 7
category c511;
#line 7
category c512;
#line 7
category c513;
#line 7
category c514;
#line 7
category c515;
#line 7
category c516;
#line 7
category c517;
#line 7
category c518;
#line 7
category c519;
#line 7
category c520;
#line 7
category c521;
#line 7
category c522;
#line 7
category c523;
#line 7
category c524;
#line 7
category c525;
#line 7
category c526;
#line 7
category c527;
#line 7
category c528;
#line 7
category c529;
#line 7
category c530;
#line 7
category c531;
#line 7
category c532;
#line 7
category c533;
#line 7
category c534;
#line 7
category c535;
#line 7
category c536;
#line 7
category c537;
#line 7
category c538;
#line 7
category c539;
#line 7
category c540;
#line 7
category c541;
#line 7
category c542;
#line 7
category c543;
#line 7
category c544;
#line 7
category c545;
#line 7
category c546;
#line 7
category c547;
#line 7
category c548;
#line 7
category c549;
#line 7
category c550;
#line 7
category c551;
#line 7
category c552;
#line 7
category c553;
#line 7
category c554;
#line 7
category c555;
#line 7
category c556;
#line 7
category c557;
#line 7
category c558;
#line 7
category c559;
#line 7
category c560;
#line 7
category c561;
#line 7
category c562;
#line 7
category c563;
#line 7
category c564;
#line 7
category c565;
#line 7
category c566;
#line 7
category c567;
#line 7
category c568;
#line 7
category c569;
#line 7
category c570;
#line 7
category c571;
#line 7
category c572;
#line 7
category c573;
#line 7
category c574;
#line 7
category c575;
#line 7
category c576;
#line 7
category c577;
#line 7
category c578;
#line 7
category c579;
#line 7
category c580;
#line 7
category c581;
#line 7
category c582;
#line 7
category c583;
#line 7
category c584;
#line 7
category c585;
#line 7
category c586;
#line 7
category c587;
#line 7
category c588;
#line 7
category c589;
#line 7
category c590;
#line 7
category c591;
#line 7
category c592;
#line 7
category c593;
#line 7
category c594;
#line 7
category c595;
#line 7
category c596;
#line 7
category c597;
#line 7
category c598;
#line 7
category c599;
#line 7
category c600;
#line 7
category c601;
#line 7
category c602;
#line 7
category c603;
#line 7
category c604;
#line 7
category c605;
#line 7
category c606;
#line 7
category c607;
#line 7
category c608;
#line 7
category c609;
#line 7
category c610;
#line 7
category c611;
#line 7
category c612;
#line 7
category c613;
#line 7
category c614;
#line 7
category c615;
#line 7
category c616;
#line 7
category c617;
#line 7
category c618;
#line 7
category c619;
#line 7
category c620;
#line 7
category c621;
#line 7
category c622;
#line 7
category c623;
#line 7
category c624;
#line 7
category c625;
#line 7
category c626;
#line 7
category c627;
#line 7
category c628;
#line 7
category c629;
#line 7
category c630;
#line 7
category c631;
#line 7
category c632;
#line 7
category c633;
#line 7
category c634;
#line 7
category c635;
#line 7
category c636;
#line 7
category c637;
#line 7
category c638;
#line 7
category c639;
#line 7
category c640;
#line 7
category c641;
#line 7
category c642;
#line 7
category c643;
#line 7
category c644;
#line 7
category c645;
#line 7
category c646;
#line 7
category c647;
#line 7
category c648;
#line 7
category c649;
#line 7
category c650;
#line 7
category c651;
#line 7
category c652;
#line 7
category c653;
#line 7
category c654;
#line 7
category c655;
#line 7
category c656;
#line 7
category c657;
#line 7
category c658;
#line 7
category c659;
#line 7
category c660;
#line 7
category c661;
#line 7
category c662;
#line 7
category c663;
#line 7
category c664;
#line 7
category c665;
#line 7
category c666;
#line 7
category c667;
#line 7
category c668;
#line 7
category c669;
#line 7
category c670;
#line 7
category c671;
#line 7
category c672;
#line 7
category c673;
#line 7
category c674;
#line 7
category c675;
#line 7
category c676;
#line 7
category c677;
#line 7
category c678;
#line 7
category c679;
#line 7
category c680;
#line 7
category c681;
#line 7
category c682;
#line 7
category c683;
#line 7
category c684;
#line 7
category c685;
#line 7
category c686;
#line 7
category c687;
#line 7
category c688;
#line 7
category c689;
#line 7
category c690;
#line 7
category c691;
#line 7
category c692;
#line 7
category c693;
#line 7
category c694;
#line 7
category c695;
#line 7
category c696;
#line 7
category c697;
#line 7
category c698;
#line 7
category c699;
#line 7
category c700;
#line 7
category c701;
#line 7
category c702;
#line 7
category c703;
#line 7
category c704;
#line 7
category c705;
#line 7
category c706;
#line 7
category c707;
#line 7
category c708;
#line 7
category c709;
#line 7
category c710;
#line 7
category c711;
#line 7
category c712;
#line 7
category c713;
#line 7
category c714;
#line 7
category c715;
#line 7
category c716;
#line 7
category c717;
#line 7
category c718;
#line 7
category c719;
#line 7
category c720;
#line 7
category c721;
#line 7
category c722;
#line 7
category c723;
#line 7
category c724;
#line 7
category c725;
#line 7
category c726;
#line 7
category c727;
#line 7
category c728;
#line 7
category c729;
#line 7
category c730;
#line 7
category c731;
#line 7
category c732;
#line 7
category c733;
#line 7
category c734;
#line 7
category c735;
#line 7
category c736;
#line 7
category c737;
#line 7
category c738;
#line 7
category c739;
#line 7
category c740;
#line 7
category c741;
#line 7
category c742;
#line 7
category c743;
#line 7
category c744;
#line 7
category c745;
#line 7
category c746;
#line 7
category c747;
#line 7
category c748;
#line 7
category c749;
#line 7
category c750;
#line 7
category c751;
#line 7
category c752;
#line 7
category c753;
#line 7
category c754;
#line 7
category c755;
#line 7
category c756;
#line 7
category c757;
#line 7
category c758;
#line 7
category c759;
#line 7
category c760;
#line 7
category c761;
#line 7
category c762;
#line 7
category c763;
#line 7
category c764;
#line 7
category c765;
#line 7
category c766;
#line 7
category c767;
#line 7
category c768;
#line 7
category c769;
#line 7
category c770;
#line 7
category c771;
#line 7
category c772;
#line 7
category c773;
#line 7
category c774;
#line 7
category c775;
#line 7
category c776;
#line 7
category c777;
#line 7
category c778;
#line 7
category c779;
#line 7
category c780;
#line 7
category c781;
#line 7
category c782;
#line 7
category c783;
#line 7
category c784;
#line 7
category c785;
#line 7
category c786;
#line 7
category c787;
#line 7
category c788;
#line 7
category c789;
#line 7
category c790;
#line 7
category c791;
#line 7
category c792;
#line 7
category c793;
#line 7
category c794;
#line 7
category c795;
#line 7
category c796;
#line 7
category c797;
#line 7
category c798;
#line 7
category c799;
#line 7
category c800;
#line 7
category c801;
#line 7
category c802;
#line 7
category c803;
#line 7
category c804;
#line 7
category c805;
#line 7
category c806;
#line 7
category c807;
#line 7
category c808;
#line 7
category c809;
#line 7
category c810;
#line 7
category c811;
#line 7
category c812;
#line 7
category c813;
#line 7
category c814;
#line 7
category c815;
#line 7
category c816;
#line 7
category c817;
#line 7
category c818;
#line 7
category c819;
#line 7
category c820;
#line 7
category c821;
#line 7
category c822;
#line 7
category c823;
#line 7
category c824;
#line 7
category c825;
#line 7
category c826;
#line 7
category c827;
#line 7
category c828;
#line 7
category c829;
#line 7
category c830;
#line 7
category c831;
#line 7
category c832;
#line 7
category c833;
#line 7
category c834;
#line 7
category c835;
#line 7
category c836;
#line 7
category c837;
#line 7
category c838;
#line 7
category c839;
#line 7
category c840;
#line 7
category c841;
#line 7
category c842;
#line 7
category c843;
#line 7
category c844;
#line 7
category c845;
#line 7
category c846;
#line 7
category c847;
#line 7
category c848;
#line 7
category c849;
#line 7
category c850;
#line 7
category c851;
#line 7
category c852;
#line 7
category c853;
#line 7
category c854;
#line 7
category c855;
#line 7
category c856;
#line 7
category c857;
#line 7
category c858;
#line 7
category c859;
#line 7
category c860;
#line 7
category c861;
#line 7
category c862;
#line 7
category c863;
#line 7
category c864;
#line 7
category c865;
#line 7
category c866;
#line 7
category c867;
#line 7
category c868;
#line 7
category c869;
#line 7
category c870;
#line 7
category c871;
#line 7
category c872;
#line 7
category c873;
#line 7
category c874;
#line 7
category c875;
#line 7
category c876;
#line 7
category c877;
#line 7
category c878;
#line 7
category c879;
#line 7
category c880;
#line 7
category c881;
#line 7
category c882;
#line 7
category c883;
#line 7
category c884;
#line 7
category c885;
#line 7
category c886;
#line 7
category c887;
#line 7
category c888;
#line 7
category c889;
#line 7
category c890;
#line 7
category c891;
#line 7
category c892;
#line 7
category c893;
#line 7
category c894;
#line 7
category c895;
#line 7
category c896;
#line 7
category c897;
#line 7
category c898;
#line 7
category c899;
#line 7
category c900;
#line 7
category c901;
#line 7
category c902;
#line 7
category c903;
#line 7
category c904;
#line 7
category c905;
#line 7
category c906;
#line 7
category c907;
#line 7
category c908;
#line 7
category c909;
#line 7
category c910;
#line 7
category c911;
#line 7
category c912;
#line 7
category c913;
#line 7
category c914;
#line 7
category c915;
#line 7
category c916;
#line 7
category c917;
#line 7
category c918;
#line 7
category c919;
#line 7
category c920;
#line 7
category c921;
#line 7
category c922;
#line 7
category c923;
#line 7
category c924;
#line 7
category c925;
#line 7
category c926;
#line 7
category c927;
#line 7
category c928;
#line 7
category c929;
#line 7
category c930;
#line 7
category c931;
#line 7
category c932;
#line 7
category c933;
#line 7
category c934;
#line 7
category c935;
#line 7
category c936;
#line 7
category c937;
#line 7
category c938;
#line 7
category c939;
#line 7
category c940;
#line 7
category c941;
#line 7
category c942;
#line 7
category c943;
#line 7
category c944;
#line 7
category c945;
#line 7
category c946;
#line 7
category c947;
#line 7
category c948;
#line 7
category c949;
#line 7
category c950;
#line 7
category c951;
#line 7
category c952;
#line 7
category c953;
#line 7
category c954;
#line 7
category c955;
#line 7
category c956;
#line 7
category c957;
#line 7
category c958;
#line 7
category c959;
#line 7
category c960;
#line 7
category c961;
#line 7
category c962;
#line 7
category c963;
#line 7
category c964;
#line 7
category c965;
#line 7
category c966;
#line 7
category c967;
#line 7
category c968;
#line 7
category c969;
#line 7
category c970;
#line 7
category c971;
#line 7
category c972;
#line 7
category c973;
#line 7
category c974;
#line 7
category c975;
#line 7
category c976;
#line 7
category c977;
#line 7
category c978;
#line 7
category c979;
#line 7
category c980;
#line 7
category c981;
#line 7
category c982;
#line 7
category c983;
#line 7
category c984;
#line 7
category c985;
#line 7
category c986;
#line 7
category c987;
#line 7
category c988;
#line 7
category c989;
#line 7
category c990;
#line 7
category c991;
#line 7
category c992;
#line 7
category c993;
#line 7
category c994;
#line 7
category c995;
#line 7
category c996;
#line 7
category c997;
#line 7
category c998;
#line 7
category c999;
#line 7
category c1000;
#line 7
category c1001;
#line 7
category c1002;
#line 7
category c1003;
#line 7
category c1004;
#line 7
category c1005;
#line 7
category c1006;
#line 7
category c1007;
#line 7
category c1008;
#line 7
category c1009;
#line 7
category c1010;
#line 7
category c1011;
#line 7
category c1012;
#line 7
category c1013;
#line 7
category c1014;
#line 7
category c1015;
#line 7
category c1016;
#line 7
category c1017;
#line 7
category c1018;
#line 7
category c1019;
#line 7
category c1020;
#line 7
category c1021;
#line 7
category c1022;
#line 7
category c1023;
#line 7


# Generate level definitions for each sensitivity and category.
level s0:c0.c1023;
#line 10



#################################################
# MLS policy constraints
#

#
# Process constraints
#

# Process transition:  Require equivalence unless the subject is trusted.
mlsconstrain process { transition dyntransition }
	     ((h1 eq h2 and l1 eq l2) or t1 == mlstrustedsubject);

# Process read operations: No read up unless trusted.
mlsconstrain process { getsched getsession getpgid getcap getattr ptrace share }
	     (l1 dom l2 or t1 == mlstrustedsubject);

# Process write operations:  Require equivalence unless trusted.
mlsconstrain process { sigkill sigstop signal setsched setpgid setcap setrlimit ptrace share }
	     (l1 eq l2 or t1 == mlstrustedsubject);

#
# Socket constraints
#

# Create/relabel operations:  Subject must be equivalent to object unless
# the subject is trusted.  Sockets inherit the range of their creator.
mlsconstrain { socket tcp_socket udp_socket rawip_socket netlink_socket packet_socket key_socket unix_stream_socket unix_dgram_socket appletalk_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket netlink_kobject_uevent_socket tun_socket netlink_iscsi_socket netlink_fib_lookup_socket netlink_connector_socket netlink_netfilter_socket netlink_generic_socket netlink_scsitransport_socket netlink_rdma_socket netlink_crypto_socket } { create relabelfrom relabelto }
	     ((h1 eq h2 and l1 eq l2) or t1 == mlstrustedsubject);

# Datagram send: Sender must be equivalent to the receiver unless one of them
# is trusted.
mlsconstrain unix_dgram_socket { sendto }
	     (l1 eq l2 or t1 == mlstrustedsubject or t2 == mlstrustedsubject);

# Stream connect:  Client must be equivalent to server unless one of them
# is trusted.
mlsconstrain unix_stream_socket { connectto }
	     (l1 eq l2 or t1 == mlstrustedsubject or t2 == mlstrustedsubject);

#
# Directory/file constraints
#

# Create/relabel operations:  Subject must be equivalent to object unless
# the subject is trusted. Also, files should always be single-level.
# Do NOT exempt mlstrustedobject types from this constraint.
mlsconstrain { dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } { create relabelfrom relabelto }
	     (l2 eq h2 and (l1 eq l2 or t1 == mlstrustedsubject));

#
# Constraints for app data files only.
#

# Only constrain open, not read/write.
# Also constrain other forms of manipulation, e.g. chmod/chown, unlink, rename, etc.
# Subject must be equivalent to object unless the subject is trusted.
mlsconstrain dir { open search setattr rename add_name remove_name reparent rmdir }
	     (t2 != app_data_file or l1 eq l2 or t1 == mlstrustedsubject);
mlsconstrain { file lnk_file sock_file } { open setattr unlink link rename }
	     (t2 != app_data_file or l1 eq l2 or t1 == mlstrustedsubject);

#
# Constraints for file types other than app data files.
#

# Read operations: Subject must dominate object unless the subject
# or the object is trusted.
mlsconstrain dir { read getattr search }
	     (t2 == app_data_file or l1 dom l2 or t1 == mlstrustedsubject or t2 == mlstrustedobject);

mlsconstrain { file lnk_file sock_file chr_file blk_file } { read getattr execute }
	     (t2 == app_data_file or l1 dom l2 or t1 == mlstrustedsubject or t2 == mlstrustedobject);

# Write operations: Subject must be equivalent to the object unless the
# subject or the object is trusted.
mlsconstrain dir { write setattr rename add_name remove_name reparent rmdir }
	     (t2 == app_data_file or l1 eq l2 or t1 == mlstrustedsubject or t2 == mlstrustedobject);

mlsconstrain { file lnk_file sock_file chr_file blk_file } { write setattr append unlink link rename }
	     (t2 == app_data_file or l1 eq l2 or t1 == mlstrustedsubject or t2 == mlstrustedobject);

# Special case for FIFOs.
# These can be unnamed pipes, in which case they will be labeled with the
# creating process' label. Thus we also have an exemption when the "object"
# is a domain type, so that processes can communicate via unnamed pipes
# passed by binder or local socket IPC.
mlsconstrain fifo_file { read getattr }
	     (l1 dom l2 or t1 == mlstrustedsubject or t2 == mlstrustedobject or t2 == domain);

mlsconstrain fifo_file { write setattr append unlink link rename }
	     (l1 eq l2 or t1 == mlstrustedsubject or t2 == mlstrustedobject or t2 == domain);

#
# Binder IPC constraints
#
# Presently commented out, as apps are expected to call one another.
# This would only make sense if apps were assigned categories
# based on allowable communications rather than per-app categories.
#mlsconstrain binder call
#	(l1 eq l2 or t1 == mlstrustedsubject or t2 == mlstrustedsubject);
#line 1 "system/sepolicy/policy_capabilities"
# Enable new networking controls.
policycap network_peer_controls;

# Enable open permission check.
policycap open_perms;
#line 1 "system/sepolicy/te_macros"
#####################################
# domain_trans(olddomain, type, newdomain)
# Allow a transition from olddomain to newdomain
# upon executing a file labeled with type.
# This only allows the transition; it does not
# cause it to occur automatically - use domain_auto_trans
# if that is what you want.
#
#line 21


#####################################
# domain_auto_trans(olddomain, type, newdomain)
# Automatically transition from olddomain to newdomain
# upon executing a file labeled with type.
#
#line 33


#####################################
# file_type_trans(domain, dir_type, file_type)
# Allow domain to create a file labeled file_type in a
# directory labeled dir_type.
# This only allows the transition; it does not
# cause it to occur automatically - use file_type_auto_trans
# if that is what you want.
#
#line 49


#####################################
# file_type_auto_trans(domain, dir_type, file_type)
# Automatically label new files with file_type when
# they are created by domain in directories labeled dir_type.
#
#line 62


#####################################
# r_dir_file(domain, type)
# Allow the specified domain to read directories, files
# and symbolic links of the specified type.
#line 71


#####################################
# tmpfs_domain(domain)
# Define and allow access to a unique type for
# this domain when creating tmpfs / shmem / ashmem files.
#line 81


#####################################
# init_daemon_domain(domain)
# Set up a transition from init to the daemon domain
# upon executing its binary.
#line 90


#####################################
# app_domain(domain)
# Allow a base set of permissions required for all apps.
#line 101


#####################################
# net_domain(domain)
# Allow a base set of permissions required for network access.
#line 108


#####################################
# bluetooth_domain(domain)
# Allow a base set of permissions required for bluetooth access.
#line 115


#####################################
# unix_socket_connect(clientdomain, socket, serverdomain)
# Allow a local socket connection from clientdomain via
# socket to serverdomain.
#
# Note: If you see denial records that distill to the
# following allow rules:
# allow clientdomain property_socket:sock_file write;
# allow clientdomain init:unix_stream_socket connectto;
# allow clientdomain something_prop:property_service set;
#
# This sequence is indicative of attempting to set a property.
# use set_prop(sourcedomain, targetproperty)
#
#line 138


#line 143


#####################################
# set_prop(sourcedomain, targetproperty)
# Allows source domain to set the
# targetproperty.
#
#line 154


#####################################
# get_prop(sourcedomain, targetproperty)
# Allows source domain to read the
# targetproperty.
#
#line 163


#####################################
# unix_socket_send(clientdomain, socket, serverdomain)
# Allow a local socket send from clientdomain via
# socket to serverdomain.
#line 172


#####################################
# binder_use(domain)
# Allow domain to use Binder IPC.
#line 186


#####################################
# binder_call(clientdomain, serverdomain)
# Allow clientdomain to perform binder IPC to serverdomain.
#line 198


#####################################
# binder_service(domain)
# Mark a domain as being a Binder service domain.
# Used to allow binder IPC to the various system services.
#line 206


#####################################
# wakelock_use(domain)
# Allow domain to manage wake locks
#line 216


#####################################
# selinux_check_access(domain)
# Allow domain to check SELinux permissions via selinuxfs.
#line 225


#####################################
# selinux_check_context(domain)
# Allow domain to check SELinux contexts via selinuxfs.
#line 233


#####################################
# selinux_setenforce(domain)
# Allow domain to set SELinux to enforcing.
#line 241


#####################################
# selinux_setbool(domain)
# Allow domain to set SELinux booleans.
#line 249


#####################################
# security_access_policy(domain)
# Read only access to all policy files and
# selinuxfs
#line 258


#####################################
# mmac_manage_policy(domain)
# Ability to manage mmac policy files,
# trigger runtime reload, change
# mmac enforcing mode and access logcat.
#line 270


#####################################
# create_pty(domain)
# Allow domain to create and use a pty, isolated from any other domain ptys.
#line 284


#####################################
# Non system_app application set
#


#####################################
# Recovery only
# SELinux rules which apply only to recovery mode
#


#####################################
# Userdebug or eng builds
# SELinux rules which apply only to userdebug or eng builds
#



#####################################
# write_logd(domain)
# Ability to write to android log
# daemon via sockets
#line 311


#####################################
# read_logd(domain)
# Ability to run logcat and read from android
# log daemon via sockets
#line 320


#####################################
# control_logd(domain)
# Ability to control
# android log daemon via sockets
#line 330


#####################################
# use_keystore(domain)
# Ability to use keystore.
# Keystore is requires the following permissions
# to call getpidcon.
#line 343


###########################################
# use_drmservice(domain)
# Ability to use DrmService which requires
# DrmService to call getpidcon.
#line 353


##########################################
# print a message with a trailing newline
# print(`args')
#line 359

#line 1 "device/huawei/angler/sepolicy/te_macros"
#####################################
# qmux_socket(clientdomain)
# Allow client domain to connecto and send
# via a local socket to the qmux domain.
# Also allow the client domain to remove
# its own socket.
#line 1 "system/sepolicy/attributes"
######################################
# Attribute declarations
#

# All types used for devices.
# On change, update CHECK_FC_ASSERT_ATTRS
# in tools/checkfc.c
attribute dev_type;

# All types used for processes.
attribute domain;

# Temporary attribute used for migrating permissions out of domain.
# Motivation: Domain is overly permissive. Start removing permissions
# from domain and assign them to the domain_deprecated attribute.
# Domain_deprecated and domain can initially be assigned to all
# domains. The goal is to not assign domain_deprecated to new domains
# and to start removing domain_deprecated where it's not required or
# reassigning the appropriate permissions to the inheriting domain
# when necessary.
attribute domain_deprecated;

# All types used for filesystems.
# On change, update CHECK_FC_ASSERT_ATTRS
# definition in tools/checkfc.c.
attribute fs_type;

# All types used for context= mounts.
attribute contextmount_type;

# All types used for files that can exist on a labeled fs.
# Do not use for pseudo file types.
# On change, update CHECK_FC_ASSERT_ATTRS
# definition in tools/checkfc.c.
attribute file_type;

# All types used for domain entry points.
attribute exec_type;

# All types used for /data files.
attribute data_file_type;

# All types use for sysfs files.
attribute sysfs_type;

# All types use for debugfs files.
attribute debugfs_type;

# Attribute used for all sdcards
attribute sdcard_type;

# All types used for nodes/hosts.
attribute node_type;

# All types used for network interfaces.
attribute netif_type;

# All types used for network ports.
attribute port_type;

# All types used for property service
# On change, update CHECK_PC_ASSERT_ATTRS
# definition in tools/checkfc.c.
attribute property_type;

# All properties defined in core SELinux policy. Should not be
# used by device specific properties
attribute core_property_type;

# All properties used to configure log filtering.
attribute log_property_type;

# All service_manager types created by system_server
attribute system_server_service;

# services which should be available to all but isolated apps
attribute app_api_service;

# services which export only system_api
attribute system_api_service;

# All types used for services managed by service_manager.
# On change, update CHECK_SC_ASSERT_ATTRS
# definition in tools/checkfc.c.
attribute service_manager_type;

# All domains that can override MLS restrictions.
# i.e. processes that can read up and write down.
attribute mlstrustedsubject;

# All types that can override MLS restrictions.
# i.e. files that can be read by lower and written by higher
attribute mlstrustedobject;

# All domains used for apps.
attribute appdomain;

# All domains used for apps with network access.
attribute netdomain;

# All domains used for apps with bluetooth access.
attribute bluetoothdomain;

# All domains used for binder service domains.
attribute binderservicedomain;

# All domains that access the boot_control HAL. The permissions the HAL
# requires are specific to the implementation provided in each device, but
# common daemons need to be aware of those when calling into the HAL.
attribute boot_control_hal;
#line 1 "system/sepolicy/ioctl_defines"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1 "system/sepolicy/ioctl_macros"
# socket ioctls allowed to unprivileged apps
#line 12


# socket ioctls never allowed to unprivileged apps
#line 42


# commonly used ioctls on unix sockets


# commonly used TTY ioctls

#line 1 "system/sepolicy/adbd.te"
# adbd seclabel is specified in init.rc since
# it lives in the rootfs and has no unique file type.
type adbd, domain, mlstrustedsubject;


#line 5
  allow adbd self:process setcurrent;
#line 5
  allow adbd su:process dyntransition;
#line 8



#line 10
# Allow the necessary permissions.
#line 10

#line 10
# Old domain may exec the file and transition to the new domain.
#line 10
allow adbd shell_exec:file { getattr open read execute };
#line 10
allow adbd shell:process transition;
#line 10
# New domain is entered by executing the file.
#line 10
allow shell shell_exec:file { entrypoint open read execute getattr };
#line 10
# New domain can send SIGCHLD to its caller.
#line 10
allow shell adbd:process sigchld;
#line 10
# Enable AT_SECURE, i.e. libc secure mode.
#line 10
#line 10
#line 10
allow adbd shell:process { siginh rlimitinh };
#line 10

#line 10
# Make the transition occur by default.
#line 10
type_transition adbd shell_exec:process shell;
#line 10


# Do not sanitize the environment or open fds of the shell. Allow signaling
# created processes.
allow adbd shell:process { noatsecure signal };

# Set UID and GID to shell.  Set supplementary groups.
allow adbd self:capability { setuid setgid };

# Drop capabilities from bounding set on user builds.
allow adbd self:capability setpcap;

# Create and use network sockets.

#line 23
typeattribute adbd netdomain;
#line 23


# Access /dev/android_adb or /dev/usb-ffs/adb/ep0
allow adbd adb_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow adbd functionfs:dir search;
allow adbd functionfs:file { { getattr open read ioctl lock } { open append write lock } };

# Use a pseudo tty.
allow adbd devpts:chr_file { { getattr open read ioctl lock } { open append write lock } };

# adb push/pull /data/local/tmp.
allow adbd shell_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow adbd shell_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# adb pull /data/misc/profman.
allow adbd profman_dump_data_file:dir { open getattr read search ioctl lock };
allow adbd profman_dump_data_file:file { getattr open read ioctl lock };

# adb push/pull sdcard.
allow adbd tmpfs:dir search;
allow adbd rootfs:lnk_file { getattr open read ioctl lock };  # /sdcard symlink
allow adbd tmpfs:lnk_file { getattr open read ioctl lock };   # /mnt/sdcard symlink
allow adbd sdcard_type:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow adbd sdcard_type:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# adb pull /data/anr/traces.txt
allow adbd anr_data_file:dir { open getattr read search ioctl lock };
allow adbd anr_data_file:file { getattr open read ioctl lock };

# Set service.adb.*, sys.powerctl, and sys.usb.ffs.ready properties.

#line 53

#line 53
allow adbd property_socket:sock_file write;
#line 53
allow adbd init:unix_stream_socket connectto;
#line 53

#line 53
allow adbd shell_prop:property_service set;
#line 53

#line 53
allow adbd shell_prop:file { getattr open read ioctl lock };
#line 53

#line 53


#line 54

#line 54
allow adbd property_socket:sock_file write;
#line 54
allow adbd init:unix_stream_socket connectto;
#line 54

#line 54
allow adbd powerctl_prop:property_service set;
#line 54

#line 54
allow adbd powerctl_prop:file { getattr open read ioctl lock };
#line 54

#line 54


#line 55

#line 55
allow adbd property_socket:sock_file write;
#line 55
allow adbd init:unix_stream_socket connectto;
#line 55

#line 55
allow adbd ffs_prop:property_service set;
#line 55

#line 55
allow adbd ffs_prop:file { getattr open read ioctl lock };
#line 55

#line 55


# Access device logging gating property

#line 58
allow adbd device_logging_prop:file { getattr open read ioctl lock };
#line 58


# Run /system/bin/bu
allow adbd system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Perform binder IPC to surfaceflinger (screencap)
# XXX Run screencap in a separate domain?

#line 65
# Call the servicemanager and transfer references to it.
#line 65
allow adbd servicemanager:binder { call transfer };
#line 65
# servicemanager performs getpidcon on clients.
#line 65
allow servicemanager adbd:dir search;
#line 65
allow servicemanager adbd:file { read open };
#line 65
allow servicemanager adbd:process getattr;
#line 65
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 65
# all domains in domain.te.
#line 65


#line 66
# Call the server domain and optionally transfer references to it.
#line 66
allow adbd surfaceflinger:binder { call transfer };
#line 66
# Allow the serverdomain to transfer references to the client on the reply.
#line 66
allow surfaceflinger adbd:binder transfer;
#line 66
# Receive and use open files from the server.
#line 66
allow adbd surfaceflinger:fd use;
#line 66

# b/13188914
allow adbd gpu_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow adbd ion_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

#line 70
allow adbd system_file:dir { open getattr read search ioctl lock };
#line 70
allow adbd system_file:{ file lnk_file } { getattr open read ioctl lock };
#line 70


# Read /data/misc/adb/adb_keys.
allow adbd adb_keys_file:dir search;
allow adbd adb_keys_file:file { getattr open read ioctl lock };


#line 76
  # Write debugging information to /data/adb
#line 76
  # when persist.adb.trace_mask is set
#line 76
  # https://code.google.com/p/android/issues/detail?id=72895
#line 76
  allow adbd adb_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
#line 76
  allow adbd adb_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 82


# ndk-gdb invokes adb forward to forward the gdbserver socket.
allow adbd { app_data_file autoplay_data_file }:dir search;
allow adbd { app_data_file autoplay_data_file }:sock_file write;
allow adbd { appdomain autoplay_app }:unix_stream_socket connectto;

# ndk-gdb invokes adb pull of app_process, linker, and libc.so.
allow adbd zygote_exec:file { getattr open read ioctl lock };
allow adbd system_file:file { getattr open read ioctl lock };

# Allow pulling the SELinux policy for CTS purposes
allow adbd selinuxfs:dir { open getattr read search ioctl lock };
allow adbd selinuxfs:file { getattr open read ioctl lock };
allow adbd kernel:security read_policy;

allow adbd surfaceflinger_service:service_manager find;
allow adbd bootchart_data_file:dir search;
allow adbd bootchart_data_file:file { getattr open read ioctl lock };

# Allow access to external storage; we have several visible mount points under /storage
# and symlinks to primary storage at places like /storage/sdcard0 and /mnt/user/0/primary
allow adbd storage_file:dir { open getattr read search ioctl lock };
allow adbd storage_file:lnk_file { getattr open read ioctl lock };
allow adbd mnt_user_file:dir { open getattr read search ioctl lock };
allow adbd mnt_user_file:lnk_file { getattr open read ioctl lock };

# Access to /data/media.
# This should be removed if sdcardfs is modified to alter the secontext for its
# accesses to the underlying FS.
allow adbd media_rw_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow adbd media_rw_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 1 "system/sepolicy/app.te"
###
### Domain for all zygote spawned apps
###
### This file is the base policy for all zygote spawned apps.
### Other policy files, such as isolated_app.te, untrusted_app.te, etc
### extend from this policy. Only policies which should apply to ALL
### zygote spawned apps should be added here.
###

# WebView and other application-specific JIT compilers
allow appdomain self:process execmem;

allow appdomain ashmem_device:chr_file execute;

# Receive and use open file descriptors inherited from zygote.
allow appdomain zygote:fd use;

# gdbserver for ndk-gdb reads the zygote.
# valgrind needs mmap exec for zygote
allow appdomain zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Read system properties managed by zygote.
allow appdomain zygote_tmpfs:file read;

# Notify zygote of death;
allow appdomain zygote:process sigchld;

# Place process into foreground / background
allow appdomain cgroup:dir { search write };
allow appdomain cgroup:file { { getattr open read ioctl lock } { open append write lock } };

# Read /data/dalvik-cache.
allow appdomain dalvikcache_data_file:dir { search getattr };
allow appdomain dalvikcache_data_file:file { getattr open read ioctl lock };

# Read the /sdcard and /mnt/sdcard symlinks
allow appdomain rootfs:lnk_file { getattr open read ioctl lock };
allow appdomain tmpfs:lnk_file { getattr open read ioctl lock };

# Search /storage/emulated tmpfs mount.
allow appdomain tmpfs:dir { open getattr read search ioctl lock };


#line 43
  # Notify zygote of the wrapped process PID when using --invoke-with.
#line 43
  allow appdomain zygote:fifo_file write;
#line 43

#line 43
  # Allow apps to create and write method traces in /data/misc/trace.
#line 43
  allow appdomain method_trace_data_file:dir { open search write add_name remove_name lock };
#line 43
  allow appdomain method_trace_data_file:file { create { open append write lock } };
#line 50


# Notify shell and adbd of death when spawned via runas for ndk-gdb.
allow appdomain shell:process sigchld;
allow appdomain adbd:process sigchld;

# child shell or gdbserver pty access for runas.
allow appdomain devpts:chr_file { getattr read write ioctl };

# Use pipes and sockets provided by system_server via binder or local socket.
allow appdomain system_server:fifo_file { { getattr open read ioctl lock } { open append write lock } };
allow appdomain system_server:unix_stream_socket { read write setopt getattr getopt shutdown };
allow appdomain system_server:tcp_socket { read write getattr getopt shutdown };

# Communication with other apps via fifos
allow appdomain appdomain:fifo_file { { getattr open read ioctl lock } { open append write lock } };

# Communicate with surfaceflinger.
allow appdomain surfaceflinger:unix_stream_socket { read write setopt getattr getopt shutdown };

# App sandbox file accesses.
allow { appdomain -isolated_app } app_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow { appdomain -isolated_app } app_data_file:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# lib subdirectory of /data/data dir is system-owned.
allow appdomain system_data_file:dir { open getattr read search ioctl lock };
allow appdomain system_data_file:file { execute execute_no_trans open execmod };

# Traverse into expanded storage
allow appdomain mnt_expand_file:dir { open getattr read search ioctl lock };

# Keychain and user-trusted credentials
allow appdomain keychain_data_file:dir { open getattr read search ioctl lock };
allow appdomain keychain_data_file:file { getattr open read ioctl lock };
allow appdomain misc_user_data_file:dir { open getattr read search ioctl lock };
allow appdomain misc_user_data_file:file { getattr open read ioctl lock };

# Access to OEM provided data and apps
allow appdomain oemfs:dir { open getattr read search ioctl lock };
allow appdomain oemfs:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Execute the shell or other system executables.
allow appdomain shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow appdomain system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow appdomain toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Renderscript needs the ability to read directories on /system

#line 97
allow appdomain system_file:dir { open getattr read search ioctl lock };
#line 97
allow appdomain system_file:{ file lnk_file } { getattr open read ioctl lock };
#line 97


# Execute dex2oat when apps call dexclassloader
allow appdomain dex2oat_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Read/write wallpaper file (opened by system).
allow appdomain wallpaper_file:file { getattr read write };

# Read/write cached ringtones (opened by system).
allow appdomain ringtone_file:file { getattr read write };

# Read ShortcutManager icon files (opened by system).
allow appdomain shortcut_manager_icons:file { getattr read };

# Read icon file (opened by system).
allow appdomain icon_file:file { getattr read };

# Write to /data/anr/traces.txt.
allow appdomain anr_data_file:dir search;
allow appdomain anr_data_file:file { open append };

# Allow apps to send dump information to dumpstate
allow appdomain dumpstate:fd use;
allow appdomain dumpstate:unix_stream_socket { read write getopt getattr shutdown };
allow appdomain dumpstate:fifo_file { write getattr };
allow appdomain shell_data_file:file { write getattr };

# Write profiles /data/misc/profiles
allow appdomain user_profile_data_file:dir { search write add_name };
allow appdomain user_profile_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
# Profiles for foreign dex files are just markers and only need create permissions.
allow appdomain user_profile_foreign_dex_data_file:dir { search write add_name };
allow appdomain user_profile_foreign_dex_data_file:file create;
# There is no way to create user_profile_foreign_dex_data_file without
# generating open/read denials. These permissions should not be granted and the

# Send heap dumps to system_server via an already open file descriptor
# % adb shell am set-watch-heap com.android.systemui 1048576
# % adb shell dumpsys procstats --start-testing
# debuggable builds only.

#line 139
  allow appdomain heapdump_data_file:file append;
#line 141


# Write to /proc/net/xt_qtaguid/ctrl file.
allow appdomain qtaguid_proc:file { { getattr open read ioctl lock } { open append write lock } };
# Everybody can read the xt_qtaguid resource tracking misc dev.
# So allow all apps to read from /dev/xt_qtaguid.
allow appdomain qtaguid_device:chr_file { getattr open read ioctl lock };

# Grant GPU access to all processes started by Zygote.
# They need that to render the standard UI.
allow { appdomain -isolated_app } gpu_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Use the Binder.

#line 154
# Call the servicemanager and transfer references to it.
#line 154
allow appdomain servicemanager:binder { call transfer };
#line 154
# servicemanager performs getpidcon on clients.
#line 154
allow servicemanager appdomain:dir search;
#line 154
allow servicemanager appdomain:file { read open };
#line 154
allow servicemanager appdomain:process getattr;
#line 154
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 154
# all domains in domain.te.
#line 154

# Perform binder IPC to binder services.

#line 156
# Call the server domain and optionally transfer references to it.
#line 156
allow appdomain binderservicedomain:binder { call transfer };
#line 156
# Allow the serverdomain to transfer references to the client on the reply.
#line 156
allow binderservicedomain appdomain:binder transfer;
#line 156
# Receive and use open files from the server.
#line 156
allow appdomain binderservicedomain:fd use;
#line 156

# Perform binder IPC to other apps.

#line 158
# Call the server domain and optionally transfer references to it.
#line 158
allow appdomain appdomain:binder { call transfer };
#line 158
# Allow the serverdomain to transfer references to the client on the reply.
#line 158
allow appdomain appdomain:binder transfer;
#line 158
# Receive and use open files from the server.
#line 158
allow appdomain appdomain:fd use;
#line 158


# Already connected, unnamed sockets being passed over some other IPC
# hence no sock_file or connectto permission. This appears to be how
# Chrome works, may need to be updated as more apps using isolated services
# are examined.
allow appdomain appdomain:unix_stream_socket { getopt getattr read write shutdown };

# Backup ability for every app. BMS opens and passes the fd
# to any app that has backup ability. Hence, no open permissions here.
allow appdomain backup_data_file:file { read write getattr };
allow appdomain cache_backup_file:file { read write getattr };
allow appdomain cache_backup_file:dir getattr;
# Backup ability using 'adb backup'
allow appdomain system_data_file:lnk_file getattr;

# Allow read/stat of /data/media files passed by Binder or local socket IPC.
allow appdomain media_rw_data_file:file { read getattr };

# Read and write /data/data/com.android.providers.telephony files passed over Binder.
allow appdomain radio_data_file:file { read write getattr };

# Allow access to external storage; we have several visible mount points under /storage
# and symlinks to primary storage at places like /storage/sdcard0 and /mnt/user/0/primary
allow appdomain storage_file:dir { open getattr read search ioctl lock };
allow appdomain storage_file:lnk_file { getattr open read ioctl lock };
allow appdomain mnt_user_file:dir { open getattr read search ioctl lock };
allow appdomain mnt_user_file:lnk_file { getattr open read ioctl lock };

# Read/write visible storage
allow appdomain fuse:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow appdomain fuse:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow appdomain sdcardfs:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow appdomain sdcardfs:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Access OBBs (vfat images) mounted by vold (b/17633509)
# File write access allowed for FDs returned through Storage Access Framework
allow appdomain vfat:dir { open getattr read search ioctl lock };
allow appdomain vfat:file { { getattr open read ioctl lock } { open append write lock } };

# Allow apps to use the USB Accessory interface.
# http://developer.android.com/guide/topics/connectivity/usb/accessory.html
#
# USB devices are first opened by the system server (USBDeviceManagerService)
# and the file descriptor is passed to the right Activity via binder.
allow appdomain usb_device:chr_file { read write getattr ioctl };
allow appdomain usbaccessory_device:chr_file { read write getattr };

# For art.
allow appdomain dalvikcache_data_file:file execute;
allow appdomain dalvikcache_data_file:lnk_file { getattr open read ioctl lock };

# Allow any app to read shared RELRO files.
allow appdomain shared_relro_file:dir search;
allow appdomain shared_relro_file:file { getattr open read ioctl lock };

# Allow apps to read/execute installed binaries
allow appdomain apk_data_file:dir { open getattr read search ioctl lock };
allow appdomain apk_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };

# /data/resource-cache
allow appdomain resourcecache_data_file:file { getattr open read ioctl lock };
allow appdomain resourcecache_data_file:dir { open getattr read search ioctl lock };

# logd access

#line 223
allow appdomain logcat_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 223

#line 223

#line 223

#line 223
allow appdomain logdr_socket:sock_file write;
#line 223
allow appdomain logd:unix_stream_socket connectto;
#line 223

#line 223

#line 223


#line 224
# Group AID_LOG checked by filesystem & logd
#line 224
# to permit control commands
#line 224

#line 224

#line 224

#line 224
allow appdomain logd_socket:sock_file write;
#line 224
allow appdomain logd:unix_stream_socket connectto;
#line 224

#line 224

#line 224

# application inherit logd write socket (urge is to deprecate this long term)
allow appdomain zygote:unix_dgram_socket write;

allow { appdomain -isolated_app } keystore:keystore_key { get_state get insert delete exist list sign verify };


#line 230
  allow keystore { appdomain -isolated_app }:dir search;
#line 230
  allow keystore { appdomain -isolated_app }:file { read open };
#line 230
  allow keystore { appdomain -isolated_app }:process getattr;
#line 230
  allow { appdomain -isolated_app } keystore_service:service_manager find;
#line 230
  
#line 230
# Call the server domain and optionally transfer references to it.
#line 230
allow { appdomain -isolated_app } keystore:binder { call transfer };
#line 230
# Allow the serverdomain to transfer references to the client on the reply.
#line 230
allow keystore { appdomain -isolated_app }:binder transfer;
#line 230
# Receive and use open files from the server.
#line 230
allow { appdomain -isolated_app } keystore:fd use;
#line 230

#line 230


allow appdomain console_device:chr_file { read write };

# only allow unprivileged socket ioctl commands
allowxperm { appdomain -bluetooth } self:{ rawip_socket tcp_socket udp_socket }
  ioctl { 
#line 236
{
#line 236
# Socket ioctls for gathering information about the interface
#line 236
0x00008906 0x00008907
#line 236
0x00008910 0x00008912 0x00008913 0x00008915 0x00008917 0x00008919
#line 236
0x0000891b 0x00008921 0x00008933 0x00008938 0x00008942
#line 236
# Wireless extension ioctls. Primarily get functions.
#line 236
0x00008b01 0x00008b05 0x00008b07 0x00008b09 0x00008b0b 0x00008b0d
#line 236
0x00008b0f 0x00008b11 0x00008b12 0x00008b13 0x00008b21 0x00008b23
#line 236
0x00008b25 0x00008b27 0x00008b29 0x00008b2d
#line 236
} { 0x00005411 0x00005451 } };

allow { appdomain -isolated_app } ion_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# For app fuse.
allow appdomain app_fuse_file:file { getattr read append write };

###
### CTS-specific rules
###

# For cts/tests/tests/permission/src/android/permission/cts/FileSystemPermissionTest.java.
# testRunAsHasCorrectCapabilities
allow appdomain runas_exec:file getattr;
# Others are either allowed elsewhere or not desired.

# For cts/tests/tests/security/src/android/security/cts/SELinuxTest.java
# Check SELinux policy and contexts.

#line 254
allow appdomain selinuxfs:file { { getattr open read ioctl lock } { open append write lock } };
#line 254
allow appdomain kernel:security compute_av;
#line 254
allow appdomain self:netlink_selinux_socket { read write create getattr setattr lock relabelfrom relabelto append bind connect listen accept getopt setopt shutdown recvfrom sendto recv_msg send_msg name_bind };
#line 254


#line 255
allow appdomain selinuxfs:file { { getattr open read ioctl lock } { open append write lock } };
#line 255
allow appdomain kernel:security check_context;
#line 255


# Apps receive an open tun fd from the framework for
# device traffic. Do not allow untrusted app to directly open tun_device
allow { appdomain -isolated_app } tun_device:chr_file { read write getattr ioctl append };

# Connect to adbd and use a socket transferred from it.
# This is used for e.g. adb backup/restore.
allow appdomain adbd:unix_stream_socket connectto;
allow appdomain adbd:fd use;
allow appdomain adbd:unix_stream_socket { getattr getopt ioctl read write shutdown };

allow appdomain cache_file:dir getattr;

###
### Neverallow rules
###
### These are things that Android apps should NEVER be able to do
###

# Superuser capabilities.
# bluetooth requires net_admin and wake_alarm.
neverallow { appdomain -bluetooth } self:capability *;
neverallow { appdomain -bluetooth } self:capability2 *;

# Block device access.
neverallow appdomain dev_type:blk_file { read write };

# Access to any of the following character devices.
neverallow appdomain {
    audio_device
    camera_device
    dm_device
    gps_device
    radio_device
    rpmsg_device
    video_device
}:chr_file { read write };

# Note: Try expanding list of app domains in the future.
neverallow { untrusted_app isolated_app shell } graphics_device:chr_file { read write };

neverallow { appdomain -nfc } nfc_device:chr_file
    { read write };
neverallow { appdomain -bluetooth } hci_attach_dev:chr_file
    { read write };
neverallow appdomain tee_device:chr_file { read write };

# Privileged netlink socket interfaces.
neverallow appdomain
    domain:{
        netlink_firewall_socket
        netlink_tcpdiag_socket
        netlink_nflog_socket
        netlink_xfrm_socket
        netlink_audit_socket
        netlink_ip6fw_socket
        netlink_dnrt_socket
    } *;

# These messages are broadcast messages from the kernel to userspace.
# Do not allow the writing of netlink messages, which has been a source
# of rooting vulns in the past.
neverallow appdomain domain:netlink_kobject_uevent_socket { write append };

# Sockets under /dev/socket that are not specifically typed.
neverallow appdomain socket_device:sock_file write;

# Unix domain sockets.
neverallow appdomain adbd_socket:sock_file write;
neverallow appdomain installd_socket:sock_file write;
neverallow { appdomain -radio } rild_socket:sock_file write;
neverallow appdomain vold_socket:sock_file write;
neverallow appdomain zygote_socket:sock_file write;

# ptrace access to non-app domains.
neverallow appdomain { domain -appdomain }:process ptrace;

# Write access to /proc/pid entries for any non-app domain.
neverallow appdomain { domain -appdomain }:file write;

# signal access to non-app domains.
# sigchld allowed for parent death notification.
# signull allowed for kill(pid, 0) existence test.
# All others prohibited.
neverallow appdomain { domain -appdomain }:process
    { sigkill sigstop signal };

# Transition to a non-app domain.
# Exception for the shell domain and the su domain, can transition to runas,
# etc.
neverallow { appdomain -shell -su } { domain -appdomain }:process
    { transition dyntransition };

# Write to rootfs.
neverallow appdomain rootfs:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } }
    { create write setattr relabelfrom relabelto append unlink link rename };

# Write to /system.
neverallow appdomain system_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } }
    { create write setattr relabelfrom relabelto append unlink link rename };

# Write to entrypoint executables.
neverallow appdomain exec_type:file
    { create write setattr relabelfrom relabelto append unlink link rename };

# Write to system-owned parts of /data.
# This is the default type for anything under /data not otherwise
# specified in file_contexts.  Define a different type for portions
# that should be writable by apps.
neverallow appdomain system_data_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } }
    { create write setattr relabelfrom relabelto append unlink link rename };

# Write to various other parts of /data.
neverallow appdomain drm_data_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } }
    { create write setattr relabelfrom relabelto append unlink link rename };
neverallow { appdomain -system_app }
    gps_data_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } }
    { create write setattr relabelfrom relabelto append unlink link rename };
neverallow { appdomain -platform_app }
    apk_data_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } }
    { create write setattr relabelfrom relabelto append unlink link rename };
neverallow { appdomain -platform_app }
    apk_tmp_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } }
    { create write setattr relabelfrom relabelto append unlink link rename };
neverallow { appdomain -platform_app }
    apk_private_data_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } }
    { create write setattr relabelfrom relabelto append unlink link rename };
neverallow { appdomain -platform_app }
    apk_private_tmp_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } }
    { create write setattr relabelfrom relabelto append unlink link rename };
neverallow { appdomain -shell }
    shell_data_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } }
    { create setattr relabelfrom relabelto append unlink link rename };
neverallow { appdomain -bluetooth }
    bluetooth_data_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } }
    { create write setattr relabelfrom relabelto append unlink link rename };
neverallow appdomain
    keystore_data_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } }
    { create write setattr relabelfrom relabelto append unlink link rename };
neverallow appdomain
    systemkeys_data_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } }
    { create write setattr relabelfrom relabelto append unlink link rename };
neverallow appdomain
    wifi_data_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } }
    { create write setattr relabelfrom relabelto append unlink link rename };
neverallow appdomain
    dhcp_data_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } }
    { create write setattr relabelfrom relabelto append unlink link rename };

# access tmp apk files
neverallow { appdomain -platform_app -priv_app }
    { apk_tmp_file apk_private_tmp_file }:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } *;

# Access to factory files.
neverallow appdomain efs_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;
neverallow { appdomain -shell } efs_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } read;

# Write to various pseudo file systems.
neverallow { appdomain -bluetooth -nfc }
    sysfs:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;
neverallow appdomain
    proc:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;

# Access to syslog(2) or /proc/kmsg.
neverallow { appdomain -system_app }
    kernel:system { syslog_mod syslog_console };
neverallow { appdomain -system_app -shell }
    kernel:system syslog_read;

# Ability to perform any filesystem operation other than statfs(2).
# i.e. no mount(2), unmount(2), etc.
neverallow appdomain fs_type:filesystem ~getattr;

# prevent creation/manipulation of globally readable symlinks
neverallow appdomain {
  apk_data_file
  cache_file
  cache_recovery_file
  dev_type
  rootfs
  system_file
  security_file
  tmpfs
}:lnk_file { append create link unlink relabelfrom rename setattr write };

# Foreign dex profiles are just markers. Prevent apps to do anything but touch them.
neverallow appdomain user_profile_foreign_dex_data_file:file { { getattr open read ioctl lock } { open append write lock } };
neverallow appdomain user_profile_foreign_dex_data_file:dir { open getattr read ioctl remove_name };
#line 1 "system/sepolicy/atrace.te"
# Domain for atrace process spawned by boottrace service.
type atrace_exec, exec_type, file_type;


#line 4

#line 4
  type atrace, domain, domain_deprecated;
#line 4
  
#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init atrace_exec:file { getattr open read execute };
#line 4
allow init atrace:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow atrace atrace_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow atrace init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow init atrace:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init atrace_exec:process atrace;
#line 4

#line 4

#line 4
type atrace_tmpfs, file_type;
#line 4
type_transition atrace tmpfs:file atrace_tmpfs;
#line 4
allow atrace atrace_tmpfs:file { read write };
#line 4

#line 4

#line 4

#line 4
  # boottrace services uses /data/misc/boottrace/categories
#line 4
  allow atrace boottrace_data_file:dir search;
#line 4
  allow atrace boottrace_data_file:file { getattr open read ioctl lock };
#line 4

#line 4
  # atrace reads the files in /sys/kernel/debug/tracing/
#line 4
  allow atrace debugfs_tracing:file { getattr open read ioctl lock };
#line 4

#line 4
  # atrace sets debug.atrace.* properties
#line 4
  
#line 4

#line 4
allow atrace property_socket:sock_file write;
#line 4
allow atrace init:unix_stream_socket connectto;
#line 4

#line 4
allow atrace debug_prop:property_service set;
#line 4

#line 4
allow atrace debug_prop:file { getattr open read ioctl lock };
#line 4

#line 4

#line 4

#line 4
  # atrace pokes all the binder-enabled processes at startup.
#line 4
  
#line 4
# Call the servicemanager and transfer references to it.
#line 4
allow atrace servicemanager:binder { call transfer };
#line 4
# servicemanager performs getpidcon on clients.
#line 4
allow servicemanager atrace:dir search;
#line 4
allow servicemanager atrace:file { read open };
#line 4
allow servicemanager atrace:process getattr;
#line 4
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 4
# all domains in domain.te.
#line 4

#line 4
  allow atrace healthd:binder call;
#line 4
  allow atrace surfaceflinger:binder call;
#line 4

#line 24

#line 1 "system/sepolicy/audioserver.te"
# audioserver - audio services daemon
type audioserver, domain;
type audioserver_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init audioserver_exec:file { getattr open read execute };
#line 5
allow init audioserver:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow audioserver audioserver_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow audioserver init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init audioserver:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init audioserver_exec:process audioserver;
#line 5

#line 5

#line 5
type audioserver_tmpfs, file_type;
#line 5
type_transition audioserver tmpfs:file audioserver_tmpfs;
#line 5
allow audioserver audioserver_tmpfs:file { read write };
#line 5

#line 5



#line 7
allow audioserver sdcard_type:dir { open getattr read search ioctl lock };
#line 7
allow audioserver sdcard_type:{ file lnk_file } { getattr open read ioctl lock };
#line 7



#line 9
# Call the servicemanager and transfer references to it.
#line 9
allow audioserver servicemanager:binder { call transfer };
#line 9
# servicemanager performs getpidcon on clients.
#line 9
allow servicemanager audioserver:dir search;
#line 9
allow servicemanager audioserver:file { read open };
#line 9
allow servicemanager audioserver:process getattr;
#line 9
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 9
# all domains in domain.te.
#line 9


#line 10
# Call the server domain and optionally transfer references to it.
#line 10
allow audioserver binderservicedomain:binder { call transfer };
#line 10
# Allow the serverdomain to transfer references to the client on the reply.
#line 10
allow binderservicedomain audioserver:binder transfer;
#line 10
# Receive and use open files from the server.
#line 10
allow audioserver binderservicedomain:fd use;
#line 10


#line 11
# Call the server domain and optionally transfer references to it.
#line 11
allow audioserver { appdomain autoplay_app }:binder { call transfer };
#line 11
# Allow the serverdomain to transfer references to the client on the reply.
#line 11
allow { appdomain autoplay_app } audioserver:binder transfer;
#line 11
# Receive and use open files from the server.
#line 11
allow audioserver { appdomain autoplay_app }:fd use;
#line 11


#line 12
typeattribute audioserver binderservicedomain;
#line 12



#line 14
allow audioserver proc:dir { open getattr read search ioctl lock };
#line 14
allow audioserver proc:{ file lnk_file } { getattr open read ioctl lock };
#line 14

allow audioserver ion_device:chr_file { getattr open read ioctl lock };
allow audioserver system_file:dir { open getattr read search ioctl lock };


#line 18
  # used for TEE sink - pcm capture for debug.
#line 18
  allow audioserver media_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
#line 18
  allow audioserver audioserver_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
#line 18
  allow audioserver audioserver_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 18

#line 18
  # ptrace to processes in the same domain for memory leak detection
#line 18
  allow audioserver self:process ptrace;
#line 26


allow audioserver audio_device:dir { open getattr read search ioctl lock };
allow audioserver audio_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

allow audioserver audioserver_service:service_manager { add find };
allow audioserver appops_service:service_manager find;
allow audioserver batterystats_service:service_manager find;
allow audioserver permission_service:service_manager find;
allow audioserver power_service:service_manager find;
allow audioserver scheduling_policy_service:service_manager find;

# Grant access to audio files to audioserver
allow audioserver audio_data_file:dir { { open getattr read search ioctl lock } add_name write };
allow audioserver audio_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Needed on some devices for playing audio on paired BT device,
# but seems appropriate for all devices.

#line 44

#line 44

#line 44
allow audioserver bluetooth_socket:sock_file write;
#line 44
allow audioserver bluetooth:unix_stream_socket connectto;
#line 44

#line 44


###
### neverallow rules
###

# audioserver should never execute any executable without a
# domain transition
neverallow audioserver { file_type fs_type }:file execute_no_trans;

# audioserver should never need network access. Disallow network sockets.
neverallow audioserver domain:{ tcp_socket udp_socket rawip_socket } *;
#line 1 "system/sepolicy/autoplay_app.te"
###
### AutoPlay apps.
###
### This file defines the security policy for apps with the autoplay
### feature.
###
### The autoplay_app domain is a reduced permissions sandbox allowing
### ephemeral applications to be safely installed and run. Non ephemeral
### applications may also opt-in to autoplay to take advantage of the
### additional security features.
###
### PackageManager flags an app as autoplay at install time.
type autoplay_app, domain;

# allow JITing
allow autoplay_app self:process execmem;
allow autoplay_app ashmem_device:chr_file execute;

# Define and allow access to our own type for ashmem regions.
# Label ashmem objects with our own unique type.

#line 21
type autoplay_app_tmpfs, file_type;
#line 21
type_transition autoplay_app tmpfs:file autoplay_app_tmpfs;
#line 21
allow autoplay_app autoplay_app_tmpfs:file { read write };
#line 21

# Map with PROT_EXEC.
allow autoplay_app autoplay_app_tmpfs:file execute;

# Read system properties managed by zygote.
allow autoplay_app zygote_tmpfs:file read;

# Send logcat messages to logd.

#line 29

#line 29
allow autoplay_app logdw_socket:sock_file write;
#line 29
allow autoplay_app logd:unix_dgram_socket sendto;
#line 29

#line 29
allow autoplay_app pmsg_device:chr_file { open append write lock };
#line 29


# Receive and use open file descriptors inherited from zygote.
allow autoplay_app zygote:fd use;

# Notify zygote of death;
allow autoplay_app zygote:process sigchld;

# application inherit logd write socket (urge is to deprecate this long term)
allow autoplay_app zygote:unix_dgram_socket write;

# App sandbox file accesses.
allow autoplay_app autoplay_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow autoplay_app autoplay_data_file:{ file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# For art.
allow autoplay_app dalvikcache_data_file:file { execute { getattr open read ioctl lock } };
allow autoplay_app dalvikcache_data_file:lnk_file { getattr open read ioctl lock };
allow autoplay_app dalvikcache_data_file:dir getattr;

# Grant GPU access. autoplay_app needs that to render the standard UI.
allow autoplay_app gpu_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Use the Binder.

#line 53
# Call the servicemanager and transfer references to it.
#line 53
allow autoplay_app servicemanager:binder { call transfer };
#line 53
# servicemanager performs getpidcon on clients.
#line 53
allow servicemanager autoplay_app:dir search;
#line 53
allow servicemanager autoplay_app:file { read open };
#line 53
allow servicemanager autoplay_app:process getattr;
#line 53
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 53
# all domains in domain.te.
#line 53

# Perform binder IPC to binder services.

#line 55
# Call the server domain and optionally transfer references to it.
#line 55
allow autoplay_app surfaceflinger:binder { call transfer };
#line 55
# Allow the serverdomain to transfer references to the client on the reply.
#line 55
allow surfaceflinger autoplay_app:binder transfer;
#line 55
# Receive and use open files from the server.
#line 55
allow autoplay_app surfaceflinger:fd use;
#line 55


#line 56
# Call the server domain and optionally transfer references to it.
#line 56
allow autoplay_app system_server:binder { call transfer };
#line 56
# Allow the serverdomain to transfer references to the client on the reply.
#line 56
allow system_server autoplay_app:binder transfer;
#line 56
# Receive and use open files from the server.
#line 56
allow autoplay_app system_server:fd use;
#line 56


# Allow read access to ion memory allocation device
allow autoplay_app ion_device:chr_file { read open };

# Use pipes and sockets provided by system_server via binder or local socket.
allow autoplay_app system_server:fifo_file { { getattr open read ioctl lock } { open append write lock } };
allow autoplay_app system_server:unix_stream_socket { read write setopt getattr getopt shutdown };
allow autoplay_app system_server:tcp_socket { read write getattr getopt shutdown };

# Inherit or receive open files from system_server.
allow autoplay_app system_server:fd use;

# Communicate with surfaceflinger.
allow autoplay_app surfaceflinger:unix_stream_socket { read write setopt getattr getopt shutdown };

# Read files already opened under /data.
allow autoplay_app system_data_file:file { getattr read };
allow autoplay_app system_data_file:lnk_file read;

# System file accesses. Check for libraries
allow autoplay_app system_file:dir getattr;

# services
allow autoplay_app accessibility_service:service_manager find;
allow autoplay_app activity_service:service_manager find;
allow autoplay_app assetatlas_service:service_manager find;
allow autoplay_app connectivity_service:service_manager find;
allow autoplay_app display_service:service_manager find;
allow autoplay_app graphicsstats_service:service_manager find;
allow autoplay_app input_method_service:service_manager find;
allow autoplay_app input_service:service_manager find;
allow autoplay_app surfaceflinger_service:service_manager find;
allow autoplay_app textservices_service:service_manager find;

###
### neverallow rules
###

# Receive or send uevent messages.
neverallow autoplay_app domain:netlink_kobject_uevent_socket *;

# Receive or send generic netlink messages
neverallow autoplay_app domain:netlink_socket *;

# Too much leaky information in debugfs. It's a security
# best practice to ensure these files aren't readable.
neverallow autoplay_app debugfs:file read;

# execute gpu_device
neverallow autoplay_app gpu_device:chr_file execute;

# access files in /sys with the default sysfs label
neverallow autoplay_app sysfs:file *;
#line 1 "system/sepolicy/binderservicedomain.te"
# Rules common to all binder service domains

# Allow dumpstate to collect information from binder services
allow binderservicedomain dumpstate:fd use;
allow binderservicedomain dumpstate:unix_stream_socket { read write getopt getattr };
allow binderservicedomain dumpstate:fifo_file  { getattr write };
allow binderservicedomain shell_data_file:file { getattr write };

# Allow dumpsys to work from adb shell or the serial console
allow binderservicedomain devpts:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow binderservicedomain console_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Receive and write to a pipe received over Binder from an app.
allow binderservicedomain appdomain:fd use;
allow binderservicedomain appdomain:fifo_file write;

# allow all services to run permission checks
allow binderservicedomain permission_service:service_manager find;

allow binderservicedomain keystore:keystore_key { get_state get insert delete exist list sign verify };


#line 22
  allow keystore binderservicedomain:dir search;
#line 22
  allow keystore binderservicedomain:file { read open };
#line 22
  allow keystore binderservicedomain:process getattr;
#line 22
  allow binderservicedomain keystore_service:service_manager find;
#line 22
  
#line 22
# Call the server domain and optionally transfer references to it.
#line 22
allow binderservicedomain keystore:binder { call transfer };
#line 22
# Allow the serverdomain to transfer references to the client on the reply.
#line 22
allow keystore binderservicedomain:binder transfer;
#line 22
# Receive and use open files from the server.
#line 22
allow binderservicedomain keystore:fd use;
#line 22

#line 22

#line 1 "system/sepolicy/blkid.te"
# blkid called from vold
type blkid, domain, domain_deprecated;
type blkid_exec, exec_type, file_type;

# Allowed read-only access to encrypted devices to extract UUID/label
allow blkid block_device:dir search;
allow blkid userdata_block_device:blk_file { getattr open read ioctl lock };
allow blkid dm_device:blk_file { getattr open read ioctl lock };

# Allow stdin/out back to vold
allow blkid vold:fd use;
allow blkid vold:fifo_file { read write getattr };

# For blkid launched through popen()
allow blkid blkid_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Only allow entry from vold
neverallow { domain -vold } blkid:process transition;
neverallow * blkid:process dyntransition;
neverallow blkid { file_type fs_type -blkid_exec -shell_exec }:file entrypoint;
#line 1 "system/sepolicy/blkid_untrusted.te"
# blkid for untrusted block devices
type blkid_untrusted, domain, domain_deprecated;

# Allowed read-only access to vold block devices to extract UUID/label
allow blkid_untrusted block_device:dir search;
allow blkid_untrusted vold_device:blk_file { getattr open read ioctl lock };

# Allow stdin/out back to vold
allow blkid_untrusted vold:fd use;
allow blkid_untrusted vold:fifo_file { read write getattr };

# For blkid launched through popen()
allow blkid_untrusted blkid_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

###
### neverallow rules
###

# Untrusted blkid should never be run on block devices holding sensitive data
neverallow blkid_untrusted {
  boot_block_device
  frp_block_device
  metadata_block_device
  recovery_block_device
  root_block_device
  swap_block_device
  system_block_device
  userdata_block_device
  cache_block_device
  dm_device
}:blk_file { { append create link unlink relabelfrom rename setattr write } open read ioctl lock };

# Only allow entry from vold via blkid binary
neverallow { domain -vold } blkid_untrusted:process transition;
neverallow * blkid_untrusted:process dyntransition;
neverallow blkid_untrusted { file_type fs_type -blkid_exec -shell_exec }:file entrypoint;
#line 1 "system/sepolicy/bluetooth.te"
# bluetooth subsystem
type bluetooth, domain, domain_deprecated;

#line 3
typeattribute bluetooth appdomain;
#line 3
# Label ashmem objects with our own unique type.
#line 3

#line 3
type bluetooth_tmpfs, file_type;
#line 3
type_transition bluetooth tmpfs:file bluetooth_tmpfs;
#line 3
allow bluetooth bluetooth_tmpfs:file { read write };
#line 3

#line 3
# Map with PROT_EXEC.
#line 3
allow bluetooth bluetooth_tmpfs:file execute;
#line 3


#line 4
typeattribute bluetooth netdomain;
#line 4



#line 6
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 6
allow bluetooth sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 6
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 6
allow bluetooth self:capability2 block_suspend;
#line 6
;

# Data file accesses.
allow bluetooth bluetooth_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow bluetooth bluetooth_data_file:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Socket creation under /data/misc/bluedroid.
type_transition bluetooth bluetooth_data_file:sock_file bluetooth_socket;
allow bluetooth bluetooth_socket:sock_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# bluetooth factory file accesses.

#line 17
allow bluetooth bluetooth_efs_file:dir { open getattr read search ioctl lock };
#line 17
allow bluetooth bluetooth_efs_file:{ file lnk_file } { getattr open read ioctl lock };
#line 17


allow bluetooth { uhid_device hci_attach_dev }:chr_file { { getattr open read ioctl lock } { open append write lock } };

# sysfs access.
allow bluetooth sysfs_bluetooth_writable:file { { getattr open read ioctl lock } { open append write lock } };
allow bluetooth self:capability net_admin;
allow bluetooth self:capability2 wake_alarm;

# tethering
allow bluetooth self:packet_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow bluetooth self:capability { net_admin net_raw net_bind_service };
allow bluetooth self:tun_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow bluetooth tun_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow bluetooth efs_file:dir search;

# proc access.
allow bluetooth proc_bluetooth_writable:file { { getattr open read ioctl lock } { open append write lock } };

# Allow write access to bluetooth specific properties

#line 37

#line 37
allow bluetooth property_socket:sock_file write;
#line 37
allow bluetooth init:unix_stream_socket connectto;
#line 37

#line 37
allow bluetooth bluetooth_prop:property_service set;
#line 37

#line 37
allow bluetooth bluetooth_prop:file { getattr open read ioctl lock };
#line 37

#line 37


#line 38

#line 38
allow bluetooth property_socket:sock_file write;
#line 38
allow bluetooth init:unix_stream_socket connectto;
#line 38

#line 38
allow bluetooth pan_result_prop:property_service set;
#line 38

#line 38
allow bluetooth pan_result_prop:file { getattr open read ioctl lock };
#line 38

#line 38


allow bluetooth audioserver_service:service_manager find;
allow bluetooth bluetooth_service:service_manager find;
allow bluetooth drmserver_service:service_manager find;
allow bluetooth mediaserver_service:service_manager find;
allow bluetooth radio_service:service_manager find;
allow bluetooth surfaceflinger_service:service_manager find;
allow bluetooth app_api_service:service_manager find;
allow bluetooth system_api_service:service_manager find;

# Bluetooth Sim Access Profile Socket to the RIL

#line 50

#line 50

#line 50
allow bluetooth sap_uim_socket:sock_file write;
#line 50
allow bluetooth rild:unix_stream_socket connectto;
#line 50

#line 50


# already open bugreport file descriptors may be shared with
# the bluetooth process, from a file in
# /data/data/com.android.shell/files/bugreports/bugreport-*.
allow bluetooth shell_data_file:file read;

# Access to /data/media.
# This should be removed if sdcardfs is modified to alter the secontext for its
# accesses to the underlying FS.
allow bluetooth media_rw_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow bluetooth media_rw_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

###
### Neverallow rules
###
### These are things that the bluetooth app should NEVER be able to do
###

# Superuser capabilities.
# bluetooth requires net_{admin,raw,bind_service} and wake_alarm and block_suspend.
neverallow bluetooth self:capability ~{ net_admin net_raw net_bind_service };
neverallow bluetooth self:capability2 ~{ wake_alarm block_suspend };
#line 1 "system/sepolicy/bluetoothdomain.te"
# Allow clients to use a socket provided by the bluetooth app.
allow bluetoothdomain bluetooth:unix_stream_socket { getopt setopt getattr read write ioctl shutdown };
#line 1 "system/sepolicy/boot_control_hal.te"
# Allow read/write bootctrl block device, if one is defined.
allow boot_control_hal bootctrl_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };
#line 1 "system/sepolicy/bootanim.te"
# bootanimation oneshot service
type bootanim, domain;
type bootanim_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init bootanim_exec:file { getattr open read execute };
#line 5
allow init bootanim:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow bootanim bootanim_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow bootanim init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init bootanim:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init bootanim_exec:process bootanim;
#line 5

#line 5

#line 5
type bootanim_tmpfs, file_type;
#line 5
type_transition bootanim tmpfs:file bootanim_tmpfs;
#line 5
allow bootanim bootanim_tmpfs:file { read write };
#line 5

#line 5



#line 7
# Call the servicemanager and transfer references to it.
#line 7
allow bootanim servicemanager:binder { call transfer };
#line 7
# servicemanager performs getpidcon on clients.
#line 7
allow servicemanager bootanim:dir search;
#line 7
allow servicemanager bootanim:file { read open };
#line 7
allow servicemanager bootanim:process getattr;
#line 7
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 7
# all domains in domain.te.
#line 7


#line 8
# Call the server domain and optionally transfer references to it.
#line 8
allow bootanim surfaceflinger:binder { call transfer };
#line 8
# Allow the serverdomain to transfer references to the client on the reply.
#line 8
allow surfaceflinger bootanim:binder transfer;
#line 8
# Receive and use open files from the server.
#line 8
allow bootanim surfaceflinger:fd use;
#line 8


allow bootanim gpu_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# /oem access
allow bootanim oemfs:dir search;
allow bootanim oemfs:file { getattr open read ioctl lock };

allow bootanim audio_device:dir { open getattr read search ioctl lock };
allow bootanim audio_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

allow bootanim surfaceflinger_service:service_manager find;

# Allow access to ion memory allocation device
allow bootanim ion_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Read access to pseudo filesystems.

#line 25
allow bootanim proc:dir { open getattr read search ioctl lock };
#line 25
allow bootanim proc:{ file lnk_file } { getattr open read ioctl lock };
#line 25

allow bootanim proc_meminfo:file { getattr open read ioctl lock };

#line 27
allow bootanim sysfs:dir { open getattr read search ioctl lock };
#line 27
allow bootanim sysfs:{ file lnk_file } { getattr open read ioctl lock };
#line 27


#line 28
allow bootanim cgroup:dir { open getattr read search ioctl lock };
#line 28
allow bootanim cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 28


# System file accesses.
allow bootanim system_file:dir { open getattr read search ioctl lock };
#line 1 "system/sepolicy/bootstat.te"
# bootstat command
type bootstat, domain;
type bootstat_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init bootstat_exec:file { getattr open read execute };
#line 5
allow init bootstat:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow bootstat bootstat_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow bootstat init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init bootstat:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init bootstat_exec:process bootstat;
#line 5

#line 5

#line 5
type bootstat_tmpfs, file_type;
#line 5
type_transition bootstat tmpfs:file bootstat_tmpfs;
#line 5
allow bootstat bootstat_tmpfs:file { read write };
#line 5

#line 5


# Allow persistent storage in /data/misc/bootstat.
allow bootstat bootstat_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow bootstat bootstat_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Read access to pseudo filesystems (for /proc/uptime).

#line 12
allow bootstat proc:dir { open getattr read search ioctl lock };
#line 12
allow bootstat proc:{ file lnk_file } { getattr open read ioctl lock };
#line 1 "system/sepolicy/cameraserver.te"
# cameraserver - camera daemon
type cameraserver, domain;
type cameraserver_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init cameraserver_exec:file { getattr open read execute };
#line 5
allow init cameraserver:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow cameraserver cameraserver_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow cameraserver init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init cameraserver:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init cameraserver_exec:process cameraserver;
#line 5

#line 5

#line 5
type cameraserver_tmpfs, file_type;
#line 5
type_transition cameraserver tmpfs:file cameraserver_tmpfs;
#line 5
allow cameraserver cameraserver_tmpfs:file { read write };
#line 5

#line 5



#line 7
# Call the servicemanager and transfer references to it.
#line 7
allow cameraserver servicemanager:binder { call transfer };
#line 7
# servicemanager performs getpidcon on clients.
#line 7
allow servicemanager cameraserver:dir search;
#line 7
allow servicemanager cameraserver:file { read open };
#line 7
allow servicemanager cameraserver:process getattr;
#line 7
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 7
# all domains in domain.te.
#line 7


#line 8
# Call the server domain and optionally transfer references to it.
#line 8
allow cameraserver binderservicedomain:binder { call transfer };
#line 8
# Allow the serverdomain to transfer references to the client on the reply.
#line 8
allow binderservicedomain cameraserver:binder transfer;
#line 8
# Receive and use open files from the server.
#line 8
allow cameraserver binderservicedomain:fd use;
#line 8


#line 9
# Call the server domain and optionally transfer references to it.
#line 9
allow cameraserver appdomain:binder { call transfer };
#line 9
# Allow the serverdomain to transfer references to the client on the reply.
#line 9
allow appdomain cameraserver:binder transfer;
#line 9
# Receive and use open files from the server.
#line 9
allow cameraserver appdomain:fd use;
#line 9


#line 10
typeattribute cameraserver binderservicedomain;
#line 10


# access /data/misc/camera
allow cameraserver camera_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow cameraserver camera_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

allow cameraserver video_device:dir { open getattr read search ioctl lock };
allow cameraserver video_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow cameraserver ion_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

allow cameraserver appops_service:service_manager find;
allow cameraserver audioserver_service:service_manager find;
allow cameraserver batterystats_service:service_manager find;
allow cameraserver cameraproxy_service:service_manager find;
allow cameraserver cameraserver_service:service_manager add;
allow cameraserver mediaserver_service:service_manager find;
allow cameraserver processinfo_service:service_manager find;
allow cameraserver scheduling_policy_service:service_manager find;
allow cameraserver surfaceflinger_service:service_manager find;

###
### neverallow rules
###

# cameraserver should never execute any executable without a
# domain transition
neverallow cameraserver { file_type fs_type }:file execute_no_trans;

# cameraserver should never need network access. Disallow network sockets.
neverallow cameraserver domain:{ tcp_socket udp_socket rawip_socket } *;
#line 1 "system/sepolicy/clatd.te"
# 464xlat daemon
type clatd, domain, domain_deprecated;
type clatd_exec, exec_type, file_type;


#line 5
typeattribute clatd netdomain;
#line 5


# Access objects inherited from netd.
allow clatd netd:fd use;
allow clatd netd:fifo_file { read write };
# TODO: Check whether some or all of these sockets should be close-on-exec.
allow clatd netd:netlink_kobject_uevent_socket { read write };
allow clatd netd:netlink_nflog_socket { read write };
allow clatd netd:netlink_route_socket { read write };
allow clatd netd:udp_socket { read write };
allow clatd netd:unix_stream_socket { read write };
allow clatd netd:unix_dgram_socket { read write };

allow clatd self:capability { net_admin net_raw setuid setgid };

# clatd calls mmap(MAP_LOCKED) with a 1M buffer. MAP_LOCKED first checks
# capable(CAP_IPC_LOCK), and then checks to see the requested amount is
# under RLIMIT_MEMLOCK. If the latter check succeeds clatd won't have
# needed CAP_IPC_LOCK. But this is not guaranteed to succeed on all devices
# so we permit any requests we see from clatd asking for this capability.
# See https://android-review.googlesource.com/127940 and
# https://b.corp.google.com/issues/21736319
allow clatd self:capability ipc_lock;

allow clatd self:netlink_route_socket nlmsg_write;
allow clatd self:{ packet_socket rawip_socket tun_socket } { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow clatd tun_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
#line 1 "system/sepolicy/debuggerd.te"
# debugger interface
type debuggerd, domain, domain_deprecated;
type debuggerd_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init debuggerd_exec:file { getattr open read execute };
#line 5
allow init debuggerd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow debuggerd debuggerd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow debuggerd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init debuggerd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init debuggerd_exec:process debuggerd;
#line 5

#line 5

#line 5
type debuggerd_tmpfs, file_type;
#line 5
type_transition debuggerd tmpfs:file debuggerd_tmpfs;
#line 5
allow debuggerd debuggerd_tmpfs:file { read write };
#line 5

#line 5

typeattribute debuggerd mlstrustedsubject;
allow debuggerd self:capability { dac_override sys_ptrace chown kill fowner setuid setgid };
allow debuggerd self:capability2 { syslog };
allow debuggerd domain:dir { open getattr read search ioctl lock };
allow debuggerd domain:file { getattr open read ioctl lock };
allow debuggerd domain:lnk_file read;
allow debuggerd {
  domain
  -adbd
  -debuggerd
  -healthd
  -init
  -keystore
  -ueventd
  -watchdogd
}:process { ptrace getattr };

#line 22
allow debuggerd security_file:dir { open getattr read search ioctl lock };
#line 22
allow debuggerd security_file:file { getattr open read ioctl lock };
#line 22

allow debuggerd tombstone_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow debuggerd tombstone_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow debuggerd shared_relro_file:dir { open getattr read search ioctl lock };
allow debuggerd shared_relro_file:file { getattr open read ioctl lock };
allow debuggerd domain:process { sigstop sigkill signal };
allow debuggerd exec_type:file { getattr open read ioctl lock };
# Access app library
allow debuggerd system_data_file:file open;
# Allow debuggerd to redirect a dump_backtrace request to itself.
# This only happens on 64 bit systems, where all requests go to the 64 bit
# debuggerd and get redirected to the 32 bit debuggerd if the process is 32 bit.

allow debuggerd {
  audioserver
  bluetooth
  cameraserver
  drmserver
  inputflinger
  mediacodec
  mediadrmserver
  mediaextractor
  mediaserver
  sdcardd
  surfaceflinger
}:debuggerd dump_backtrace;

# Connect to system_server via /data/system/ndebugsocket.

#line 50

#line 50

#line 50
allow debuggerd system_ndebug_socket:sock_file write;
#line 50
allow debuggerd system_server:unix_stream_socket connectto;
#line 50

#line 50



#line 52
  allow debuggerd input_device:dir { open getattr read search ioctl lock };
#line 52
  allow debuggerd input_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
#line 55


# logd access

#line 58
allow debuggerd logcat_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 58

#line 58

#line 58

#line 58
allow debuggerd logdr_socket:sock_file write;
#line 58
allow debuggerd logd:unix_stream_socket connectto;
#line 58

#line 58

#line 58


# Check SELinux permissions.

#line 61
allow debuggerd selinuxfs:file { { getattr open read ioctl lock } { open append write lock } };
#line 61
allow debuggerd kernel:security compute_av;
#line 61
allow debuggerd self:netlink_selinux_socket { read write create getattr setattr lock relabelfrom relabelto append bind connect listen accept getopt setopt shutdown recvfrom sendto recv_msg send_msg name_bind };
#line 61

#line 1 "system/sepolicy/device.te"
# Device types
type device, dev_type, fs_type;
type alarm_device, dev_type, mlstrustedobject;
type adb_device, dev_type;
type ashmem_device, dev_type, mlstrustedobject;
type audio_device, dev_type;
type binder_device, dev_type, mlstrustedobject;
type block_device, dev_type;
type camera_device, dev_type;
type dm_device, dev_type;
type loop_device, dev_type;
type pmsg_device, dev_type, mlstrustedobject;
type radio_device, dev_type;
type ram_device, dev_type;
type rtc_device, dev_type;
type vold_device, dev_type;
type console_device, dev_type;
type cpuctl_device, dev_type;
type fscklogs, dev_type;
type full_device, dev_type;
# GPU (used by most UI apps)
type gpu_device, dev_type, mlstrustedobject;
type graphics_device, dev_type;
type hw_random_device, dev_type;
type input_device, dev_type;
type kmem_device, dev_type;
type log_device, dev_type, mlstrustedobject;
type mtd_device, dev_type;
type mtp_device, dev_type, mlstrustedobject;
type nfc_device, dev_type;
type ptmx_device, dev_type, mlstrustedobject;
type kmsg_device, dev_type;
type null_device, dev_type, mlstrustedobject;
type random_device, dev_type, mlstrustedobject;
type sensors_device, dev_type;
type serial_device, dev_type;
type socket_device, dev_type;
type owntty_device, dev_type, mlstrustedobject;
type tty_device, dev_type;
type urandom_device, dev_type, mlstrustedobject;
type video_device, dev_type;
type vcs_device, dev_type;
type zero_device, dev_type, mlstrustedobject;
type fuse_device, dev_type, mlstrustedobject;
type iio_device, dev_type;
type ion_device, dev_type, mlstrustedobject;
type gps_device, dev_type;
type qtaguid_device, dev_type;
type watchdog_device, dev_type;
type uhid_device, dev_type;
type uio_device, dev_type;
type tun_device, dev_type, mlstrustedobject;
type usbaccessory_device, dev_type, mlstrustedobject;
type usb_device, dev_type, mlstrustedobject;
type klog_device, dev_type;
type properties_device, dev_type;
type properties_serial, dev_type;
type i2c_device, dev_type;

# All devices have a uart for the hci
# attach service. The uart dev node
# varies per device. This type
# is used in per device policy
type hci_attach_dev, dev_type;

# All devices have a rpmsg device for
# achieving remoteproc and rpmsg modules
type rpmsg_device, dev_type;

# Partition layout block device
type root_block_device, dev_type;

# factory reset protection block device
type frp_block_device, dev_type;

# System block device mounted on /system.
type system_block_device, dev_type;

# Recovery block device.
type recovery_block_device, dev_type;

# boot block device.
type boot_block_device, dev_type;

# Userdata block device mounted on /data.
type userdata_block_device, dev_type;

# Cache block device mounted on /cache.
type cache_block_device, dev_type;

# Block device for any swap partition.
type swap_block_device, dev_type;

# Metadata block device used for encryption metadata.
# Assign this type to the partition specified by the encryptable=
# mount option in your fstab file in the entry for userdata.
type metadata_block_device, dev_type;

# The 'misc' partition used by recovery and A/B.
type misc_block_device, dev_type;

# Bootctrl block device used by A/B update (update_engine, update_verifier).
type bootctrl_block_device, dev_type;
#line 1 "system/sepolicy/dex2oat.te"
# dex2oat
type dex2oat, domain, domain_deprecated;
type dex2oat_exec, exec_type, file_type;

allow dex2oat dalvikcache_data_file:file write;
# Read symlinks in /data/dalvik-cache. This is required for PIC mode boot images, where
# the oat file is symlinked to the original file in /system.
allow dex2oat dalvikcache_data_file:lnk_file read;
allow dex2oat installd:fd use;

# Read already open asec_apk_file file descriptors passed by installd.
# Also allow reading unlabeled files, to allow for upgrading forward
# locked APKs.
allow dex2oat asec_apk_file:file read;
allow dex2oat unlabeled:file read;
allow dex2oat oemfs:file read;
allow dex2oat apk_tmp_file:file read;
allow dex2oat user_profile_data_file:file { getattr read lock };

##################
# A/B OTA Dexopt #
##################

# Allow dex2oat to use file descriptors from otapreopt.
allow dex2oat postinstall_dexopt:fd use;

allow dex2oat postinstall_file:dir getattr;

# Allow dex2oat access to files in /data/ota.
allow dex2oat ota_data_file:dir { { open getattr read search ioctl lock } add_name write };
allow dex2oat ota_data_file:file { getattr open read ioctl lock };

# Create and read symlinks in /data/ota/dalvik-cache. This is required for PIC mode boot images,
# where the oat file is symlinked to the original file in /system.
allow dex2oat ota_data_file:lnk_file { create read };

# It would be nice to tie this down, but currently, because of how images are written, we can't
# pass file descriptors for the preopted boot image to dex2oat. So dex2oat needs to be able to
# create them itself (and make them world-readable).
allow dex2oat ota_data_file:file { create { open append write lock } setattr };

##############
# Neverallow #
##############

neverallow dex2oat app_data_file:{ file lnk_file sock_file fifo_file } open;
#line 1 "system/sepolicy/dhcp.te"
type dhcp, domain, domain_deprecated;
type dhcp_exec, exec_type, file_type;
type dhcp_data_file, file_type, data_file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init dhcp_exec:file { getattr open read execute };
#line 5
allow init dhcp:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow dhcp dhcp_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow dhcp init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init dhcp:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init dhcp_exec:process dhcp;
#line 5

#line 5

#line 5
type dhcp_tmpfs, file_type;
#line 5
type_transition dhcp tmpfs:file dhcp_tmpfs;
#line 5
allow dhcp dhcp_tmpfs:file { read write };
#line 5

#line 5


#line 6
typeattribute dhcp netdomain;
#line 6


allow dhcp cgroup:dir { create write add_name };
allow dhcp self:capability { setgid setuid net_admin net_raw net_bind_service };
allow dhcp self:packet_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow dhcp self:netlink_route_socket nlmsg_write;
allow dhcp shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow dhcp system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# dhcpcd runs dhcpcd-hooks/*, which runs getprop / setprop (toolbox_exec)
allow dhcp toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# For /proc/sys/net/ipv4/conf/*/promote_secondaries
allow dhcp proc_net:file write;


#line 21

#line 21
allow dhcp property_socket:sock_file write;
#line 21
allow dhcp init:unix_stream_socket connectto;
#line 21

#line 21
allow dhcp dhcp_prop:property_service set;
#line 21

#line 21
allow dhcp dhcp_prop:file { getattr open read ioctl lock };
#line 21

#line 21


#line 22

#line 22
allow dhcp property_socket:sock_file write;
#line 22
allow dhcp init:unix_stream_socket connectto;
#line 22

#line 22
allow dhcp pan_result_prop:property_service set;
#line 22

#line 22
allow dhcp pan_result_prop:file { getattr open read ioctl lock };
#line 22

#line 22


type_transition dhcp system_data_file:{ dir file } dhcp_data_file;
allow dhcp dhcp_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow dhcp dhcp_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# PAN connections
allow dhcp netd:fd use;
allow dhcp netd:fifo_file { { getattr open read ioctl lock } { open append write lock } };
allow dhcp netd:{ { udp_socket unix_dgram_socket } unix_stream_socket } { read write };
allow dhcp netd:{ netlink_kobject_uevent_socket netlink_route_socket netlink_nflog_socket } { read write };
#line 1 "system/sepolicy/dnsmasq.te"
# DNS, DHCP services
type dnsmasq, domain, domain_deprecated;
type dnsmasq_exec, exec_type, file_type;


#line 5
typeattribute dnsmasq netdomain;
#line 5


# TODO:  Run with dhcp group to avoid need for dac_override.
allow dnsmasq self:capability dac_override;

allow dnsmasq self:capability { net_admin net_raw net_bind_service setgid setuid };

allow dnsmasq dhcp_data_file:dir { open search write add_name remove_name lock };
allow dnsmasq dhcp_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Inherit and use open files from netd.
allow dnsmasq netd:fd use;
allow dnsmasq netd:fifo_file { read write };
# TODO: Investigate whether these inherited sockets should be closed on exec.
allow dnsmasq netd:netlink_kobject_uevent_socket { read write };
allow dnsmasq netd:netlink_nflog_socket { read write };
allow dnsmasq netd:netlink_route_socket { read write };
allow dnsmasq netd:unix_stream_socket { read write };
allow dnsmasq netd:unix_dgram_socket { read write };
allow dnsmasq netd:udp_socket { read write };
#line 1 "system/sepolicy/domain.te"
# Rules for all domains.

# Allow reaping by init.
allow domain init:process sigchld;

# Intra-domain accesses.
allow domain self:process {
    fork
    sigchld
    sigkill
    sigstop
    signull
    signal
    getsched
    setsched
    getsession
    getpgid
    setpgid
    getcap
    setcap
    getattr
    setrlimit
};
allow domain self:fd use;
allow domain proc:dir { open getattr read search ioctl lock };
allow domain proc_net:dir search;

#line 27
allow domain self:dir { open getattr read search ioctl lock };
#line 27
allow domain self:{ file lnk_file } { getattr open read ioctl lock };
#line 27

allow domain self:{ fifo_file file } { { getattr open read ioctl lock } { open append write lock } };
allow domain self:unix_dgram_socket { { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } } sendto };
allow domain self:unix_stream_socket { { create { { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } listen accept } } connectto };
allowxperm domain domain:{ unix_dgram_socket unix_stream_socket } ioctl {0x00005411 0x00005451 0x00005401 0x00005413 0x00005414 0x0000541b };

# Inherit or receive open files from others.
allow domain init:fd use;


#line 36
  # Same as adbd rules above, except allow su to do the same thing
#line 36
  allow domain su:unix_stream_socket connectto;
#line 36
  allow domain su:fd use;
#line 36
  allow domain su:unix_stream_socket { getattr getopt read write shutdown };
#line 36

#line 36
  allow { domain -init } su:binder { call transfer };
#line 36
  allow { domain -init } su:fd use;
#line 36

#line 36
  # Running something like "pm dump com.android.bluetooth" requires
#line 36
  # fifo writes
#line 36
  allow domain su:fifo_file { write getattr };
#line 36

#line 36
  # allow "gdbserver --attach" to work for su.
#line 36
  allow domain su:process sigchld;
#line 36

#line 36
  # Allow writing coredumps to /cores/*
#line 36
  allow domain coredump_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 36
  allow domain coredump_file:dir { { open getattr read search ioctl lock } add_name write };
#line 55


###
### Talk to debuggerd.
###
allow domain debuggerd:process sigchld;
allow domain debuggerd:unix_stream_socket connectto;

# Root fs.
allow domain rootfs:dir search;
allow domain rootfs:lnk_file read;

# Device accesses.
allow domain device:dir search;
allow domain dev_type:lnk_file { getattr open read ioctl lock };
allow domain devpts:dir search;
allow domain socket_device:dir { open getattr read search ioctl lock };
allow domain owntty_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow domain null_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow domain zero_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow domain ashmem_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow domain binder_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow domain ptmx_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow domain alarm_device:chr_file { getattr open read ioctl lock };
allow domain urandom_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow domain random_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow domain properties_device:dir { open getattr read search ioctl lock };
allow domain properties_serial:file { getattr open read ioctl lock };

# For now, everyone can access core property files
# Device specific properties are not granted by default

#line 86
allow domain core_property_type:file { getattr open read ioctl lock };
#line 86

# Let everyone read log properties, so that liblog can avoid sending unloggable
# messages to logd.

#line 89
allow domain log_property_type:file { getattr open read ioctl lock };
#line 89

allow domain property_contexts:file { getattr open read ioctl lock };

allow domain init:key search;
allow domain vold:key search;

# logd access

#line 97

#line 97
allow domain logdw_socket:sock_file write;
#line 97
allow domain logd:unix_dgram_socket sendto;
#line 97

#line 97
allow domain pmsg_device:chr_file { open append write lock };
#line 97


# System file accesses.
allow domain system_file:dir { search getattr };
allow domain system_file:file { execute read open getattr };
allow domain system_file:lnk_file read;

# read any sysfs symlinks
allow domain sysfs:lnk_file read;

# libc references /data/misc/zoneinfo for timezone related information

#line 108
allow domain zoneinfo_data_file:dir { open getattr read search ioctl lock };
#line 108
allow domain zoneinfo_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 108


# Lots of processes access current CPU information

#line 111
allow domain sysfs_devices_system_cpu:dir { open getattr read search ioctl lock };
#line 111
allow domain sysfs_devices_system_cpu:{ file lnk_file } { getattr open read ioctl lock };
#line 111



#line 113
allow domain sysfs_usb:dir { open getattr read search ioctl lock };
#line 113
allow domain sysfs_usb:{ file lnk_file } { getattr open read ioctl lock };
#line 113
;

# files under /data.
allow domain system_data_file:dir { search getattr };
allow domain system_data_file:lnk_file read;

# required by the dynamic linker
allow domain proc:lnk_file { getattr read };

# /proc/cpuinfo
allow domain proc_cpuinfo:file { getattr open read ioctl lock };

# toybox loads libselinux which stats /sys/fs/selinux/
allow domain selinuxfs:dir search;
allow domain selinuxfs:file getattr;
allow domain sysfs:dir search;
allow domain selinuxfs:filesystem getattr;

# For /acct/uid/*/tasks.
allow domain cgroup:dir { search write };
allow domain cgroup:file { open append write lock };

# Almost all processes log tracing information to
# /sys/kernel/debug/tracing/trace_marker
# The reason behind this is documented in b/6513400
allow domain debugfs:dir search;
allow domain debugfs_tracing:dir search;
allow domain debugfs_trace_marker:file { open append write lock };

# Filesystem access.
allow domain fs_type:filesystem getattr;
allow domain fs_type:dir getattr;

###
### neverallow rules
###

# Do not allow any domain other than init or recovery to create unlabeled files.
neverallow { domain -init -recovery } unlabeled:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } create;

# Limit ability to ptrace or read sensitive /proc/pid files of processes
# with other UIDs to these whitelisted domains.
neverallow {
  domain
  -debuggerd
  -vold
  -dumpstate
  -system_server
  -perfprofd
} self:capability sys_ptrace;

# Limit device node creation to these whitelisted domains.
neverallow {
  domain
  -kernel
  -init
  -ueventd
  -vold
} self:capability mknod;

# Limit raw I/O to these whitelisted domains. Do not apply to debug builds.
neverallow {
  domain
  -domain
  -kernel
  -init
  -recovery
  -ueventd
  -healthd
  -uncrypt
  -tee
} self:capability sys_rawio;

# No process can map low memory (< CONFIG_LSM_MMAP_MIN_ADDR).
neverallow * self:memprotect mmap_zero;

# No domain needs mac_override as it is unused by SELinux.
neverallow * self:capability2 mac_override;

# Only recovery needs mac_admin to set contexts not defined in current policy.
neverallow { domain -recovery } self:capability2 mac_admin;

# Only init should be able to load SELinux policies.
# The first load technically occurs while still in the kernel domain,
# but this does not trigger a denial since there is no policy yet.
# Policy reload requires allowing this to the init domain.
neverallow { domain -init } kernel:security load_policy;

# Only init and the system_server can set selinux.reload_policy 1
# to trigger a policy reload.
neverallow { domain -init -system_server } security_prop:property_service set;

# Only init and system_server can write to /data/security, where runtime
# policy updates live.
# Only init can relabel /data/security (for init.rc restorecon_recursive /data).
neverallow { domain -init } security_file:{ dir file lnk_file } { relabelfrom relabelto };
# Only init and system_server can create/setattr directories with this type.
# init is for init.rc mkdir /data/security.
# system_server is for creating subdirectories under /data/security.
neverallow { domain -init -system_server } security_file:dir { create setattr };
# Only system_server can create subdirectories and files under /data/security.
neverallow { domain -system_server } security_file:dir { rename write add_name remove_name rmdir };
neverallow { domain -system_server } security_file:file { create setattr write append unlink link rename };
neverallow { domain -system_server } security_file:lnk_file { create setattr unlink rename };

# Only init prior to switching context should be able to set enforcing mode.
# init starts in kernel domain and switches to init domain via setcon in
# the init.rc, so the setenforce occurs while still in kernel. After
# switching domains, there is never any need to setenforce again by init.
neverallow * kernel:security setenforce;
neverallow { domain -kernel } kernel:security setcheckreqprot;

# No booleans in AOSP policy, so no need to ever set them.
neverallow * kernel:security setbool;

# Adjusting the AVC cache threshold.
# Not presently allowed to anything in policy, but possibly something
# that could be set from init.rc.
neverallow { domain -init } kernel:security setsecparam;

# Only init, ueventd and system_server should be able to access HW RNG
neverallow { domain -init -system_server -ueventd } hw_random_device:chr_file *;

# Ensure that all entrypoint executables are in exec_type or postinstall_file.
neverallow * { file_type -exec_type -postinstall_file }:file entrypoint;

# Ensure that nothing in userspace can access /dev/mem or /dev/kmem
neverallow { domain -kernel -ueventd -init } kmem_device:chr_file *;
neverallow * kmem_device:chr_file ~{ create relabelto unlink setattr };

# Only init should be able to configure kernel usermodehelpers or
# security-sensitive proc settings.
neverallow { domain -init } usermodehelper:file { append write };
neverallow { domain -init } proc_security:file { append write };

# No domain should be allowed to ptrace init.
neverallow * init:process ptrace;

# Init can't do anything with binder calls. If this neverallow rule is being
# triggered, it's probably due to a service with no SELinux domain.
neverallow * init:binder *;

# Don't allow raw read/write/open access to block_device
# Rather force a relabel to a more specific type
neverallow { domain -kernel -init -recovery -uncrypt } block_device:blk_file { open read write };

# Don't allow raw read/write/open access to generic devices.
# Rather force a relabel to a more specific type.
# init is exempt from this as there are character devices that only it uses.
# ueventd is exempt from this, as it is managing these devices.
neverallow { domain -init -ueventd } device:chr_file { open read write };

# Limit what domains can mount filesystems or change their mount flags.
# sdcard_type / vfat is exempt as a larger set of domains need
# this capability, including device-specific domains.
neverallow { domain -kernel -init -recovery -vold -zygote -update_engine } { fs_type -sdcard_type }:filesystem { mount remount relabelfrom relabelto };

#
# Assert that, to the extent possible, we're not loading executable content from
# outside the rootfs or /system partition except for a few whitelisted domains.
#
neverallow {
    domain
    -appdomain
    -autoplay_app
    -dumpstate
    -shell
    -su
    -system_server
    -zygote
} { file_type -system_file -exec_type -postinstall_file }:file execute;
neverallow {
    domain
    -appdomain # for oemfs
    -recovery # for /tmp/update_binary in tmpfs
} { fs_type -rootfs }:file execute;
# Files from cache should never be executed
neverallow domain { cache_file cache_backup_file cache_private_backup_file cache_recovery_file }:file execute;

# Protect most domains from executing arbitrary content from /data.
neverallow {
  domain
  -untrusted_app
  -priv_app
  -shell
} {
  data_file_type
  -dalvikcache_data_file
  -system_data_file # shared libs in apks
  -apk_data_file
}:file { execute execute_no_trans };

neverallow { domain -shell } nativetest_data_file:file { execute execute_no_trans };

# Only the init property service should write to /data/property and /dev/__properties__
neverallow { domain -init } property_data_file:dir { add_name create link relabelfrom remove_name rename reparent rmdir setattr write };
neverallow { domain -init } property_data_file:file { { append create link unlink relabelfrom rename setattr write } { execute execute_no_trans } };
neverallow { domain -init } property_type:file { { append create link unlink relabelfrom rename setattr write } { execute execute_no_trans } };
neverallow { domain -init } properties_device:file { { append create link unlink relabelfrom rename setattr write } { execute execute_no_trans } };
neverallow { domain -init } properties_serial:file { { append create link unlink relabelfrom rename setattr write } { execute execute_no_trans } };

# Only recovery should be doing writes to /system
neverallow { domain -recovery } { system_file exec_type }:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } }
    { create write setattr relabelfrom append unlink link rename };
neverallow { domain -recovery -kernel } { system_file exec_type }:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } relabelto;

# Don't allow mounting on top of /system files or directories
neverallow * exec_type:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } mounton;
neverallow { domain -init } system_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } mounton;

# Nothing should be writing to files in the rootfs.
neverallow * rootfs:file { create write setattr relabelto append unlink link rename };

# Restrict context mounts to specific types marked with
# the contextmount_type attribute.
neverallow * {fs_type -contextmount_type}:filesystem relabelto;

# Ensure that context mount types are not writable, to ensure that
# the write to /system restriction above is not bypassed via context=
# mount to another type.
neverallow { domain -recovery } contextmount_type:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } }
    { create write setattr relabelfrom relabelto append unlink link rename };

# Do not allow service_manager add for default_android_service.
# Instead domains should use a more specific type such as
# system_app_service rather than the generic type.
# New service_types are defined in service.te and new mappings
# from service name to service_type are defined in service_contexts.
neverallow * default_android_service:service_manager add;

# Require that domains explicitly label unknown properties, and do not allow
# anyone but init to modify unknown properties.
neverallow { domain -init } default_prop:property_service set;
neverallow { domain -init } mmc_prop:property_service set;

neverallow { domain -init -recovery -system_server } frp_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# No domain other than recovery and update_engine can write to system partition(s).
neverallow { domain -recovery -update_engine } system_block_device:blk_file write;

# No domains other than install_recovery or recovery can write to recovery.
neverallow { domain -install_recovery -recovery } recovery_block_device:blk_file write;

# No domains other than a select few can access the misc_block_device. This
# block device is reserved for OTA use.
# Do not assert this rule on userdebug/eng builds, due to some devices using
# this partition for testing purposes.
neverallow {
  domain
  -domain # exclude debuggable builds
  -init
  -uncrypt
  -update_engine
  -vold
  -recovery
  -ueventd
} misc_block_device:blk_file { append link relabelfrom rename write open read ioctl lock };

# Only servicemanager should be able to register with binder as the context manager
neverallow { domain -servicemanager } *:binder set_context_mgr;

# Only authorized processes should be writing to files in /data/dalvik-cache
neverallow {
  domain
  -init # TODO: limit init to relabelfrom for files
  -zygote
  -installd
  -postinstall_dexopt
  -dex2oat
} dalvikcache_data_file:file { append create link unlink relabelfrom rename setattr write };

neverallow {
  domain
  -init
  -installd
  -postinstall_dexopt
  -dex2oat
  -zygote
} dalvikcache_data_file:dir { add_name create link relabelfrom remove_name rename reparent rmdir setattr write };

# Only system_server should be able to send commands via the zygote socket
neverallow { domain -zygote -system_server } zygote:unix_stream_socket connectto;
neverallow { domain -system_server } zygote_socket:sock_file write;

# Android does not support System V IPCs.
#
# The reason for this is due to the fact that, by design, they lead to global
# kernel resource leakage.
#
# For example, there is no way to automatically release a SysV semaphore
# allocated in the kernel when:
#
# - a buggy or malicious process exits
# - a non-buggy and non-malicious process crashes or is explicitly killed.
#
# Killing processes automatically to make room for new ones is an
# important part of Android's application lifecycle implementation. This means
# that, even assuming only non-buggy and non-malicious code, it is very likely
# that over time, the kernel global tables used to implement SysV IPCs will fill
# up.
neverallow * *:{ shm sem msg msgq } *;

# Do not mount on top of symlinks, fifos, or sockets.
# Feature parity with Chromium LSM.
neverallow * { file_type fs_type dev_type }:{ lnk_file fifo_file sock_file } mounton;

# Nobody should be able to execute su on user builds.
# On userdebug/eng builds, only dumpstate, shell, and
# su itself execute su.
neverallow { domain -dumpstate -shell -su } su_exec:file { execute execute_no_trans };

# Do not allow the introduction of new execmod rules. Text relocations
# and modification of executable pages are unsafe.
# The only exceptions are for NDK text relocations associated with
# https://code.google.com/p/android/issues/detail?id=23203
# which, long term, need to go away.
neverallow * {
  file_type
  -system_data_file
  -apk_data_file
  -app_data_file
  -asec_public_file
}:file execmod;

# Do not allow making the stack or heap executable.
# We would also like to minimize execmem but it seems to be
# required by some device-specific service domains.
neverallow * self:process { execstack execheap };

# prohibit non-zygote spawned processes from using shared libraries
# with text relocations. b/20013628 .
neverallow { domain -appdomain } file_type:file execmod;

neverallow { domain -init } proc:{ file dir } mounton;

# Ensure that all types assigned to processes are included
# in the domain attribute, so that all allow and neverallow rules
# written on domain are applied to all processes.
# This is achieved by ensuring that it is impossible to transition
# from a domain to a non-domain type and vice versa.
neverallow domain ~domain:process { transition dyntransition };
neverallow ~domain domain:process { transition dyntransition };

#
# Only system_app and system_server should be creating or writing
# their files. The proper way to share files is to setup
# type transitions to a more specific type or assigning a type
# to its parent directory via a file_contexts entry.
# Example type transition:
#  mydomain.te:file_type_auto_trans(mydomain, system_data_file, new_file_type)
#
neverallow {
  domain
  -system_server
  -system_app
  -init
  -installd # for relabelfrom and unlink, check for this in explicit neverallow
} system_data_file:file { append create link unlink relabelfrom rename setattr write };
# do not grant anything greater than r_file_perms and relabelfrom unlink
# to installd
neverallow installd system_data_file:file ~{ { getattr open read ioctl lock } relabelfrom unlink };

#
# Only these domains should transition to shell domain. This domain is
# permissible for the "shell user". If you need a process to exec a shell
# script with differing privilege, define a domain and set up a transition.
#
neverallow {
  domain
  -adbd
  -init
  -runas
  -zygote
} shell:process { transition dyntransition };

# Minimize read access to shell- or app-writable symlinks.
# This is to prevent malicious symlink attacks.
neverallow {
  domain
  -appdomain
  -installd
  -uncrypt  # TODO: see if we can remove
} app_data_file:lnk_file read;

neverallow {
  domain
  -shell
  -uncrypt
  -installd
} shell_data_file:lnk_file read;

# In addition to the symlink reading restrictions above, restrict
# write access to shell owned directories. The /data/local/tmp
# directory is untrustworthy, and non-whitelisted domains should
# not be trusting any content in those directories.
neverallow {
  domain
  -adbd
  -dumpstate
  -installd
  -init
  -shell
  -vold
} shell_data_file:dir { add_name create link relabelfrom remove_name rename reparent rmdir setattr write };

neverallow {
  domain
  -adbd
  -appdomain
  -dumpstate
  -init
  -installd
  -system_server # why?
  -uncrypt
} shell_data_file:dir { open search };

# Same as above for /data/local/tmp files. We allow shell files
# to be passed around by file descriptor, but not directly opened.
neverallow {
  domain
  -adbd
  -appdomain
  -dumpstate
  -installd
  -uncrypt
} shell_data_file:file open;

# servicemanager is the only process which handles list request
neverallow * ~servicemanager:service_manager list;

# only service_manager_types can be added to service_manager
neverallow * ~service_manager_type:service_manager { add find };

# Prevent assigning non property types to properties
neverallow * ~property_type:property_service set;

# Domain types should never be assigned to any files other
# than the /proc/pid files associated with a process. The
# executable file used to enter a domain should be labeled
# with its own _exec type, not with the domain type.
# Conventionally, this looks something like:
# $ cat mydaemon.te
# type mydaemon, domain;
# type mydaemon_exec, exec_type, file_type;
# init_daemon_domain(mydaemon)
# $ grep mydaemon file_contexts
# /system/bin/mydaemon -- u:object_r:mydaemon_exec:s0
neverallow * domain:file { execute execute_no_trans entrypoint };

# Do not allow access to the generic debugfs label. This is too broad.
# Instead, if access to part of debugfs is desired, it should have a
# more specific label.
# TODO: fix system_server and dumpstate
neverallow { domain -init -system_server -dumpstate } debugfs:file { { append create link unlink relabelfrom rename setattr write } open read ioctl lock };

neverallow {
  domain
  -init
  -recovery
  -sdcardd
  -vold
} fuse_device:chr_file open;
neverallow {
  domain
  -dumpstate
  -init
  -priv_app
  -recovery
  -sdcardd
  -system_server
  -ueventd
  -vold
} fuse_device:chr_file *;

# Profiles contain untrusted data and profman parses that. We should only run
# in from installd forked processes.
neverallow {
  domain
  -installd
  -profman
} profman_exec:file { execute execute_no_trans };

# Enforce restrictions on kernel module origin.
# Do not allow kernel module loading except from system,
# vendor, and boot partitions.
neverallow * ~{ system_file rootfs }:system module_load;
#line 1 "system/sepolicy/domain_deprecated.te"
# rules removed from the domain attribute

# Read access to properties mapping.
allow domain_deprecated kernel:fd use;
allow domain_deprecated tmpfs:file { read getattr };
allow domain_deprecated tmpfs:lnk_file { read getattr };

# Search /storage/emulated tmpfs mount.
allow domain_deprecated tmpfs:dir { open getattr read search ioctl lock };

# Inherit or receive open files from others.
allow domain_deprecated system_server:fd use;

# Connect to adbd and use a socket transferred from it.
# This is used for e.g. adb backup/restore.
allow domain_deprecated adbd:unix_stream_socket connectto;
allow domain_deprecated adbd:fd use;
allow domain_deprecated adbd:unix_stream_socket { getattr getopt ioctl read write shutdown };

# Root fs.
allow domain_deprecated rootfs:dir { open getattr read search ioctl lock };
allow domain_deprecated rootfs:file { getattr open read ioctl lock };
allow domain_deprecated rootfs:lnk_file { getattr open read ioctl lock };

# Device accesses.
allow domain_deprecated device:file read;

# System file accesses.
allow domain_deprecated system_file:dir { open getattr read search ioctl lock };
allow domain_deprecated system_file:file { getattr open read ioctl lock };
allow domain_deprecated system_file:lnk_file { getattr open read ioctl lock };

# Read files already opened under /data.
allow domain_deprecated system_data_file:dir { search getattr };
allow domain_deprecated system_data_file:file { getattr read };
allow domain_deprecated system_data_file:lnk_file { getattr open read ioctl lock };

# Read apk files under /data/app.
allow domain_deprecated apk_data_file:dir { getattr search };
allow domain_deprecated apk_data_file:file { getattr open read ioctl lock };
allow domain_deprecated apk_data_file:lnk_file { getattr open read ioctl lock };

# Read /data/dalvik-cache.
allow domain_deprecated dalvikcache_data_file:dir { search getattr };
allow domain_deprecated dalvikcache_data_file:file { getattr open read ioctl lock };

# Read already opened /cache files.
allow domain_deprecated cache_file:dir { open getattr read search ioctl lock };
allow domain_deprecated cache_file:file { getattr read };
allow domain_deprecated cache_file:lnk_file { getattr open read ioctl lock };

#Allow access to ion memory allocation device
allow domain_deprecated ion_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Read access to pseudo filesystems.

#line 56
allow domain_deprecated proc:dir { open getattr read search ioctl lock };
#line 56
allow domain_deprecated proc:{ file lnk_file } { getattr open read ioctl lock };
#line 56


#line 57
allow { domain_deprecated -isolated_app } sysfs:dir { open getattr read search ioctl lock };
#line 57
allow { domain_deprecated -isolated_app } sysfs:{ file lnk_file } { getattr open read ioctl lock };
#line 57


#line 58
allow domain_deprecated inotify:dir { open getattr read search ioctl lock };
#line 58
allow domain_deprecated inotify:{ file lnk_file } { getattr open read ioctl lock };
#line 58


#line 59
allow domain_deprecated cgroup:dir { open getattr read search ioctl lock };
#line 59
allow domain_deprecated cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 59

allow domain_deprecated proc_meminfo:file { getattr open read ioctl lock };

#line 61
allow domain_deprecated proc_net:dir { open getattr read search ioctl lock };
#line 61
allow domain_deprecated proc_net:{ file lnk_file } { getattr open read ioctl lock };
#line 61


# Get SELinux enforcing status.
allow domain_deprecated selinuxfs:dir { open getattr read search ioctl lock };
allow domain_deprecated selinuxfs:file { getattr open read ioctl lock };

# /data/security files
allow domain_deprecated security_file:dir { search getattr };
allow domain_deprecated security_file:file getattr;
allow domain_deprecated security_file:lnk_file { getattr open read ioctl lock };

# World readable asec image contents
allow domain_deprecated asec_public_file:file { getattr open read ioctl lock };
allow domain_deprecated { asec_public_file asec_apk_file }:dir { open getattr read search ioctl lock };
#line 1 "system/sepolicy/drmserver.te"
# drmserver - DRM service
type drmserver, domain, domain_deprecated;
type drmserver_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init drmserver_exec:file { getattr open read execute };
#line 5
allow init drmserver:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow drmserver drmserver_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow drmserver init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init drmserver:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init drmserver_exec:process drmserver;
#line 5

#line 5

#line 5
type drmserver_tmpfs, file_type;
#line 5
type_transition drmserver tmpfs:file drmserver_tmpfs;
#line 5
allow drmserver drmserver_tmpfs:file { read write };
#line 5

#line 5

typeattribute drmserver mlstrustedsubject;


#line 8
typeattribute drmserver netdomain;
#line 8


# Perform Binder IPC to system server.

#line 11
# Call the servicemanager and transfer references to it.
#line 11
allow drmserver servicemanager:binder { call transfer };
#line 11
# servicemanager performs getpidcon on clients.
#line 11
allow servicemanager drmserver:dir search;
#line 11
allow servicemanager drmserver:file { read open };
#line 11
allow servicemanager drmserver:process getattr;
#line 11
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 11
# all domains in domain.te.
#line 11


#line 12
# Call the server domain and optionally transfer references to it.
#line 12
allow drmserver system_server:binder { call transfer };
#line 12
# Allow the serverdomain to transfer references to the client on the reply.
#line 12
allow system_server drmserver:binder transfer;
#line 12
# Receive and use open files from the server.
#line 12
allow drmserver system_server:fd use;
#line 12


#line 13
# Call the server domain and optionally transfer references to it.
#line 13
allow drmserver { appdomain autoplay_app }:binder { call transfer };
#line 13
# Allow the serverdomain to transfer references to the client on the reply.
#line 13
allow { appdomain autoplay_app } drmserver:binder transfer;
#line 13
# Receive and use open files from the server.
#line 13
allow drmserver { appdomain autoplay_app }:fd use;
#line 13


#line 14
typeattribute drmserver binderservicedomain;
#line 14


# Perform Binder IPC to mediaserver

#line 17
# Call the server domain and optionally transfer references to it.
#line 17
allow drmserver mediaserver:binder { call transfer };
#line 17
# Allow the serverdomain to transfer references to the client on the reply.
#line 17
allow mediaserver drmserver:binder transfer;
#line 17
# Receive and use open files from the server.
#line 17
allow drmserver mediaserver:fd use;
#line 17


allow drmserver sdcard_type:dir search;
allow drmserver drm_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow drmserver drm_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow drmserver tee_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow drmserver { app_data_file autoplay_data_file}:file { read write getattr };
allow drmserver sdcard_type:file { read write getattr };

#line 25
allow drmserver efs_file:dir { open getattr read search ioctl lock };
#line 25
allow drmserver efs_file:{ file lnk_file } { getattr open read ioctl lock };
#line 25


type drmserver_socket, file_type;

# /data/app/tlcd_sock socket file.
# Clearly, /data/app is the most logical place to create a socket.  Not.
allow drmserver apk_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
type_transition drmserver apk_data_file:sock_file drmserver_socket;
allow drmserver drmserver_socket:sock_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow drmserver tee:unix_stream_socket connectto;
# Delete old socket file if present.
allow drmserver apk_data_file:sock_file unlink;

# After taking a video, drmserver looks at the video file.

#line 39
allow drmserver media_rw_data_file:dir { open getattr read search ioctl lock };
#line 39
allow drmserver media_rw_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 39


# Read resources from open apk files passed over Binder.
allow drmserver apk_data_file:file { read getattr };
allow drmserver asec_apk_file:file { read getattr };

# Read /data/data/com.android.providers.telephony files passed over Binder.
allow drmserver radio_data_file:file { read getattr };

# /oem access
allow drmserver oemfs:dir search;
allow drmserver oemfs:file { getattr open read ioctl lock };

allow drmserver drmserver_service:service_manager { add find };
allow drmserver permission_service:service_manager find;


#line 55
allow drmserver selinuxfs:file { { getattr open read ioctl lock } { open append write lock } };
#line 55
allow drmserver kernel:security compute_av;
#line 55
allow drmserver self:netlink_selinux_socket { read write create getattr setattr lock relabelfrom relabelto append bind connect listen accept getopt setopt shutdown recvfrom sendto recv_msg send_msg name_bind };
#line 55

#line 1 "system/sepolicy/dumpstate.te"
# dumpstate
type dumpstate, domain, domain_deprecated, mlstrustedsubject;
type dumpstate_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init dumpstate_exec:file { getattr open read execute };
#line 5
allow init dumpstate:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow dumpstate dumpstate_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow dumpstate init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init dumpstate:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init dumpstate_exec:process dumpstate;
#line 5

#line 5

#line 5
type dumpstate_tmpfs, file_type;
#line 5
type_transition dumpstate tmpfs:file dumpstate_tmpfs;
#line 5
allow dumpstate dumpstate_tmpfs:file { read write };
#line 5

#line 5


#line 6
typeattribute dumpstate netdomain;
#line 6


#line 7
# Call the servicemanager and transfer references to it.
#line 7
allow dumpstate servicemanager:binder { call transfer };
#line 7
# servicemanager performs getpidcon on clients.
#line 7
allow servicemanager dumpstate:dir search;
#line 7
allow servicemanager dumpstate:file { read open };
#line 7
allow servicemanager dumpstate:process getattr;
#line 7
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 7
# all domains in domain.te.
#line 7


# Allow setting process priority, protect from OOM killer, and dropping
# privileges by switching UID / GID
allow dumpstate self:capability { setuid setgid sys_resource };

# Allow dumpstate to scan through /proc/pid for all processes

#line 14
allow dumpstate domain:dir { open getattr read search ioctl lock };
#line 14
allow dumpstate domain:{ file lnk_file } { getattr open read ioctl lock };
#line 14


allow dumpstate self:capability {
    # Send signals to processes
    kill
    # Run iptables
    net_raw
    net_admin
};

# Allow executing files on system, such as:
#   /system/bin/toolbox
#   /system/bin/logcat
#   /system/bin/dumpsys
allow dumpstate system_file:file execute_no_trans;
allow dumpstate toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Create and write into /data/anr/
allow dumpstate self:capability { dac_override chown fowner fsetid };
allow dumpstate anr_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow dumpstate anr_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Allow reading /data/system/uiderrors.txt
# TODO: scope this down.
allow dumpstate system_data_file:file { getattr open read ioctl lock };

# Read dmesg
allow dumpstate self:capability2 syslog;
allow dumpstate kernel:system syslog_read;

# Read /sys/fs/pstore/console-ramoops
allow dumpstate pstorefs:dir { open getattr read search ioctl lock };
allow dumpstate pstorefs:file { getattr open read ioctl lock };

# Get process attributes
allow dumpstate domain:process getattr;

# Signal java processes to dump their stack
allow dumpstate { appdomain autoplay_app system_server }:process signal;

# Signal native processes to dump their stack.
# This list comes from native_processes_to_dump in dumpstate/utils.c
allow dumpstate {
  audioserver
  cameraserver
  drmserver
  inputflinger
  mediacodec
  mediadrmserver
  mediaextractor
  mediaserver
  sdcardd
  surfaceflinger
}:process signal;
# Ask debuggerd for the backtraces of these processes.
allow dumpstate {
  audioserver
  cameraserver
  drmserver
  inputflinger
  mediacodec
  mediadrmserver
  mediaextractor
  mediaserver
  sdcardd
  surfaceflinger
}:debuggerd dump_backtrace;

# Execute and transition to the vdc domain

#line 83
# Allow the necessary permissions.
#line 83

#line 83
# Old domain may exec the file and transition to the new domain.
#line 83
allow dumpstate vdc_exec:file { getattr open read execute };
#line 83
allow dumpstate vdc:process transition;
#line 83
# New domain is entered by executing the file.
#line 83
allow vdc vdc_exec:file { entrypoint open read execute getattr };
#line 83
# New domain can send SIGCHLD to its caller.
#line 83
allow vdc dumpstate:process sigchld;
#line 83
# Enable AT_SECURE, i.e. libc secure mode.
#line 83
#line 83
#line 83
allow dumpstate vdc:process { siginh rlimitinh };
#line 83

#line 83
# Make the transition occur by default.
#line 83
type_transition dumpstate vdc_exec:process vdc;
#line 83


# Vibrate the device after we're done collecting the bugreport
# /sys/class/timed_output/vibrator/enable
# TODO: create a new file class, instead of allowing write access to all of /sys
allow dumpstate sysfs:file { open append write lock };

# TODO: added to match above sysfs rule. Remove me?
allow dumpstate sysfs_usb:file { open append write lock };

# Other random bits of data we want to collect
allow dumpstate qtaguid_proc:file { getattr open read ioctl lock };
allow dumpstate debugfs:file { getattr open read ioctl lock };
# df for /storage/emulated needs search
allow dumpstate { storage_file block_device }:dir { search getattr };
allow dumpstate fuse_device:chr_file getattr;
allow dumpstate { dm_device cache_block_device }:blk_file getattr;

# Allow dumpstate to make binder calls to any binder service

#line 102
# Call the server domain and optionally transfer references to it.
#line 102
allow dumpstate binderservicedomain:binder { call transfer };
#line 102
# Allow the serverdomain to transfer references to the client on the reply.
#line 102
allow binderservicedomain dumpstate:binder transfer;
#line 102
# Receive and use open files from the server.
#line 102
allow dumpstate binderservicedomain:fd use;
#line 102


#line 103
# Call the server domain and optionally transfer references to it.
#line 103
allow dumpstate { appdomain autoplay_app netd }:binder { call transfer };
#line 103
# Allow the serverdomain to transfer references to the client on the reply.
#line 103
allow { appdomain autoplay_app netd } dumpstate:binder transfer;
#line 103
# Receive and use open files from the server.
#line 103
allow dumpstate { appdomain autoplay_app netd }:fd use;
#line 103



# Reading /proc/PID/maps of other processes
allow dumpstate self:capability sys_ptrace;

# Allow the bugreport service to create a file in
# /data/data/com.android.shell/files/bugreports/bugreport
allow dumpstate shell_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow dumpstate shell_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Run a shell.
allow dumpstate shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# For running am and similar framework commands.
# Run /system/bin/app_process.
allow dumpstate zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
# Dalvik Compiler JIT.
allow dumpstate ashmem_device:chr_file execute;
allow dumpstate dumpstate_tmpfs:file execute;
allow dumpstate self:process execmem;
# For art.
allow dumpstate dalvikcache_data_file:file execute;
allow dumpstate dalvikcache_data_file:lnk_file { getattr open read ioctl lock };

# Dumpstate calls screencap, which grabs a screenshot. Needs gpu access
allow dumpstate gpu_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# logd access

#line 132
allow dumpstate logcat_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 132

#line 132

#line 132

#line 132
allow dumpstate logdr_socket:sock_file write;
#line 132
allow dumpstate logd:unix_stream_socket connectto;
#line 132

#line 132

#line 132


#line 133
# Group AID_LOG checked by filesystem & logd
#line 133
# to permit control commands
#line 133

#line 133

#line 133

#line 133
allow dumpstate logd_socket:sock_file write;
#line 133
allow dumpstate logd:unix_stream_socket connectto;
#line 133

#line 133

#line 133


# Read network state info files.
allow dumpstate net_data_file:dir search;
allow dumpstate net_data_file:file { getattr open read ioctl lock };

# Access /data/tombstones.
allow dumpstate tombstone_data_file:dir { open getattr read search ioctl lock };
allow dumpstate tombstone_data_file:file { getattr open read ioctl lock };

# Access /cache/recovery
allow dumpstate cache_recovery_file:dir { open getattr read search ioctl lock };
allow dumpstate cache_recovery_file:file { getattr open read ioctl lock };

# Access /data/misc/recovery
allow dumpstate recovery_data_file:dir { open getattr read search ioctl lock };
allow dumpstate recovery_data_file:file { getattr open read ioctl lock };

# Access /data/misc/logd

#line 152
  allow dumpstate misc_logd_file:dir { open getattr read search ioctl lock };
#line 152
  allow dumpstate misc_logd_file:file { getattr open read ioctl lock };
#line 155


allow dumpstate { service_manager_type -gatekeeper_service }:service_manager find;
allow dumpstate servicemanager:service_manager list;

allow dumpstate devpts:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Set properties.
# dumpstate_prop is used to share state with the Shell app.

#line 164

#line 164
allow dumpstate property_socket:sock_file write;
#line 164
allow dumpstate init:unix_stream_socket connectto;
#line 164

#line 164
allow dumpstate dumpstate_prop:property_service set;
#line 164

#line 164
allow dumpstate dumpstate_prop:file { getattr open read ioctl lock };
#line 164

#line 164


# systrace support - allow atrace to run
allow dumpstate debugfs_tracing:dir { open getattr read search ioctl lock };
allow dumpstate debugfs_tracing:file { { getattr open read ioctl lock } { open append write lock } };
allow dumpstate debugfs_trace_marker:file getattr;
allow dumpstate atrace_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Access to /data/media.
# This should be removed if sdcardfs is modified to alter the secontext for its
# accesses to the underlying FS.
allow dumpstate media_rw_data_file:dir getattr;
#line 1 "system/sepolicy/file.te"
# Filesystem types
type labeledfs, fs_type;
type pipefs, fs_type;
type sockfs, fs_type;
type rootfs, fs_type;
type proc, fs_type;
# Security-sensitive proc nodes that should not be writable to most.
type proc_security, fs_type;
# Type for /proc/sys/vm/drop_caches
type proc_drop_caches, fs_type;
# proc, sysfs, or other nodes that permit configuration of kernel usermodehelpers.
type usermodehelper, fs_type, sysfs_type;
type qtaguid_proc, fs_type, mlstrustedobject;
type proc_bluetooth_writable, fs_type;
type proc_cpuinfo, fs_type;
type proc_iomem, fs_type;
type proc_meminfo, fs_type;
type proc_net, fs_type;
type proc_sysrq, fs_type;
type proc_uid_cputime_showstat, fs_type;
type proc_uid_cputime_removeuid, fs_type;
type selinuxfs, fs_type, mlstrustedobject;
type cgroup, fs_type, mlstrustedobject;
type sysfs, fs_type, sysfs_type, mlstrustedobject;
type sysfs_uio, sysfs_type, fs_type;
type sysfs_writable, fs_type, sysfs_type, mlstrustedobject;
type sysfs_batteryinfo, fs_type, sysfs_type;
type sysfs_bluetooth_writable, fs_type, sysfs_type, mlstrustedobject;
type sysfs_hwrandom, fs_type, sysfs_type;
type sysfs_nfc_power_writable, fs_type, sysfs_type, mlstrustedobject;
type sysfs_wake_lock, fs_type, sysfs_type;
type sysfs_mac_address, fs_type, sysfs_type;
type sysfs_usb, sysfs_type, file_type, mlstrustedobject;
type configfs, fs_type;
# /sys/devices/system/cpu
type sysfs_devices_system_cpu, fs_type, sysfs_type;
# /sys/module/lowmemorykiller
type sysfs_lowmemorykiller, fs_type, sysfs_type;

type sysfs_thermal, sysfs_type, fs_type;

type sysfs_zram, fs_type, sysfs_type;
type sysfs_zram_uevent, fs_type, sysfs_type;
type inotify, fs_type, mlstrustedobject;
type devpts, fs_type, mlstrustedobject;
type tmpfs, fs_type;
type shm, fs_type;
type mqueue, fs_type;
type fuse, sdcard_type, fs_type, mlstrustedobject;
type sdcardfs, sdcard_type, fs_type, mlstrustedobject;
type vfat, sdcard_type, fs_type, mlstrustedobject;
type debugfs, fs_type;
type debugfs_trace_marker, fs_type, debugfs_type, mlstrustedobject;
type debugfs_tracing, fs_type, debugfs_type;
type pstorefs, fs_type;
type functionfs, fs_type;
type oemfs, fs_type, contextmount_type;
type usbfs, fs_type;
type binfmt_miscfs, fs_type;
type app_fusefs, fs_type, contextmount_type;

# File types
type unlabeled, file_type;
# Default type for anything under /system.
type system_file, file_type;
# Type for /system/bin/logcat.
type logcat_exec, exec_type, file_type;
# /cores for coredumps on userdebug / eng builds
type coredump_file, file_type;
# Default type for anything under /data.
type system_data_file, file_type, data_file_type;
# Unencrypted data
type unencrypted_data_file, file_type, data_file_type;
# /data/.layout_version or other installd-created files that
# are created in a system_data_file directory.
type install_data_file, file_type, data_file_type;
# /data/drm - DRM plugin data
type drm_data_file, file_type, data_file_type;
# /data/adb - adb debugging files
type adb_data_file, file_type, data_file_type;
# /data/anr - ANR traces
type anr_data_file, file_type, data_file_type, mlstrustedobject;
# /data/tombstones - core dumps
type tombstone_data_file, file_type, data_file_type;
# /data/app - user-installed apps
type apk_data_file, file_type, data_file_type;
type apk_tmp_file, file_type, data_file_type, mlstrustedobject;
# /data/app-private - forward-locked apps
type apk_private_data_file, file_type, data_file_type;
type apk_private_tmp_file, file_type, data_file_type, mlstrustedobject;
# /data/dalvik-cache
type dalvikcache_data_file, file_type, data_file_type;
# /data/ota
type ota_data_file, file_type, data_file_type;
# /data/misc/profiles
type user_profile_data_file, file_type, data_file_type, mlstrustedobject;
type user_profile_foreign_dex_data_file, file_type, data_file_type, mlstrustedobject;
# /data/misc/profman
type profman_dump_data_file, file_type, data_file_type;
# /data/resource-cache
type resourcecache_data_file, file_type, data_file_type;
# /data/local - writable by shell
type shell_data_file, file_type, data_file_type, mlstrustedobject;
# /data/gps
type gps_data_file, file_type, data_file_type;
# /data/property
type property_data_file, file_type, data_file_type;
# /data/bootchart
type bootchart_data_file, file_type, data_file_type;
# /data/system/heapdump
type heapdump_data_file, file_type, data_file_type, mlstrustedobject;
# /data/nativetest
type nativetest_data_file, file_type, data_file_type;
# /data/system_de/0/ringtones
type ringtone_file, file_type, data_file_type, mlstrustedobject;
# /data/preloads
type preloads_data_file, file_type, data_file_type;

# Mount locations managed by vold
type mnt_media_rw_file, file_type;
type mnt_user_file, file_type;
type mnt_expand_file, file_type;
type storage_file, file_type;

# Label for storage dirs which are just mount stubs
type mnt_media_rw_stub_file, file_type;
type storage_stub_file, file_type;

# /postinstall: Mount point used by update_engine to run postinstall.
type postinstall_mnt_dir, file_type;
# Files inside the /postinstall mountpoint are all labeled as postinstall_file.
type postinstall_file, file_type;

# /data/misc subdirectories
type adb_keys_file, file_type, data_file_type;
type audio_data_file, file_type, data_file_type;
type audioserver_data_file, file_type, data_file_type;
type bluetooth_data_file, file_type, data_file_type;
type bootstat_data_file, file_type, data_file_type;
type boottrace_data_file, file_type, data_file_type;
type camera_data_file, file_type, data_file_type;
type gatekeeper_data_file, file_type, data_file_type;
type keychain_data_file, file_type, data_file_type;
type keystore_data_file, file_type, data_file_type;
type media_data_file, file_type, data_file_type;
type media_rw_data_file, file_type, data_file_type, mlstrustedobject;
type misc_user_data_file, file_type, data_file_type;
type net_data_file, file_type, data_file_type;
type nfc_data_file, file_type, data_file_type;
type radio_data_file, file_type, data_file_type, mlstrustedobject;
type recovery_data_file, file_type, data_file_type;
type shared_relro_file, file_type, data_file_type;
type systemkeys_data_file, file_type, data_file_type;
type vpn_data_file, file_type, data_file_type;
type wifi_data_file, file_type, data_file_type;
type zoneinfo_data_file, file_type, data_file_type;
type vold_data_file, file_type, data_file_type;
type perfprofd_data_file, file_type, data_file_type, mlstrustedobject;
# /data/misc/trace for method traces on userdebug / eng builds
type method_trace_data_file, file_type, data_file_type, mlstrustedobject;

# Compatibility with type names used in vanilla Android 4.3 and 4.4.
typealias audio_data_file alias audio_firmware_file;
# /data/data subdirectories - app sandboxes
type app_data_file, file_type, data_file_type;
type autoplay_data_file, file_type, data_file_type;
# /data/data subdirectory for system UID apps.
type system_app_data_file, file_type, data_file_type, mlstrustedobject;
# Compatibility with type name used in Android 4.3 and 4.4.
typealias app_data_file alias platform_app_data_file;
typealias app_data_file alias download_file;
# Default type for anything under /cache
type cache_file, file_type, mlstrustedobject;
# Type for /cache/backup_stage/* (fd interchange with apps)
type cache_backup_file, file_type, mlstrustedobject;
# type for anything under /cache/backup (local transport storage)
type cache_private_backup_file, file_type;
# Type for anything under /cache/recovery
type cache_recovery_file, file_type, mlstrustedobject;
# Default type for anything under /efs
type efs_file, file_type;
# Type for wallpaper file.
type wallpaper_file, file_type, data_file_type, mlstrustedobject;
# Type for shortcut manager icon file.
type shortcut_manager_icons, file_type, data_file_type, mlstrustedobject;
# Type for user icon file.
type icon_file, file_type, data_file_type;
# /mnt/asec
type asec_apk_file, file_type, data_file_type, mlstrustedobject;
# Elements of asec files (/mnt/asec) that are world readable
type asec_public_file, file_type, data_file_type;
# /data/app-asec
type asec_image_file, file_type, data_file_type;
# /data/backup and /data/secure/backup
type backup_data_file, file_type, data_file_type, mlstrustedobject;
# For /data/security
type security_file, file_type;
# All devices have bluetooth efs files. But they
# vary per device, so this type is used in per
# device policy
type bluetooth_efs_file, file_type;
# Type for fingerprint template file.
type fingerprintd_data_file, file_type, data_file_type;
# Type for appfuse file.
type app_fuse_file, file_type, data_file_type, mlstrustedobject;

# Socket types
type adbd_socket, file_type;
type bluetooth_socket, file_type;
type dnsproxyd_socket, file_type, mlstrustedobject;
type dumpstate_socket, file_type;
type fwmarkd_socket, file_type, mlstrustedobject;
type gps_socket, file_type;
type installd_socket, file_type;
type lmkd_socket, file_type;
type logd_socket, file_type, mlstrustedobject;
type logdr_socket, file_type, mlstrustedobject;
type logdw_socket, file_type, mlstrustedobject;
type mdns_socket, file_type;
type mdnsd_socket, file_type, mlstrustedobject;
type misc_logd_file, file_type;
type mtpd_socket, file_type;
type netd_socket, file_type;
type property_socket, file_type;
type racoon_socket, file_type;
type rild_socket, file_type;
type rild_debug_socket, file_type;
type system_wpa_socket, file_type;
type system_ndebug_socket, file_type;
type uncrypt_socket, file_type;
type vold_socket, file_type;
type wpa_socket, file_type;
type zygote_socket, file_type;
type sap_uim_socket, file_type;
# UART (for GPS) control proc file
type gps_control, file_type;

# property_contexts file
type property_contexts, file_type;

# Allow files to be created in their appropriate filesystems.
allow fs_type self:filesystem associate;
allow sysfs_type sysfs:filesystem associate;
allow debugfs_type { debugfs debugfs_tracing }:filesystem associate;
allow file_type labeledfs:filesystem associate;
allow file_type tmpfs:filesystem associate;
allow file_type rootfs:filesystem associate;
allow dev_type tmpfs:filesystem associate;
allow app_fuse_file app_fusefs:filesystem associate;
allow postinstall_file self:filesystem associate;

# It's a bug to assign the file_type attribute and fs_type attribute
# to any type. Do not allow it.
#
# For example, the following is a bug:
#   type apk_data_file, file_type, data_file_type, fs_type;
# Should be:
#   type apk_data_file, file_type, data_file_type;
neverallow fs_type file_type:filesystem associate;
#line 1 "system/sepolicy/fingerprintd.te"
type fingerprintd, domain, domain_deprecated;
type fingerprintd_exec, exec_type, file_type;

# fingerprintd

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init fingerprintd_exec:file { getattr open read execute };
#line 5
allow init fingerprintd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow fingerprintd fingerprintd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow fingerprintd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init fingerprintd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init fingerprintd_exec:process fingerprintd;
#line 5

#line 5

#line 5
type fingerprintd_tmpfs, file_type;
#line 5
type_transition fingerprintd tmpfs:file fingerprintd_tmpfs;
#line 5
allow fingerprintd fingerprintd_tmpfs:file { read write };
#line 5

#line 5


#line 6
# Call the servicemanager and transfer references to it.
#line 6
allow fingerprintd servicemanager:binder { call transfer };
#line 6
# servicemanager performs getpidcon on clients.
#line 6
allow servicemanager fingerprintd:dir search;
#line 6
allow servicemanager fingerprintd:file { read open };
#line 6
allow servicemanager fingerprintd:process getattr;
#line 6
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 6
# all domains in domain.te.
#line 6


# need to find KeyStore and add self
allow fingerprintd fingerprintd_service:service_manager { add find };

# allow HAL module to read dir contents
allow fingerprintd fingerprintd_data_file:file { { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } } };

# allow HAL module to read/write/unlink contents of this dir
allow fingerprintd fingerprintd_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };

# Need to add auth tokens to KeyStore

#line 18
  allow keystore fingerprintd:dir search;
#line 18
  allow keystore fingerprintd:file { read open };
#line 18
  allow keystore fingerprintd:process getattr;
#line 18
  allow fingerprintd keystore_service:service_manager find;
#line 18
  
#line 18
# Call the server domain and optionally transfer references to it.
#line 18
allow fingerprintd keystore:binder { call transfer };
#line 18
# Allow the serverdomain to transfer references to the client on the reply.
#line 18
allow keystore fingerprintd:binder transfer;
#line 18
# Receive and use open files from the server.
#line 18
allow fingerprintd keystore:fd use;
#line 18

#line 18

allow fingerprintd keystore:keystore_key { add_auth };

# For permissions checking

#line 22
# Call the server domain and optionally transfer references to it.
#line 22
allow fingerprintd system_server:binder { call transfer };
#line 22
# Allow the serverdomain to transfer references to the client on the reply.
#line 22
allow system_server fingerprintd:binder transfer;
#line 22
# Receive and use open files from the server.
#line 22
allow fingerprintd system_server:fd use;
#line 22
;
allow fingerprintd permission_service:service_manager find;
#line 1 "system/sepolicy/fsck.te"
# Any fsck program run by init
type fsck, domain, domain_deprecated;
type fsck_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init fsck_exec:file { getattr open read execute };
#line 5
allow init fsck:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow fsck fsck_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow fsck init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init fsck:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init fsck_exec:process fsck;
#line 5

#line 5

#line 5
type fsck_tmpfs, file_type;
#line 5
type_transition fsck tmpfs:file fsck_tmpfs;
#line 5
allow fsck fsck_tmpfs:file { read write };
#line 5

#line 5


# /dev/__null__ created by init prior to policy load,
# open fd inherited by fsck.
allow fsck tmpfs:chr_file { read write ioctl };

# Inherit and use pty created by android_fork_execvp_ext().
allow fsck devpts:chr_file { read write ioctl getattr };

# Allow stdin/out back to vold
allow fsck vold:fd use;
allow fsck vold:fifo_file { read write getattr };

# Run fsck on certain block devices
allow fsck block_device:dir search;
allow fsck userdata_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };
allow fsck cache_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };
allow fsck dm_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# fsck performs a stat() on swap to verify that it is a valid
# swap device before setting the EXT2_MF_SWAP mount flag.
allow fsck swap_block_device:blk_file getattr;

###
### neverallow rules
###

# fsck should never be run on these block devices
neverallow fsck {
  boot_block_device
  frp_block_device
  metadata_block_device
  recovery_block_device
  root_block_device
  swap_block_device
  system_block_device
  vold_device
}:blk_file { { append create link unlink relabelfrom rename setattr write } open read ioctl lock };

# Only allow entry from init or vold via fsck binaries
neverallow { domain -init -vold } fsck:process transition;
neverallow * fsck:process dyntransition;
neverallow fsck { file_type fs_type -fsck_exec }:file entrypoint;
#line 1 "system/sepolicy/fsck_untrusted.te"
# Any fsck program run on untrusted block devices
type fsck_untrusted, domain, domain_deprecated;

# Inherit and use pty created by android_fork_execvp_ext().
allow fsck_untrusted devpts:chr_file { read write ioctl getattr };

# Allow stdin/out back to vold
allow fsck_untrusted vold:fd use;
allow fsck_untrusted vold:fifo_file { read write getattr };

# Run fsck on vold block devices
allow fsck_untrusted block_device:dir search;
allow fsck_untrusted vold_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

###
### neverallow rules
###

# Untrusted fsck should never be run on block devices holding sensitive data
neverallow fsck_untrusted {
  boot_block_device
  frp_block_device
  metadata_block_device
  recovery_block_device
  root_block_device
  swap_block_device
  system_block_device
  userdata_block_device
  cache_block_device
  dm_device
}:blk_file { { append create link unlink relabelfrom rename setattr write } open read ioctl lock };

# Only allow entry from vold via fsck binaries
neverallow { domain -vold } fsck_untrusted:process transition;
neverallow * fsck_untrusted:process dyntransition;
neverallow fsck_untrusted { file_type fs_type -fsck_exec }:file entrypoint;
#line 1 "system/sepolicy/gatekeeperd.te"
type gatekeeperd, domain, domain_deprecated;
type gatekeeperd_exec, exec_type, file_type;

# gatekeeperd

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init gatekeeperd_exec:file { getattr open read execute };
#line 5
allow init gatekeeperd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow gatekeeperd gatekeeperd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow gatekeeperd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init gatekeeperd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init gatekeeperd_exec:process gatekeeperd;
#line 5

#line 5

#line 5
type gatekeeperd_tmpfs, file_type;
#line 5
type_transition gatekeeperd tmpfs:file gatekeeperd_tmpfs;
#line 5
allow gatekeeperd gatekeeperd_tmpfs:file { read write };
#line 5

#line 5


#line 6
typeattribute gatekeeperd binderservicedomain;
#line 6


#line 7
# Call the servicemanager and transfer references to it.
#line 7
allow gatekeeperd servicemanager:binder { call transfer };
#line 7
# servicemanager performs getpidcon on clients.
#line 7
allow servicemanager gatekeeperd:dir search;
#line 7
allow servicemanager gatekeeperd:file { read open };
#line 7
allow servicemanager gatekeeperd:process getattr;
#line 7
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 7
# all domains in domain.te.
#line 7

allow gatekeeperd tee_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# need to find KeyStore and add self
allow gatekeeperd gatekeeper_service:service_manager { add find };

# Need to add auth tokens to KeyStore

#line 14
  allow keystore gatekeeperd:dir search;
#line 14
  allow keystore gatekeeperd:file { read open };
#line 14
  allow keystore gatekeeperd:process getattr;
#line 14
  allow gatekeeperd keystore_service:service_manager find;
#line 14
  
#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow gatekeeperd keystore:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow keystore gatekeeperd:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow gatekeeperd keystore:fd use;
#line 14

#line 14

allow gatekeeperd keystore:keystore_key { add_auth };

# For permissions checking
allow gatekeeperd system_server:binder call;
allow gatekeeperd permission_service:service_manager find;
# For parent user ID lookup
allow gatekeeperd user_service:service_manager find;

# for SID file access
allow gatekeeperd gatekeeper_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow gatekeeperd gatekeeper_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# For hardware properties retrieval
allow gatekeeperd hardware_properties_service:service_manager find;

neverallow { domain -gatekeeperd } gatekeeper_service:service_manager add;
#line 1 "system/sepolicy/gpsd.te"
# gpsd - GPS daemon
type gpsd, domain;
type gpsd_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init gpsd_exec:file { getattr open read execute };
#line 5
allow init gpsd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow gpsd gpsd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow gpsd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init gpsd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init gpsd_exec:process gpsd;
#line 5

#line 5

#line 5
type gpsd_tmpfs, file_type;
#line 5
type_transition gpsd tmpfs:file gpsd_tmpfs;
#line 5
allow gpsd gpsd_tmpfs:file { read write };
#line 5

#line 5


#line 6
typeattribute gpsd netdomain;
#line 6

allow gpsd gps_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow gpsd gps_data_file:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
# Socket is created by the daemon, not by init, and under /data/gps,
# not under /dev/socket.
type_transition gpsd gps_data_file:sock_file gps_socket;
allow gpsd gps_socket:sock_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
# XXX Label sysfs files with a specific type?
allow gpsd sysfs:file { { getattr open read ioctl lock } { open append write lock } };

# TODO: added to match above sysfs rule. Remove me?
allow gpsd sysfs_usb:file { open append write lock };

allow gpsd gps_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Execute the shell or system commands.
allow gpsd shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow gpsd system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow gpsd toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

###
### neverallow
###

# gpsd can never have capabilities other than block_suspend
neverallow gpsd self:capability *;
neverallow gpsd self:capability2 ~block_suspend;
#line 1 "system/sepolicy/hci_attach.te"
type hci_attach, domain, domain_deprecated;
type hci_attach_exec, exec_type, file_type;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init hci_attach_exec:file { getattr open read execute };
#line 4
allow init hci_attach:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow hci_attach hci_attach_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow hci_attach init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow init hci_attach:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init hci_attach_exec:process hci_attach;
#line 4

#line 4

#line 4
type hci_attach_tmpfs, file_type;
#line 4
type_transition hci_attach tmpfs:file hci_attach_tmpfs;
#line 4
allow hci_attach hci_attach_tmpfs:file { read write };
#line 4

#line 4


allow hci_attach kernel:system module_request;
allow hci_attach hci_attach_dev:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow hci_attach bluetooth_efs_file:dir { open getattr read search ioctl lock };
allow hci_attach bluetooth_efs_file:file { getattr open read ioctl lock };
#line 1 "system/sepolicy/healthd.te"
# healthd seclabel is specified in init.rc since
# it lives in the rootfs and has no unique file type.
type healthd, domain, domain_deprecated;

# Write to /dev/kmsg
allow healthd kmsg_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Read access to pseudo filesystems.

#line 9
allow healthd sysfs:dir { open getattr read search ioctl lock };
#line 9
allow healthd sysfs:{ file lnk_file } { getattr open read ioctl lock };
#line 9


allow healthd self:capability { net_admin sys_tty_config };

#line 12
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 12
allow healthd sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 12
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 12
allow healthd self:capability2 block_suspend;
#line 12

allow healthd self:netlink_kobject_uevent_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

#line 14
# Call the servicemanager and transfer references to it.
#line 14
allow healthd servicemanager:binder { call transfer };
#line 14
# servicemanager performs getpidcon on clients.
#line 14
allow servicemanager healthd:dir search;
#line 14
allow servicemanager healthd:file { read open };
#line 14
allow servicemanager healthd:process getattr;
#line 14
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 14
# all domains in domain.te.
#line 14


#line 15
typeattribute healthd binderservicedomain;
#line 15


#line 16
# Call the server domain and optionally transfer references to it.
#line 16
allow healthd system_server:binder { call transfer };
#line 16
# Allow the serverdomain to transfer references to the client on the reply.
#line 16
allow system_server healthd:binder transfer;
#line 16
# Receive and use open files from the server.
#line 16
allow healthd system_server:fd use;
#line 16


# Write to state file.
# TODO:  Split into a separate type?
allow healthd sysfs:file write;

# TODO: added to match above sysfs rule. Remove me?
allow healthd sysfs_usb:file write;

allow healthd sysfs_batteryinfo:file { getattr open read ioctl lock };

###
### healthd: charger mode
###

# Read /sys/fs/pstore/console-ramoops
# Don't worry about overly broad permissions for now, as there's
# only one file in /sys/fs/pstore
allow healthd pstorefs:dir { open getattr read search ioctl lock };
allow healthd pstorefs:file { getattr open read ioctl lock };

allow healthd graphics_device:dir { open getattr read search ioctl lock };
allow healthd graphics_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow healthd input_device:dir { open getattr read search ioctl lock };
allow healthd input_device:chr_file { getattr open read ioctl lock };
allow healthd tty_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow healthd ashmem_device:chr_file execute;
allow healthd self:process execmem;
allow healthd proc_sysrq:file { { getattr open read ioctl lock } { open append write lock } };
allow healthd self:capability sys_boot;

allow healthd batteryproperties_service:service_manager { add find };

# Healthd needs to tell init to continue the boot
# process when running in charger mode.

#line 51

#line 51
allow healthd property_socket:sock_file write;
#line 51
allow healthd init:unix_stream_socket connectto;
#line 51

#line 51
allow healthd system_prop:property_service set;
#line 51

#line 51
allow healthd system_prop:file { getattr open read ioctl lock };
#line 51

#line 51

#line 1 "system/sepolicy/hostapd.te"
# userspace wifi access points
type hostapd, domain, domain_deprecated;
type hostapd_exec, exec_type, file_type;


#line 5
typeattribute hostapd netdomain;
#line 5


allow hostapd self:capability { net_admin net_raw setuid setgid };
allow hostapd self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow hostapd self:netlink_generic_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow hostapd self:packet_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow hostapd self:netlink_route_socket nlmsg_write;

allow hostapd wifi_data_file:file { { getattr open read ioctl lock } { open append write lock } };
allow hostapd wifi_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
type_transition hostapd wifi_data_file:dir wpa_socket "sockets";
type_transition hostapd wifi_data_file:dir wpa_socket "hostapd";
allow hostapd wpa_socket:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow hostapd wpa_socket:sock_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow hostapd netd:fd use;
allow hostapd netd:udp_socket { read write };
allow hostapd netd:fifo_file { read write };
# TODO: Investigate whether these inherited sockets should be closed on exec.
allow hostapd netd:netlink_kobject_uevent_socket { read write };
allow hostapd netd:netlink_nflog_socket { read write };
allow hostapd netd:netlink_route_socket { read write };
allow hostapd netd:unix_stream_socket { read write };
allow hostapd netd:unix_dgram_socket { read write };
#line 1 "system/sepolicy/idmap.te"
# idmap, when executed by installd
type idmap, domain, domain_deprecated;
type idmap_exec, exec_type, file_type;

# Use open file to /data/resource-cache file inherited from installd.
allow idmap installd:fd use;
allow idmap resourcecache_data_file:file { getattr read write };

# Open and read from target and overlay apk files passed by argument.
allow idmap apk_data_file:file { getattr open read ioctl lock };
#line 1 "system/sepolicy/init.te"
# init is its own domain.
type init, domain, domain_deprecated, mlstrustedsubject;

#line 3
type init_tmpfs, file_type;
#line 3
type_transition init tmpfs:file init_tmpfs;
#line 3
allow init init_tmpfs:file { read write };
#line 3


# The init domain is entered by execing init.
type init_exec, exec_type, file_type;

# /dev/__null__ node created by init.
allow init tmpfs:chr_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

#
# init direct restorecon calls.
#
# /dev/socket
allow init { device socket_device }:dir relabelto;
# /dev/__properties__
allow init properties_device:dir relabelto;
allow init properties_serial:file { write relabelto };
allow init property_type:file { { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } } relabelto };

# setrlimit
allow init self:capability sys_resource;

# Remove /dev/.booting, created before initial policy load or restorecon /dev.
allow init tmpfs:file unlink;

# Access pty created for fsck.
allow init devpts:chr_file { read write open };

# Create /dev/fscklogs files.
allow init fscklogs:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Access /dev/__null__ node created prior to initial policy load.
allow init tmpfs:chr_file write;

# Access /dev/console.
allow init console_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Access /dev/tty0.
allow init tty_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Call mount(2).
allow init self:capability sys_admin;

# Create and mount on directories in /.
allow init rootfs:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow init { rootfs cache_file cgroup storage_file system_data_file system_file }:dir mounton;

# Mount on /dev/usb-ffs/adb.
allow init device:dir mounton;

# Create and remove symlinks in /.
allow init rootfs:lnk_file { create unlink };

# Mount debugfs on /sys/kernel/debug.
allow init sysfs:dir mounton;

# Create cgroups mount points in tmpfs and mount cgroups on them.
allow init tmpfs:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow init tmpfs:dir mounton;
allow init cgroup:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow init cpuctl_device:dir { create mounton };

# /config
allow init configfs:dir mounton;
allow init configfs:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };

# Use tmpfs as /data, used for booting when /data is encrypted
allow init tmpfs:dir relabelfrom;

# Create directories under /dev/cpuctl after chowning it to system.
allow init self:capability dac_override;

# Set system clock.
allow init self:capability sys_time;

allow init self:capability { sys_rawio mknod };

# Mounting filesystems from block devices.
allow init dev_type:blk_file { getattr open read ioctl lock };

# Mounting filesystems.
# Only allow relabelto for types used in context= mount options,
# which should all be assigned the contextmount_type attribute.
# This can be done in device-specific policy via type or typeattribute
# declarations.
allow init fs_type:filesystem ~relabelto;
allow init unlabeled:filesystem ~relabelto;
allow init contextmount_type:filesystem relabelto;

# Allow read-only access to context= mounted filesystems.
allow init contextmount_type:dir { open getattr read search ioctl lock };
allow init contextmount_type:{ file lnk_file sock_file fifo_file } { getattr open read ioctl lock };

# restorecon /adb_keys or any other rootfs files and directories to a more
# specific type.
allow init rootfs:{ dir file } relabelfrom;

# mkdir, symlink, write, rm/rmdir, chown/chmod, restorecon/restorecon_recursive from init.rc files.
# chown/chmod require open+read+setattr required for open()+fchown/fchmod().
# system/core/init.rc requires at least cache_file and data_file_type.
# init.<board>.rc files often include device-specific types, so
# we just allow all file types except /system files here.
allow init self:capability { chown fowner fsetid };
allow init {file_type -system_file -exec_type -app_data_file}:dir { create search getattr open read setattr ioctl };
allow init {file_type -system_file -exec_type -keystore_data_file -security_file -app_data_file -shell_data_file -vold_data_file -misc_logd_file }:dir { write add_name remove_name rmdir relabelfrom };
allow init {file_type -system_file -exec_type -keystore_data_file -security_file -app_data_file -shell_data_file -vold_data_file -misc_logd_file }:file { create getattr open read write setattr relabelfrom unlink };
allow init {file_type -system_file -exec_type -keystore_data_file -security_file -app_data_file -shell_data_file -vold_data_file -misc_logd_file }:{ sock_file fifo_file } { create getattr open read setattr relabelfrom unlink };
allow init {file_type -system_file -exec_type -keystore_data_file -security_file -app_data_file -shell_data_file -vold_data_file -misc_logd_file }:lnk_file { create getattr setattr relabelfrom unlink };
allow init {file_type -system_file -exec_type}:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } relabelto;
allow init { sysfs debugfs debugfs_tracing }:{ dir file lnk_file } { getattr relabelfrom };
allow init { sysfs_type debugfs_type }:{ dir file lnk_file } relabelto;
allow init dev_type:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow init dev_type:lnk_file create;

# Disable tracing by writing to /sys/kernel/debug/tracing/tracing_on
allow init debugfs_tracing:file { open append write lock };

# chown/chmod on pseudo files.
allow init { fs_type -contextmount_type -sdcard_type -rootfs }:file { open read setattr };
allow init { fs_type -contextmount_type -sdcard_type -rootfs }:dir  { open read setattr search };

# chown/chmod on devices.
allow init { dev_type -kmem_device }:chr_file { read open setattr };

# Unlabeled file access for upgrades from 4.2.
allow init unlabeled:dir { { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } } relabelfrom };
allow init unlabeled:{ file lnk_file sock_file fifo_file } { { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } } relabelfrom };

# Create /data/security from init.rc post-fs-data.
allow init security_file:dir { create setattr };

# Reload policy upon setprop selinux.reload_policy 1.
# Note: this requires the following allow rule
#   allow init kernel:security load_policy;
# which can be configured on a device-by-device basis if needed.

#line 137
allow init security_file:dir { open getattr read search ioctl lock };
#line 137
allow init security_file:{ file lnk_file } { getattr open read ioctl lock };
#line 137


# Any operation that can modify the kernel ring buffer, e.g. clear
# or a read that consumes the messages that were read.
allow init kernel:system syslog_mod;
allow init self:capability2 syslog;

# Set usermodehelpers and /proc security settings.
allow init usermodehelper:file { { getattr open read ioctl lock } { open append write lock } };
allow init proc_security:file { { getattr open read ioctl lock } { open append write lock } };

# Write to /proc/sys/kernel/panic_on_oops.
allow init proc:file { open append write lock };

# Write to /proc/sys/net/ping_group_range and other /proc/sys/net files.
allow init proc_net:file { open append write lock };
allow init self:capability net_admin;

# Write to /proc/sysrq-trigger.
allow init proc_sysrq:file { open append write lock };

# Reboot.
allow init self:capability sys_boot;

# Write to sysfs nodes.
allow init sysfs_type:dir { open getattr read search ioctl lock };
allow init sysfs_type:file { open append write lock };

# disksize
allow init sysfs_zram:file getattr;

# Transitions to seclabel processes in init.rc

#line 169
# Old domain may exec the file and transition to the new domain.
#line 169
allow init rootfs:file { getattr open read execute };
#line 169
allow init adbd:process transition;
#line 169
# New domain is entered by executing the file.
#line 169
allow adbd rootfs:file { entrypoint open read execute getattr };
#line 169
# New domain can send SIGCHLD to its caller.
#line 169
allow adbd init:process sigchld;
#line 169
# Enable AT_SECURE, i.e. libc secure mode.
#line 169
#line 169
#line 169
allow init adbd:process { siginh rlimitinh };
#line 169


#line 170
# Old domain may exec the file and transition to the new domain.
#line 170
allow init rootfs:file { getattr open read execute };
#line 170
allow init healthd:process transition;
#line 170
# New domain is entered by executing the file.
#line 170
allow healthd rootfs:file { entrypoint open read execute getattr };
#line 170
# New domain can send SIGCHLD to its caller.
#line 170
allow healthd init:process sigchld;
#line 170
# Enable AT_SECURE, i.e. libc secure mode.
#line 170
#line 170
#line 170
allow init healthd:process { siginh rlimitinh };
#line 170


#line 171
# Old domain may exec the file and transition to the new domain.
#line 171
allow init rootfs:file { getattr open read execute };
#line 171
allow init slideshow:process transition;
#line 171
# New domain is entered by executing the file.
#line 171
allow slideshow rootfs:file { entrypoint open read execute getattr };
#line 171
# New domain can send SIGCHLD to its caller.
#line 171
allow slideshow init:process sigchld;
#line 171
# Enable AT_SECURE, i.e. libc secure mode.
#line 171
#line 171
#line 171
allow init slideshow:process { siginh rlimitinh };
#line 171

#line 174


#line 175
# Old domain may exec the file and transition to the new domain.
#line 175
allow init shell_exec:file { getattr open read execute };
#line 175
allow init shell:process transition;
#line 175
# New domain is entered by executing the file.
#line 175
allow shell shell_exec:file { entrypoint open read execute getattr };
#line 175
# New domain can send SIGCHLD to its caller.
#line 175
allow shell init:process sigchld;
#line 175
# Enable AT_SECURE, i.e. libc secure mode.
#line 175
#line 175
#line 175
allow init shell:process { siginh rlimitinh };
#line 175


#line 176
# Old domain may exec the file and transition to the new domain.
#line 176
allow init init_exec:file { getattr open read execute };
#line 176
allow init ueventd:process transition;
#line 176
# New domain is entered by executing the file.
#line 176
allow ueventd init_exec:file { entrypoint open read execute getattr };
#line 176
# New domain can send SIGCHLD to its caller.
#line 176
allow ueventd init:process sigchld;
#line 176
# Enable AT_SECURE, i.e. libc secure mode.
#line 176
#line 176
#line 176
allow init ueventd:process { siginh rlimitinh };
#line 176


#line 177
# Old domain may exec the file and transition to the new domain.
#line 177
allow init init_exec:file { getattr open read execute };
#line 177
allow init watchdogd:process transition;
#line 177
# New domain is entered by executing the file.
#line 177
allow watchdogd init_exec:file { entrypoint open read execute getattr };
#line 177
# New domain can send SIGCHLD to its caller.
#line 177
allow watchdogd init:process sigchld;
#line 177
# Enable AT_SECURE, i.e. libc secure mode.
#line 177
#line 177
#line 177
allow init watchdogd:process { siginh rlimitinh };
#line 177

# case where logpersistd is actually logcat -f in logd context (nee: logcatd)

#line 179
  
#line 179
# Allow the necessary permissions.
#line 179

#line 179
# Old domain may exec the file and transition to the new domain.
#line 179
allow init logcat_exec:file { getattr open read execute };
#line 179
allow init logd:process transition;
#line 179
# New domain is entered by executing the file.
#line 179
allow logd logcat_exec:file { entrypoint open read execute getattr };
#line 179
# New domain can send SIGCHLD to its caller.
#line 179
allow logd init:process sigchld;
#line 179
# Enable AT_SECURE, i.e. libc secure mode.
#line 179
#line 179
#line 179
allow init logd:process { siginh rlimitinh };
#line 179

#line 179
# Make the transition occur by default.
#line 179
type_transition init logcat_exec:process logd;
#line 179

#line 181


# Init will create /data/misc/logd when the property persist.logd.logpersistd is "logcatd".
# Init will also walk through the directory as part of a recursive restorecon.
allow init misc_logd_file:dir { open create read getattr setattr search };
allow init misc_logd_file:file { getattr };

# Support "adb shell stop"
allow init self:capability kill;
allow init domain:process { sigkill signal };

# Init creates keystore's directory on boot, and walks through
# the directory as part of a recursive restorecon.
allow init keystore_data_file:dir { open create read getattr setattr search };
allow init keystore_data_file:file { getattr };

# Init creates vold's directory on boot, and walks through
# the directory as part of a recursive restorecon.
allow init vold_data_file:dir { open create read getattr setattr search };
allow init vold_data_file:file { getattr };

# Init creates /data/local/tmp at boot
allow init shell_data_file:dir { open create read getattr setattr search };
allow init shell_data_file:file { getattr };

# Set UID and GID for services.
allow init self:capability { setuid setgid };

# For bootchart to read the /proc/$pid/cmdline file of each process,
# we need to have following line to allow init to have access
# to different domains.

#line 212
allow init domain:dir { open getattr read search ioctl lock };
#line 212
allow init domain:{ file lnk_file } { getattr open read ioctl lock };
#line 212


# Use setexeccon(), setfscreatecon(), and setsockcreatecon().
# setexec is for services with seclabel options.
# setfscreate is for labeling directories and socket files.
# setsockcreate is for labeling local/unix domain sockets.
allow init self:process { setexec setfscreate setsockcreate };

# Perform SELinux access checks on setting properties.

#line 221
allow init selinuxfs:file { { getattr open read ioctl lock } { open append write lock } };
#line 221
allow init kernel:security compute_av;
#line 221
allow init self:netlink_selinux_socket { read write create getattr setattr lock relabelfrom relabelto append bind connect listen accept getopt setopt shutdown recvfrom sendto recv_msg send_msg name_bind };
#line 221


# Ask the kernel for the new context on services to label their sockets.
allow init kernel:security compute_create;

# Create sockets for the services.
allow init domain:unix_stream_socket { create bind };
allow init domain:unix_dgram_socket { create bind };

# Create /data/property and files within it.
allow init property_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow init property_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Set any property.
allow init property_type:property_service set;

# Run "ifup lo" to bring up the localhost interface
allow init self:udp_socket { create ioctl };
allow init self:capability net_raw;

# This line seems suspect, as it should not really need to
# set scheduling parameters for a kernel domain task.
allow init kernel:process setsched;

# swapon() needs write access to swap device
# system/core/fs_mgr/fs_mgr.c - fs_mgr_swapon_all
allow init swap_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Read from /dev/hw_random if present.
# system/core/init/init.c - mix_hwrng_into_linux_rng_action
allow init hw_random_device:chr_file { getattr open read ioctl lock };

# Create and access /dev files without a specific type,
# e.g. /dev/.coldboot_done, /dev/.booting
# TODO:  Move these files into their own type unless they are
# only ever accessed by init.
allow init device:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Access character devices without a specific type,
# e.g. /dev/keychord.
# TODO: Move these devices into their own type unless they
# are only ever accessed by init.
allow init device:chr_file { { { getattr open read ioctl lock } { open append write lock } } setattr };

# keychord configuration
allow init self:capability sys_tty_config;

# Access device mapper for setting up dm-verity
allow init dm_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow init dm_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Access metadata block device for storing dm-verity state
allow init metadata_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Read /sys/fs/pstore/console-ramoops to detect restarts caused
# by dm-verity detecting corrupted blocks
allow init pstorefs:dir search;
allow init pstorefs:file { getattr open read ioctl lock };
allow init kernel:system syslog_read;

# linux keyring configuration
allow init init:key { write search setattr };

# Allow init to create /data/unencrypted
allow init unencrypted_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };


#line 287

#line 287

#line 287
allow init vold_socket:sock_file write;
#line 287
allow init vold:unix_stream_socket connectto;
#line 287

#line 287


# Raw writes to misc block device
allow init misc_block_device:blk_file { open append write lock };

###
### neverallow rules
###

# The init domain is only entered via setcon from the kernel domain,
# never via an exec-based transition.
neverallow domain init:process dyntransition;
neverallow { domain -kernel} init:process transition;
neverallow init { file_type fs_type -init_exec }:file entrypoint;

# Never read/follow symlinks created by shell or untrusted apps.
neverallow init shell_data_file:lnk_file read;
neverallow init app_data_file:lnk_file read;

# init should never execute a program without changing to another domain.
neverallow init { file_type fs_type }:file execute_no_trans;

# Init never adds or uses services via service_manager.
neverallow init service_manager_type:service_manager { add find };
neverallow init servicemanager:service_manager list;

# Init should not be creating subdirectories in /data/local/tmp
neverallow init shell_data_file:dir { write add_name remove_name };
#line 1 "system/sepolicy/inputflinger.te"
# inputflinger
type inputflinger, domain, domain_deprecated;
type inputflinger_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init inputflinger_exec:file { getattr open read execute };
#line 5
allow init inputflinger:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow inputflinger inputflinger_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow inputflinger init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init inputflinger:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init inputflinger_exec:process inputflinger;
#line 5

#line 5

#line 5
type inputflinger_tmpfs, file_type;
#line 5
type_transition inputflinger tmpfs:file inputflinger_tmpfs;
#line 5
allow inputflinger inputflinger_tmpfs:file { read write };
#line 5

#line 5


#line 6
# Call the servicemanager and transfer references to it.
#line 6
allow inputflinger servicemanager:binder { call transfer };
#line 6
# servicemanager performs getpidcon on clients.
#line 6
allow servicemanager inputflinger:dir search;
#line 6
allow servicemanager inputflinger:file { read open };
#line 6
allow servicemanager inputflinger:process getattr;
#line 6
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 6
# all domains in domain.te.
#line 6


#line 7
typeattribute inputflinger binderservicedomain;
#line 7



#line 9
# Call the server domain and optionally transfer references to it.
#line 9
allow inputflinger system_server:binder { call transfer };
#line 9
# Allow the serverdomain to transfer references to the client on the reply.
#line 9
allow system_server inputflinger:binder transfer;
#line 9
# Receive and use open files from the server.
#line 9
allow inputflinger system_server:fd use;
#line 9



#line 11
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 11
allow inputflinger sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 11
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 11
allow inputflinger self:capability2 block_suspend;
#line 11


allow inputflinger inputflinger_service:service_manager { add find };
allow inputflinger input_device:dir { open getattr read search ioctl lock };
allow inputflinger input_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
#line 1 "system/sepolicy/install_recovery.te"
# service flash_recovery in init.rc
type install_recovery, domain, domain_deprecated;
type install_recovery_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init install_recovery_exec:file { getattr open read execute };
#line 5
allow init install_recovery:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow install_recovery install_recovery_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow install_recovery init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init install_recovery:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init install_recovery_exec:process install_recovery;
#line 5

#line 5

#line 5
type install_recovery_tmpfs, file_type;
#line 5
type_transition install_recovery tmpfs:file install_recovery_tmpfs;
#line 5
allow install_recovery install_recovery_tmpfs:file { read write };
#line 5

#line 5


allow install_recovery self:capability dac_override;

# /system/bin/install-recovery.sh is a shell script.
# Needs to execute /system/bin/sh
allow install_recovery shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Execute /system/bin/applypatch
allow install_recovery system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

allow install_recovery toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Update the recovery block device based off a diff of the boot block device
allow install_recovery block_device:dir search;
allow install_recovery boot_block_device:blk_file { getattr open read ioctl lock };
allow install_recovery recovery_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Create and delete /cache/saved.file
allow install_recovery { cache_file cache_recovery_file }:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow install_recovery { cache_file cache_recovery_file }:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

auditallow install_recovery cache_recovery_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
auditallow install_recovery cache_recovery_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Write to /proc/sys/vm/drop_caches
allow install_recovery proc_drop_caches:file { open append write lock };
#line 1 "system/sepolicy/installd.te"
# installer daemon
type installd, domain, domain_deprecated;
type installd_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init installd_exec:file { getattr open read execute };
#line 5
allow init installd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow installd installd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow installd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init installd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init installd_exec:process installd;
#line 5

#line 5

#line 5
type installd_tmpfs, file_type;
#line 5
type_transition installd tmpfs:file installd_tmpfs;
#line 5
allow installd installd_tmpfs:file { read write };
#line 5

#line 5

typeattribute installd mlstrustedsubject;
allow installd self:capability { chown dac_override fowner fsetid setgid setuid };

# Allow labeling of files under /data/app/com.example/oat/
allow installd dalvikcache_data_file:dir relabelto;
allow installd dalvikcache_data_file:file { relabelto link };

# Allow movement of APK files between volumes
allow installd apk_data_file:dir { { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } } relabelfrom };
allow installd apk_data_file:file { { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } } relabelfrom link };
allow installd apk_data_file:lnk_file { create read unlink };

allow installd asec_apk_file:file { getattr open read ioctl lock };
allow installd apk_tmp_file:file { { getattr open read ioctl lock } unlink };
allow installd apk_tmp_file:dir { relabelfrom { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } } };
allow installd oemfs:dir { open getattr read search ioctl lock };
allow installd oemfs:file { getattr open read ioctl lock };
allow installd cgroup:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow installd mnt_expand_file:dir { search getattr };
# Check validity of SELinux context before use.

#line 26
allow installd selinuxfs:file { { getattr open read ioctl lock } { open append write lock } };
#line 26
allow installd kernel:security check_context;
#line 26

# Read /seapp_contexts and /data/security/seapp_contexts

#line 28
allow installd security_file:dir { open getattr read search ioctl lock };
#line 28
allow installd security_file:file { getattr open read ioctl lock };
#line 28


# Search /data/app-asec and stat files in it.
allow installd asec_image_file:dir search;
allow installd asec_image_file:file getattr;

# Create /data/user and /data/user/0 if necessary.
# Also required to initially create /data/data subdirectories
# and lib symlinks before the setfilecon call.  May want to
# move symlink creation after setfilecon in installd.
allow installd system_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow installd system_data_file:lnk_file { create setattr unlink };

# Upgrade /data/media for multi-user if necessary.
allow installd media_rw_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow installd media_rw_data_file:file { getattr unlink };
# restorecon new /data/media directory.
allow installd system_data_file:dir relabelfrom;
allow installd media_rw_data_file:dir relabelto;

# Upgrade /data/misc/keychain for multi-user if necessary.
allow installd misc_user_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow installd misc_user_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow installd keychain_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow installd keychain_data_file:file {{ getattr open read ioctl lock } unlink};

# Create /data/.layout_version.* file
type_transition installd system_data_file:file install_data_file;
allow installd install_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Create files under /data/dalvik-cache.
allow installd dalvikcache_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow installd dalvikcache_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Create files under /data/resource-cache.
allow installd resourcecache_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow installd resourcecache_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Run dex2oat in its own sandbox.

#line 67
# Allow the necessary permissions.
#line 67

#line 67
# Old domain may exec the file and transition to the new domain.
#line 67
allow installd dex2oat_exec:file { getattr open read execute };
#line 67
allow installd dex2oat:process transition;
#line 67
# New domain is entered by executing the file.
#line 67
allow dex2oat dex2oat_exec:file { entrypoint open read execute getattr };
#line 67
# New domain can send SIGCHLD to its caller.
#line 67
allow dex2oat installd:process sigchld;
#line 67
# Enable AT_SECURE, i.e. libc secure mode.
#line 67
#line 67
#line 67
allow installd dex2oat:process { siginh rlimitinh };
#line 67

#line 67
# Make the transition occur by default.
#line 67
type_transition installd dex2oat_exec:process dex2oat;
#line 67


# Run profman in its own sandbox.

#line 70
# Allow the necessary permissions.
#line 70

#line 70
# Old domain may exec the file and transition to the new domain.
#line 70
allow installd profman_exec:file { getattr open read execute };
#line 70
allow installd profman:process transition;
#line 70
# New domain is entered by executing the file.
#line 70
allow profman profman_exec:file { entrypoint open read execute getattr };
#line 70
# New domain can send SIGCHLD to its caller.
#line 70
allow profman installd:process sigchld;
#line 70
# Enable AT_SECURE, i.e. libc secure mode.
#line 70
#line 70
#line 70
allow installd profman:process { siginh rlimitinh };
#line 70

#line 70
# Make the transition occur by default.
#line 70
type_transition installd profman_exec:process profman;
#line 70


# Run idmap in its own sandbox.

#line 73
# Allow the necessary permissions.
#line 73

#line 73
# Old domain may exec the file and transition to the new domain.
#line 73
allow installd idmap_exec:file { getattr open read execute };
#line 73
allow installd idmap:process transition;
#line 73
# New domain is entered by executing the file.
#line 73
allow idmap idmap_exec:file { entrypoint open read execute getattr };
#line 73
# New domain can send SIGCHLD to its caller.
#line 73
allow idmap installd:process sigchld;
#line 73
# Enable AT_SECURE, i.e. libc secure mode.
#line 73
#line 73
#line 73
allow installd idmap:process { siginh rlimitinh };
#line 73

#line 73
# Make the transition occur by default.
#line 73
type_transition installd idmap_exec:process idmap;
#line 73


# Run otapreopt in its own sandbox.

#line 76
# Allow the necessary permissions.
#line 76

#line 76
# Old domain may exec the file and transition to the new domain.
#line 76
allow installd otapreopt_chroot_exec:file { getattr open read execute };
#line 76
allow installd otapreopt_chroot:process transition;
#line 76
# New domain is entered by executing the file.
#line 76
allow otapreopt_chroot otapreopt_chroot_exec:file { entrypoint open read execute getattr };
#line 76
# New domain can send SIGCHLD to its caller.
#line 76
allow otapreopt_chroot installd:process sigchld;
#line 76
# Enable AT_SECURE, i.e. libc secure mode.
#line 76
#line 76
#line 76
allow installd otapreopt_chroot:process { siginh rlimitinh };
#line 76

#line 76
# Make the transition occur by default.
#line 76
type_transition installd otapreopt_chroot_exec:process otapreopt_chroot;
#line 76

# otapreopt_chroot will transition into postinstall_dexopt, which will spawn a child.
allow installd postinstall_dexopt:process sigchld;

# Upgrade from unlabeled userdata.
# Just need enough to remove and/or relabel it.
allow installd unlabeled:dir { getattr search relabelfrom { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } rmdir };
allow installd unlabeled:{ file lnk_file sock_file fifo_file } { getattr relabelfrom rename unlink setattr };
# Read pkg.apk file for input during dexopt.
allow installd unlabeled:file { getattr open read ioctl lock };

# Upgrade from before system_app_data_file was used for system UID apps.
# Just need enough to relabel it and to unlink removed package files.
# Directory access covered by earlier rule above.
allow installd system_data_file:{ file lnk_file sock_file fifo_file } { getattr relabelfrom unlink };

# Manage /data/data subdirectories, including initially labeling them
# upon creation via setfilecon or running restorecon_recursive,
# setting owner/mode, creating symlinks within them, and deleting them
# upon package uninstall.
# Types extracted from seapp_contexts type= fields.
allow installd {
    system_app_data_file
    bluetooth_data_file
    nfc_data_file
    radio_data_file
    shell_data_file
    app_data_file
    autoplay_data_file
}:dir { { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } } relabelfrom relabelto };

allow installd {
    system_app_data_file
    bluetooth_data_file
    nfc_data_file
    radio_data_file
    shell_data_file
    app_data_file
    autoplay_data_file
}:{ file lnk_file sock_file fifo_file } { { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } } relabelfrom relabelto };

# Similar for the files under /data/misc/profiles/
allow installd user_profile_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow installd user_profile_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow installd user_profile_data_file:dir rmdir;
allow installd user_profile_data_file:file unlink;
allow installd user_profile_foreign_dex_data_file:dir { add_name getattr rmdir open read write search remove_name };
allow installd user_profile_foreign_dex_data_file:file { getattr rename unlink };

# Files created/updated by profman dumps.
allow installd profman_dump_data_file:dir { search add_name write };
allow installd profman_dump_data_file:file { create setattr open write };

# Create and use pty created by android_fork_execvp().
allow installd devpts:chr_file { { getattr open read ioctl lock } { open append write lock } };

# execute toybox for app relocation
allow installd toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 1 "system/sepolicy/isolated_app.te"
###
### Services with isolatedProcess=true in their manifest.
###
### This file defines the rules for isolated apps. An "isolated
### app" is an APP with UID between AID_ISOLATED_START (99000)
### and AID_ISOLATED_END (99999).
###
### isolated_app includes all the appdomain rules, plus the
### additional following rules:
###

type isolated_app, domain, domain_deprecated;

#line 13
typeattribute isolated_app appdomain;
#line 13
# Label ashmem objects with our own unique type.
#line 13

#line 13
type isolated_app_tmpfs, file_type;
#line 13
type_transition isolated_app tmpfs:file isolated_app_tmpfs;
#line 13
allow isolated_app isolated_app_tmpfs:file { read write };
#line 13

#line 13
# Map with PROT_EXEC.
#line 13
allow isolated_app isolated_app_tmpfs:file execute;
#line 13


# Access already open app data files received over Binder or local socket IPC.
allow isolated_app app_data_file:file { read write getattr lock };

allow isolated_app activity_service:service_manager find;
allow isolated_app display_service:service_manager find;
allow isolated_app webviewupdate_service:service_manager find;

# Google Breakpad (crash reporter for Chrome) relies on ptrace
# functionality. Without the ability to ptrace, the crash reporter
# tool is broken.
# b/20150694
# https://code.google.com/p/chromium/issues/detail?id=475270
allow isolated_app self:process ptrace;

#####
##### Neverallow
#####

# Do not allow isolated_app to directly open tun_device
neverallow isolated_app tun_device:chr_file open;

# Do not allow isolated_app to set system properties.
neverallow isolated_app property_socket:sock_file write;
neverallow isolated_app property_type:property_service set;

# Isolated apps should not directly open app data files themselves.
neverallow isolated_app app_data_file:file open;

# Only allow appending to /data/anr/traces.txt (b/27853304, b/18340553)
# TODO: are there situations where isolated_apps write to this file?
# TODO: should we tighten these restrictions further?
neverallow isolated_app anr_data_file:file ~{ open append };
neverallow isolated_app anr_data_file:dir ~search;

# b/17487348
# Isolated apps can only access three services,
# activity_service, display_service and webviewupdate_service.
neverallow isolated_app {
    service_manager_type
    -activity_service
    -display_service
    -webviewupdate_service
}:service_manager find;

# Isolated apps shouldn't be able to access the driver directly.
neverallow isolated_app gpu_device:chr_file { { { getattr open read ioctl lock } { open append write lock } } execute };

# Do not allow isolated_app access to /cache
neverallow isolated_app cache_file:dir ~{ { open getattr read search ioctl lock } };
neverallow isolated_app cache_file:file ~{ read getattr };

# Restrict socket ioctls. Either 1. disallow privileged ioctls, 2. disallow the
# ioctl permission, or 3. disallow the socket class.
neverallowxperm isolated_app domain:{ rawip_socket tcp_socket udp_socket } ioctl 
#line 68
{
#line 68
# qualcomm rmnet ioctls
#line 68
0x00006900 0x00006902
#line 68
# socket ioctls
#line 68
0x0000890b 0x0000890c 0x0000890d 0x00008911 0x00008914 0x00008916
#line 68
0x00008918 0x0000891a 0x0000891c 0x0000891d 0x0000891e 0x0000891f
#line 68
0x00008920 0x00008922 0x00008923 0x00008924 0x00008925 0x00008926
#line 68
0x00008927 0x00008929 0x00008930 0x00008931 0x00008932
#line 68
0x00008934 0x00008935 0x00008936 0x00008937 0x00008940 0x00008941
#line 68
0x00008943 0x00008946 0x00008947 0x00008948 0x00008949 0x0000894a
#line 68
0x0000894b 0x00008953 0x00008954 0x00008955 0x00008960 0x00008961 0x00008962 0x00008970
#line 68
0x00008971 0x00008980 0x00008981 0x00008982 0x00008983 0x00008990
#line 68
0x00008991 0x00008992 0x00008993 0x00008994
#line 68
0x00008995 0x000089a0 0x000089a1 0x000089a2 0x000089a3 0x000089b0
#line 68
# device and protocol specific ioctls
#line 68
0x000089f0-0x000089ff
#line 68
0x000089e0-0x000089ef
#line 68
# Wireless extension ioctls
#line 68
0x00008b00 0x00008b02 0x00008b04 0x00008b06 0x00008b08 0x00008b0a
#line 68
0x00008b0c 0x00008b0e 0x00008b10 0x00008b14 0x00008b15 0x00008b16 0x00008b17
#line 68
0x00008b18 0x00008b19 0x00008b1a 0x00008b1b 0x00008b1c 0x00008b1d
#line 68
0x00008b20 0x00008b22 0x00008b24 0x00008b26 0x00008b28 0x00008b2a
#line 68
0x00008b2b 0x00008b2c 0x00008b30 0x00008b31 0x00008b32 0x00008b33
#line 68
0x00008b34 0x00008b35 0x00008b36
#line 68
# Dev private ioctl i.e. hardware specific ioctls
#line 68
0x00008be0-0x00008bff
#line 68
};
neverallow isolated_app *:{ netlink_route_socket netlink_selinux_socket } ioctl;
neverallow isolated_app *:{
  socket netlink_socket packet_socket key_socket appletalk_socket
  netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket
  netlink_xfrm_socket netlink_audit_socket netlink_ip6fw_socket
  netlink_dnrt_socket netlink_kobject_uevent_socket tun_socket
  netlink_iscsi_socket netlink_fib_lookup_socket netlink_connector_socket
  netlink_netfilter_socket netlink_generic_socket netlink_scsitransport_socket
  netlink_rdma_socket netlink_crypto_socket
} *;
#line 1 "system/sepolicy/kernel.te"
# Life begins with the kernel.
type kernel, domain, domain_deprecated, mlstrustedsubject;

allow kernel self:capability sys_nice;

# Root fs.
allow kernel rootfs:dir { open getattr read search ioctl lock };
allow kernel rootfs:file { getattr open read ioctl lock };
allow kernel rootfs:lnk_file { getattr open read ioctl lock };

# Get SELinux enforcing status.
allow kernel selinuxfs:dir { open getattr read search ioctl lock };
allow kernel selinuxfs:file { getattr open read ioctl lock };

# Allow init relabel itself.
allow kernel rootfs:file relabelfrom;
allow kernel init_exec:file relabelto;
# TODO: investigate why we need this.
allow kernel init:process share;

# cgroup filesystem initialization prior to setting the cgroup root directory label.
allow kernel unlabeled:dir search;

# Mount usbfs.
allow kernel usbfs:filesystem mount;
allow kernel usbfs:dir search;

# Initial setenforce by init prior to switching to init domain.
# process from turning off SELinux once enabled.

# Write to /proc/1/oom_adj prior to switching to init domain.
allow kernel self:capability sys_resource;

# Init reboot before switching selinux domains under certain error
# conditions. Allow it.
# As part of rebooting, init writes "u" to /proc/sysrq-trigger to
# remount filesystems read-only. /data is not mounted at this point,
# so we could ignore this. For now, we allow it.
allow kernel self:capability sys_boot;
allow kernel proc_sysrq:file { open append write lock };

# Allow writing to /dev/__kmsg__ which was created prior to
# loading policy
allow kernel tmpfs:chr_file write;

# Set checkreqprot by init.rc prior to switching to init domain.
allow kernel selinuxfs:file write;
allow kernel self:security setcheckreqprot;

# MTP sync (b/15835289)
# kernel thread "loop0", used by the loop block device, for ASECs (b/17158723)
allow kernel priv_app:fd use;
allow kernel sdcard_type:file { read write };

# Allow the kernel to read OBB files from app directories. (b/17428116)
# Kernel thread "loop0" reads a vold supplied file descriptor.
# Fixes CTS tests:
#  * android.os.storage.cts.StorageManagerTest#testMountAndUnmountObbNormal
#  * android.os.storage.cts.StorageManagerTest#testMountAndUnmountTwoObbs
allow kernel vold:fd use;
allow kernel app_data_file:file read;
allow kernel asec_image_file:file read;


#line 66
# Allow the necessary permissions.
#line 66

#line 66
# Old domain may exec the file and transition to the new domain.
#line 66
allow kernel init_exec:file { getattr open read execute };
#line 66
allow kernel init:process transition;
#line 66
# New domain is entered by executing the file.
#line 66
allow init init_exec:file { entrypoint open read execute getattr };
#line 66
# New domain can send SIGCHLD to its caller.
#line 66
allow init kernel:process sigchld;
#line 66
# Enable AT_SECURE, i.e. libc secure mode.
#line 66
#line 66
#line 66
allow kernel init:process { siginh rlimitinh };
#line 66

#line 66
# Make the transition occur by default.
#line 66
type_transition kernel init_exec:process init;
#line 66


# Access to /data/media.
# This should be removed if sdcardfs is modified to alter the secontext for its
# accesses to the underlying FS.
allow kernel media_rw_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow kernel media_rw_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

###
### neverallow rules
###

# The initial task starts in the kernel domain (assigned via
# initial_sid_contexts), but nothing ever transitions to it.
neverallow * kernel:process { transition dyntransition };

# The kernel domain is never entered via an exec, nor should it
# ever execute a program outside the rootfs without changing to another domain.
# If you encounter an execute_no_trans denial on the kernel domain, then
# possible causes include:
# - The program is a kernel usermodehelper.  In this case, define a domain
#   for the program and domain_auto_trans() to it.
# - You failed to setcon u:r:init:s0 in your init.rc and thus your init
#   program was left in the kernel domain and is now trying to execute
#   some other program.  Fix your init.rc file.
# - You are running an exploit which switched to the init task credentials
#   and is then trying to exec a shell or other program.  You lose!
neverallow kernel { file_type fs_type -rootfs }:file { entrypoint execute_no_trans };
#line 1 "system/sepolicy/keystore.te"
type keystore, domain, domain_deprecated;
type keystore_exec, exec_type, file_type;

# keystore daemon

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init keystore_exec:file { getattr open read execute };
#line 5
allow init keystore:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow keystore keystore_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow keystore init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init keystore:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init keystore_exec:process keystore;
#line 5

#line 5

#line 5
type keystore_tmpfs, file_type;
#line 5
type_transition keystore tmpfs:file keystore_tmpfs;
#line 5
allow keystore keystore_tmpfs:file { read write };
#line 5

#line 5

typeattribute keystore mlstrustedsubject;

#line 7
# Call the servicemanager and transfer references to it.
#line 7
allow keystore servicemanager:binder { call transfer };
#line 7
# servicemanager performs getpidcon on clients.
#line 7
allow servicemanager keystore:dir search;
#line 7
allow servicemanager keystore:file { read open };
#line 7
allow servicemanager keystore:process getattr;
#line 7
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 7
# all domains in domain.te.
#line 7


#line 8
typeattribute keystore binderservicedomain;
#line 8

allow keystore keystore_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow keystore keystore_data_file:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow keystore keystore_exec:file { getattr };
allow keystore tee_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow keystore tee:unix_stream_socket connectto;

allow keystore keystore_service:service_manager { add find };

# Check SELinux permissions.

#line 18
allow keystore selinuxfs:file { { getattr open read ioctl lock } { open append write lock } };
#line 18
allow keystore kernel:security compute_av;
#line 18
allow keystore self:netlink_selinux_socket { read write create getattr setattr lock relabelfrom relabelto append bind connect listen accept getopt setopt shutdown recvfrom sendto recv_msg send_msg name_bind };
#line 18


###
### Neverallow rules
###
### Protect ourself from others
###

neverallow { domain -keystore } keystore_data_file:dir ~{ open create read getattr setattr search relabelto ioctl };
neverallow { domain -keystore } keystore_data_file:{ file lnk_file sock_file fifo_file } ~{ relabelto getattr };

neverallow { domain -keystore -init } keystore_data_file:dir *;
neverallow { domain -keystore -init } keystore_data_file:{ file lnk_file sock_file fifo_file } *;

neverallow * keystore:process ptrace;
#line 1 "system/sepolicy/lmkd.te"
# lmkd low memory killer daemon
type lmkd, domain, domain_deprecated, mlstrustedsubject;
type lmkd_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init lmkd_exec:file { getattr open read execute };
#line 5
allow init lmkd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow lmkd lmkd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow lmkd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init lmkd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init lmkd_exec:process lmkd;
#line 5

#line 5

#line 5
type lmkd_tmpfs, file_type;
#line 5
type_transition lmkd tmpfs:file lmkd_tmpfs;
#line 5
allow lmkd lmkd_tmpfs:file { read write };
#line 5

#line 5


allow lmkd self:capability { dac_override sys_resource kill };

# lmkd locks itself in memory, to prevent it from being
# swapped out and unable to kill other memory hogs.
# system/core commit b28ff9131363f7b4a698990da5748b2a88c3ed35
# b/16236289
allow lmkd self:capability ipc_lock;

## Open and write to /proc/PID/oom_score_adj
## TODO: maybe scope this down?

#line 17
allow lmkd appdomain:dir { open getattr read search ioctl lock };
#line 17
allow lmkd appdomain:{ file lnk_file } { getattr open read ioctl lock };
#line 17

allow lmkd appdomain:file write;

#line 19
allow lmkd autoplay_app:dir { open getattr read search ioctl lock };
#line 19
allow lmkd autoplay_app:{ file lnk_file } { getattr open read ioctl lock };
#line 19

allow lmkd autoplay_app:file write;

#line 21
allow lmkd system_server:dir { open getattr read search ioctl lock };
#line 21
allow lmkd system_server:{ file lnk_file } { getattr open read ioctl lock };
#line 21

allow lmkd system_server:file write;

## Writes to /sys/module/lowmemorykiller/parameters/minfree

#line 25
allow lmkd sysfs_type:dir { open getattr read search ioctl lock };
#line 25
allow lmkd sysfs_type:{ file lnk_file } { getattr open read ioctl lock };
#line 25

allow lmkd sysfs_lowmemorykiller:file { open append write lock };

# Send kill signals
allow lmkd appdomain:process sigkill;

# Clean up old cgroups
allow lmkd cgroup:dir { remove_name rmdir };

# Set self to SCHED_FIFO
allow lmkd self:capability sys_nice;

### neverallow rules

# never honor LD_PRELOAD
neverallow * lmkd:process noatsecure;
#line 1 "system/sepolicy/logd.te"
# android user-space log manager
type logd, domain, domain_deprecated, mlstrustedsubject;
type logd_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init logd_exec:file { getattr open read execute };
#line 5
allow init logd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow logd logd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow logd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init logd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init logd_exec:process logd;
#line 5

#line 5

#line 5
type logd_tmpfs, file_type;
#line 5
type_transition logd tmpfs:file logd_tmpfs;
#line 5
allow logd logd_tmpfs:file { read write };
#line 5

#line 5


# Read access to pseudo filesystems.

#line 8
allow logd proc:dir { open getattr read search ioctl lock };
#line 8
allow logd proc:{ file lnk_file } { getattr open read ioctl lock };
#line 8


#line 9
allow logd proc_net:dir { open getattr read search ioctl lock };
#line 9
allow logd proc_net:{ file lnk_file } { getattr open read ioctl lock };
#line 9


allow logd self:capability { setuid setgid sys_nice audit_control };
allow logd self:capability2 syslog;
allow logd self:netlink_audit_socket { { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } } nlmsg_write };
allow logd kernel:system syslog_read;
allow logd kmsg_device:chr_file { open append write lock };
allow logd system_data_file:file { getattr open read ioctl lock };
# logpersist is only allowed on userdebug and eng builds

#line 18
  allow logd misc_logd_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 18
  allow logd misc_logd_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
#line 21

allow logd pstorefs:dir search;
allow logd pstorefs:file { getattr open read ioctl lock };

# Set persist.sys. and sys.powerctl

#line 26

#line 26
allow logd property_socket:sock_file write;
#line 26
allow logd init:unix_stream_socket connectto;
#line 26

#line 26
allow logd safemode_prop:property_service set;
#line 26

#line 26
allow logd safemode_prop:file { getattr open read ioctl lock };
#line 26

#line 26


#line 27

#line 27
allow logd property_socket:sock_file write;
#line 27
allow logd init:unix_stream_socket connectto;
#line 27

#line 27
allow logd powerctl_prop:property_service set;
#line 27

#line 27
allow logd powerctl_prop:file { getattr open read ioctl lock };
#line 27

#line 27


# Access device logging gating property

#line 30
allow logd device_logging_prop:file { getattr open read ioctl lock };
#line 30



#line 32
allow logd domain:dir { open getattr read search ioctl lock };
#line 32
allow logd domain:{ file lnk_file } { getattr open read ioctl lock };
#line 32


allow logd kernel:system syslog_mod;


#line 36
# Group AID_LOG checked by filesystem & logd
#line 36
# to permit control commands
#line 36

#line 36

#line 36

#line 36
allow logd logd_socket:sock_file write;
#line 36
allow logd logd:unix_stream_socket connectto;
#line 36

#line 36

#line 36


# case where logpersistd is actually logcat -f in logd context (nee: logcatd)

#line 39
  
#line 39

#line 39

#line 39
allow logd logdr_socket:sock_file write;
#line 39
allow logd logd:unix_stream_socket connectto;
#line 39

#line 39

#line 41


###
### Neverallow rules
###
### logd should NEVER do any of this

# Block device access.
neverallow logd dev_type:blk_file { read write };

# ptrace any other app
neverallow logd domain:process ptrace;

# Write to /system.
neverallow logd system_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;

# Write to files in /data/data or system files on /data
neverallow logd { app_data_file system_data_file }:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;

# logd is not allowed to write anywhere other than /data/misc/logd, and then
# only on userdebug or eng builds
neverallow logd { file_type -logd_tmpfs  -misc_logd_file -coredump_file  }:file { create write append };

# logpersist is only allowed on userdebug/eng builds
neverallow { domain -logd -shell -dumpstate } misc_logd_file:file { { append create link unlink relabelfrom rename setattr write } open read ioctl lock };
neverallow { domain -logd } misc_logd_file:dir { add_name link relabelfrom remove_name rename reparent rmdir write };
neverallow { domain -init } misc_logd_file:dir create;
#line 1 "system/sepolicy/mdnsd.te"
# mdns daemon
type mdnsd, domain, mlstrustedsubject;
type mdnsd_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init mdnsd_exec:file { getattr open read execute };
#line 5
allow init mdnsd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow mdnsd mdnsd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow mdnsd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init mdnsd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init mdnsd_exec:process mdnsd;
#line 5

#line 5

#line 5
type mdnsd_tmpfs, file_type;
#line 5
type_transition mdnsd tmpfs:file mdnsd_tmpfs;
#line 5
allow mdnsd mdnsd_tmpfs:file { read write };
#line 5

#line 5


#line 6
typeattribute mdnsd netdomain;
#line 6


# Read from /proc/net

#line 9
allow mdnsd proc_net:dir { open getattr read search ioctl lock };
#line 9
allow mdnsd proc_net:{ file lnk_file } { getattr open read ioctl lock };
#line 9

#line 1 "system/sepolicy/mediacodec.te"
# mediacodec - audio and video codecs live here
type mediacodec, domain;
type mediacodec_exec, exec_type, file_type;

typeattribute mediacodec mlstrustedsubject;


#line 7

#line 7
# Allow the necessary permissions.
#line 7

#line 7
# Old domain may exec the file and transition to the new domain.
#line 7
allow init mediacodec_exec:file { getattr open read execute };
#line 7
allow init mediacodec:process transition;
#line 7
# New domain is entered by executing the file.
#line 7
allow mediacodec mediacodec_exec:file { entrypoint open read execute getattr };
#line 7
# New domain can send SIGCHLD to its caller.
#line 7
allow mediacodec init:process sigchld;
#line 7
# Enable AT_SECURE, i.e. libc secure mode.
#line 7
#line 7
#line 7
allow init mediacodec:process { siginh rlimitinh };
#line 7

#line 7
# Make the transition occur by default.
#line 7
type_transition init mediacodec_exec:process mediacodec;
#line 7

#line 7

#line 7
type mediacodec_tmpfs, file_type;
#line 7
type_transition mediacodec tmpfs:file mediacodec_tmpfs;
#line 7
allow mediacodec mediacodec_tmpfs:file { read write };
#line 7

#line 7



#line 9
# Call the servicemanager and transfer references to it.
#line 9
allow mediacodec servicemanager:binder { call transfer };
#line 9
# servicemanager performs getpidcon on clients.
#line 9
allow servicemanager mediacodec:dir search;
#line 9
allow servicemanager mediacodec:file { read open };
#line 9
allow servicemanager mediacodec:process getattr;
#line 9
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 9
# all domains in domain.te.
#line 9


#line 10
# Call the server domain and optionally transfer references to it.
#line 10
allow mediacodec binderservicedomain:binder { call transfer };
#line 10
# Allow the serverdomain to transfer references to the client on the reply.
#line 10
allow binderservicedomain mediacodec:binder transfer;
#line 10
# Receive and use open files from the server.
#line 10
allow mediacodec binderservicedomain:fd use;
#line 10


#line 11
# Call the server domain and optionally transfer references to it.
#line 11
allow mediacodec appdomain:binder { call transfer };
#line 11
# Allow the serverdomain to transfer references to the client on the reply.
#line 11
allow appdomain mediacodec:binder transfer;
#line 11
# Receive and use open files from the server.
#line 11
allow mediacodec appdomain:fd use;
#line 11


#line 12
typeattribute mediacodec binderservicedomain;
#line 12


allow mediacodec mediacodec_service:service_manager add;
allow mediacodec surfaceflinger_service:service_manager find;
allow mediacodec gpu_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow mediacodec video_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow mediacodec video_device:dir search;
allow mediacodec ion_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

###
### neverallow rules
###

# mediacodec should never execute any executable without a
# domain transition
neverallow mediacodec { file_type fs_type }:file execute_no_trans;

# mediacodec should never need network access. Disallow network sockets.
neverallow mediacodec domain:{ tcp_socket udp_socket rawip_socket } *;
#line 1 "system/sepolicy/mediadrmserver.te"
# mediadrmserver - mediadrm daemon
type mediadrmserver, domain;
type mediadrmserver_exec, exec_type, file_type;

typeattribute mediadrmserver mlstrustedsubject;


#line 7
typeattribute mediadrmserver netdomain;
#line 7


#line 8

#line 8
# Allow the necessary permissions.
#line 8

#line 8
# Old domain may exec the file and transition to the new domain.
#line 8
allow init mediadrmserver_exec:file { getattr open read execute };
#line 8
allow init mediadrmserver:process transition;
#line 8
# New domain is entered by executing the file.
#line 8
allow mediadrmserver mediadrmserver_exec:file { entrypoint open read execute getattr };
#line 8
# New domain can send SIGCHLD to its caller.
#line 8
allow mediadrmserver init:process sigchld;
#line 8
# Enable AT_SECURE, i.e. libc secure mode.
#line 8
#line 8
#line 8
allow init mediadrmserver:process { siginh rlimitinh };
#line 8

#line 8
# Make the transition occur by default.
#line 8
type_transition init mediadrmserver_exec:process mediadrmserver;
#line 8

#line 8

#line 8
type mediadrmserver_tmpfs, file_type;
#line 8
type_transition mediadrmserver tmpfs:file mediadrmserver_tmpfs;
#line 8
allow mediadrmserver mediadrmserver_tmpfs:file { read write };
#line 8

#line 8



#line 10
# Call the servicemanager and transfer references to it.
#line 10
allow mediadrmserver servicemanager:binder { call transfer };
#line 10
# servicemanager performs getpidcon on clients.
#line 10
allow servicemanager mediadrmserver:dir search;
#line 10
allow servicemanager mediadrmserver:file { read open };
#line 10
allow servicemanager mediadrmserver:process getattr;
#line 10
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 10
# all domains in domain.te.
#line 10


#line 11
# Call the server domain and optionally transfer references to it.
#line 11
allow mediadrmserver binderservicedomain:binder { call transfer };
#line 11
# Allow the serverdomain to transfer references to the client on the reply.
#line 11
allow binderservicedomain mediadrmserver:binder transfer;
#line 11
# Receive and use open files from the server.
#line 11
allow mediadrmserver binderservicedomain:fd use;
#line 11


#line 12
# Call the server domain and optionally transfer references to it.
#line 12
allow mediadrmserver appdomain:binder { call transfer };
#line 12
# Allow the serverdomain to transfer references to the client on the reply.
#line 12
allow appdomain mediadrmserver:binder transfer;
#line 12
# Receive and use open files from the server.
#line 12
allow mediadrmserver appdomain:fd use;
#line 12


#line 13
typeattribute mediadrmserver binderservicedomain;
#line 13


# Required by Widevine DRM (b/22990512)
allow mediadrmserver self:process execmem;

# System file accesses.
allow mediadrmserver system_file:dir { open getattr read search ioctl lock };
allow mediadrmserver system_file:file { getattr open read ioctl lock };
allow mediadrmserver system_file:lnk_file { getattr open read ioctl lock };

# Read files already opened under /data.
allow mediadrmserver system_data_file:dir { search getattr };
allow mediadrmserver system_data_file:file { getattr read };
allow mediadrmserver system_data_file:lnk_file { getattr open read ioctl lock };

# Read access to pseudo filesystems.

#line 29
allow mediadrmserver cgroup:dir { open getattr read search ioctl lock };
#line 29
allow mediadrmserver cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 29

allow mediadrmserver cgroup:dir { search write };
allow mediadrmserver cgroup:file { open append write lock };

# Allow access to ion memory allocation device
allow mediadrmserver ion_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Allow access to app_data and media_data_files
allow mediadrmserver media_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow mediadrmserver media_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow mediadrmserver media_data_file:file { getattr read };

allow mediadrmserver tee_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# XXX Label with a specific type?
allow mediadrmserver sysfs:file { getattr open read ioctl lock };

# Connect to tee service.
allow mediadrmserver tee:unix_stream_socket connectto;

allow mediadrmserver mediadrmserver_service:service_manager { add find };
allow mediadrmserver mediaserver_service:service_manager { add find };
allow mediadrmserver processinfo_service:service_manager find;

# only allow unprivileged socket ioctl commands
allowxperm mediadrmserver self:{ rawip_socket tcp_socket udp_socket }
  ioctl { 
#line 55
{
#line 55
# Socket ioctls for gathering information about the interface
#line 55
0x00008906 0x00008907
#line 55
0x00008910 0x00008912 0x00008913 0x00008915 0x00008917 0x00008919
#line 55
0x0000891b 0x00008921 0x00008933 0x00008938 0x00008942
#line 55
# Wireless extension ioctls. Primarily get functions.
#line 55
0x00008b01 0x00008b05 0x00008b07 0x00008b09 0x00008b0b 0x00008b0d
#line 55
0x00008b0f 0x00008b11 0x00008b12 0x00008b13 0x00008b21 0x00008b23
#line 55
0x00008b25 0x00008b27 0x00008b29 0x00008b2d
#line 55
} { 0x00005411 0x00005451 } };

###
### neverallow rules
###

# mediadrmserver should never execute any executable without a
# domain transition
neverallow mediadrmserver { file_type fs_type }:file execute_no_trans;

# do not allow privileged socket ioctl commands
neverallowxperm mediadrmserver domain:{ rawip_socket tcp_socket udp_socket } ioctl 
#line 66
{
#line 66
# qualcomm rmnet ioctls
#line 66
0x00006900 0x00006902
#line 66
# socket ioctls
#line 66
0x0000890b 0x0000890c 0x0000890d 0x00008911 0x00008914 0x00008916
#line 66
0x00008918 0x0000891a 0x0000891c 0x0000891d 0x0000891e 0x0000891f
#line 66
0x00008920 0x00008922 0x00008923 0x00008924 0x00008925 0x00008926
#line 66
0x00008927 0x00008929 0x00008930 0x00008931 0x00008932
#line 66
0x00008934 0x00008935 0x00008936 0x00008937 0x00008940 0x00008941
#line 66
0x00008943 0x00008946 0x00008947 0x00008948 0x00008949 0x0000894a
#line 66
0x0000894b 0x00008953 0x00008954 0x00008955 0x00008960 0x00008961 0x00008962 0x00008970
#line 66
0x00008971 0x00008980 0x00008981 0x00008982 0x00008983 0x00008990
#line 66
0x00008991 0x00008992 0x00008993 0x00008994
#line 66
0x00008995 0x000089a0 0x000089a1 0x000089a2 0x000089a3 0x000089b0
#line 66
# device and protocol specific ioctls
#line 66
0x000089f0-0x000089ff
#line 66
0x000089e0-0x000089ef
#line 66
# Wireless extension ioctls
#line 66
0x00008b00 0x00008b02 0x00008b04 0x00008b06 0x00008b08 0x00008b0a
#line 66
0x00008b0c 0x00008b0e 0x00008b10 0x00008b14 0x00008b15 0x00008b16 0x00008b17
#line 66
0x00008b18 0x00008b19 0x00008b1a 0x00008b1b 0x00008b1c 0x00008b1d
#line 66
0x00008b20 0x00008b22 0x00008b24 0x00008b26 0x00008b28 0x00008b2a
#line 66
0x00008b2b 0x00008b2c 0x00008b30 0x00008b31 0x00008b32 0x00008b33
#line 66
0x00008b34 0x00008b35 0x00008b36
#line 66
# Dev private ioctl i.e. hardware specific ioctls
#line 66
0x00008be0-0x00008bff
#line 66
};
#line 1 "system/sepolicy/mediaextractor.te"
# mediaextractor - multimedia daemon
type mediaextractor, domain, domain_deprecated;
type mediaextractor_exec, exec_type, file_type;

typeattribute mediaextractor mlstrustedsubject;


#line 7

#line 7
# Allow the necessary permissions.
#line 7

#line 7
# Old domain may exec the file and transition to the new domain.
#line 7
allow init mediaextractor_exec:file { getattr open read execute };
#line 7
allow init mediaextractor:process transition;
#line 7
# New domain is entered by executing the file.
#line 7
allow mediaextractor mediaextractor_exec:file { entrypoint open read execute getattr };
#line 7
# New domain can send SIGCHLD to its caller.
#line 7
allow mediaextractor init:process sigchld;
#line 7
# Enable AT_SECURE, i.e. libc secure mode.
#line 7
#line 7
#line 7
allow init mediaextractor:process { siginh rlimitinh };
#line 7

#line 7
# Make the transition occur by default.
#line 7
type_transition init mediaextractor_exec:process mediaextractor;
#line 7

#line 7

#line 7
type mediaextractor_tmpfs, file_type;
#line 7
type_transition mediaextractor tmpfs:file mediaextractor_tmpfs;
#line 7
allow mediaextractor mediaextractor_tmpfs:file { read write };
#line 7

#line 7



#line 9
# Call the servicemanager and transfer references to it.
#line 9
allow mediaextractor servicemanager:binder { call transfer };
#line 9
# servicemanager performs getpidcon on clients.
#line 9
allow servicemanager mediaextractor:dir search;
#line 9
allow servicemanager mediaextractor:file { read open };
#line 9
allow servicemanager mediaextractor:process getattr;
#line 9
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 9
# all domains in domain.te.
#line 9


#line 10
# Call the server domain and optionally transfer references to it.
#line 10
allow mediaextractor binderservicedomain:binder { call transfer };
#line 10
# Allow the serverdomain to transfer references to the client on the reply.
#line 10
allow binderservicedomain mediaextractor:binder transfer;
#line 10
# Receive and use open files from the server.
#line 10
allow mediaextractor binderservicedomain:fd use;
#line 10


#line 11
# Call the server domain and optionally transfer references to it.
#line 11
allow mediaextractor appdomain:binder { call transfer };
#line 11
# Allow the serverdomain to transfer references to the client on the reply.
#line 11
allow appdomain mediaextractor:binder transfer;
#line 11
# Receive and use open files from the server.
#line 11
allow mediaextractor appdomain:fd use;
#line 11


#line 12
typeattribute mediaextractor binderservicedomain;
#line 12


allow mediaextractor mediaextractor_service:service_manager add;

###
### neverallow rules
###

# mediaextractor should never execute any executable without a
# domain transition
neverallow mediaextractor { file_type fs_type }:file execute_no_trans;

# mediaextractor should never need network access. Disallow network sockets.
neverallow mediaextractor domain:{ tcp_socket udp_socket rawip_socket } *;
#line 1 "system/sepolicy/mediaserver.te"
# mediaserver - multimedia daemon
type mediaserver, domain, domain_deprecated;
type mediaserver_exec, exec_type, file_type;

typeattribute mediaserver mlstrustedsubject;


#line 7
typeattribute mediaserver netdomain;
#line 7


#line 8

#line 8
# Allow the necessary permissions.
#line 8

#line 8
# Old domain may exec the file and transition to the new domain.
#line 8
allow init mediaserver_exec:file { getattr open read execute };
#line 8
allow init mediaserver:process transition;
#line 8
# New domain is entered by executing the file.
#line 8
allow mediaserver mediaserver_exec:file { entrypoint open read execute getattr };
#line 8
# New domain can send SIGCHLD to its caller.
#line 8
allow mediaserver init:process sigchld;
#line 8
# Enable AT_SECURE, i.e. libc secure mode.
#line 8
#line 8
#line 8
allow init mediaserver:process { siginh rlimitinh };
#line 8

#line 8
# Make the transition occur by default.
#line 8
type_transition init mediaserver_exec:process mediaserver;
#line 8

#line 8

#line 8
type mediaserver_tmpfs, file_type;
#line 8
type_transition mediaserver tmpfs:file mediaserver_tmpfs;
#line 8
allow mediaserver mediaserver_tmpfs:file { read write };
#line 8

#line 8



#line 10
allow mediaserver sdcard_type:dir { open getattr read search ioctl lock };
#line 10
allow mediaserver sdcard_type:{ file lnk_file } { getattr open read ioctl lock };
#line 10


# stat /proc/self
allow mediaserver proc:lnk_file getattr;

# open /vendor/lib/mediadrm
allow mediaserver system_file:dir { open getattr read search ioctl lock };


#line 18
  # ptrace to processes in the same domain for memory leak detection
#line 18
  allow mediaserver self:process ptrace;
#line 21



#line 23
# Call the servicemanager and transfer references to it.
#line 23
allow mediaserver servicemanager:binder { call transfer };
#line 23
# servicemanager performs getpidcon on clients.
#line 23
allow servicemanager mediaserver:dir search;
#line 23
allow servicemanager mediaserver:file { read open };
#line 23
allow servicemanager mediaserver:process getattr;
#line 23
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 23
# all domains in domain.te.
#line 23


#line 24
# Call the server domain and optionally transfer references to it.
#line 24
allow mediaserver binderservicedomain:binder { call transfer };
#line 24
# Allow the serverdomain to transfer references to the client on the reply.
#line 24
allow binderservicedomain mediaserver:binder transfer;
#line 24
# Receive and use open files from the server.
#line 24
allow mediaserver binderservicedomain:fd use;
#line 24


#line 25
# Call the server domain and optionally transfer references to it.
#line 25
allow mediaserver { appdomain autoplay_app }:binder { call transfer };
#line 25
# Allow the serverdomain to transfer references to the client on the reply.
#line 25
allow { appdomain autoplay_app } mediaserver:binder transfer;
#line 25
# Receive and use open files from the server.
#line 25
allow mediaserver { appdomain autoplay_app }:fd use;
#line 25


#line 26
typeattribute mediaserver binderservicedomain;
#line 26


allow mediaserver media_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow mediaserver media_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow mediaserver app_data_file:dir search;
allow mediaserver app_data_file:file { { getattr open read ioctl lock } { open append write lock } };
allow mediaserver sdcard_type:file write;
allow mediaserver gpu_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow mediaserver video_device:dir { open getattr read search ioctl lock };
allow mediaserver video_device:chr_file { { getattr open read ioctl lock } { open append write lock } };


#line 37

#line 37
allow mediaserver property_socket:sock_file write;
#line 37
allow mediaserver init:unix_stream_socket connectto;
#line 37

#line 37
allow mediaserver audio_prop:property_service set;
#line 37

#line 37
allow mediaserver audio_prop:file { getattr open read ioctl lock };
#line 37

#line 37


# XXX Label with a specific type?
allow mediaserver sysfs:file { getattr open read ioctl lock };

# Read resources from open apk files passed over Binder.
allow mediaserver apk_data_file:file { read getattr };
allow mediaserver asec_apk_file:file { read getattr };
allow mediaserver ringtone_file:file { read getattr };

# Read /data/data/com.android.providers.telephony files passed over Binder.
allow mediaserver radio_data_file:file { read getattr };

# Use pipes passed over Binder from app domains.
allow mediaserver { appdomain autoplay_app }:fifo_file { getattr read write };

allow mediaserver rpmsg_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Inter System processes communicate over named pipe (FIFO)
allow mediaserver system_server:fifo_file { getattr open read ioctl lock };


#line 58
allow mediaserver media_rw_data_file:dir { open getattr read search ioctl lock };
#line 58
allow mediaserver media_rw_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 58


# Grant access to read files on appfuse.
allow mediaserver app_fuse_file:file { read getattr };

# Read/[write] to /proc/net/xt_qtaguid/ctrl and /dev/xt_qtaguid
allow mediaserver qtaguid_proc:file { { getattr open read ioctl lock } { open append write lock } };
allow mediaserver qtaguid_device:chr_file { getattr open read ioctl lock };

# Allow abstract socket connection
allow mediaserver rild:unix_stream_socket { connectto read write setopt };

# Needed on some devices for playing DRM protected content,
# but seems expected and appropriate for all devices.

#line 72

#line 72

#line 72
allow mediaserver drmserver_socket:sock_file write;
#line 72
allow mediaserver drmserver:unix_stream_socket connectto;
#line 72

#line 72


# Needed on some devices for playing audio on paired BT device,
# but seems appropriate for all devices.

#line 76

#line 76

#line 76
allow mediaserver bluetooth_socket:sock_file write;
#line 76
allow mediaserver bluetooth:unix_stream_socket connectto;
#line 76

#line 76


# Connect to tee service.
allow mediaserver tee:unix_stream_socket connectto;

allow mediaserver activity_service:service_manager find;
allow mediaserver appops_service:service_manager find;
allow mediaserver audioserver_service:service_manager find;
allow mediaserver cameraserver_service:service_manager find;
allow mediaserver batterystats_service:service_manager find;
allow mediaserver drmserver_service:service_manager find;
allow mediaserver mediaextractor_service:service_manager find;
allow mediaserver mediacodec_service:service_manager find;
allow mediaserver mediaserver_service:service_manager { add find };
allow mediaserver media_session_service:service_manager find;
allow mediaserver permission_service:service_manager find;
allow mediaserver power_service:service_manager find;
allow mediaserver processinfo_service:service_manager find;
allow mediaserver scheduling_policy_service:service_manager find;
allow mediaserver surfaceflinger_service:service_manager find;

# /oem access
allow mediaserver oemfs:dir search;
allow mediaserver oemfs:file { getattr open read ioctl lock };


#line 101
  allow drmserver mediaserver:dir search;
#line 101
  allow drmserver mediaserver:file { read open };
#line 101
  allow drmserver mediaserver:process getattr;
#line 101

allow mediaserver drmserver:drmservice {
    consumeRights
    setPlaybackStatus
    openDecryptSession
    closeDecryptSession
    initializeDecryptUnit
    decrypt
    finalizeDecryptUnit
    pread
};

# only allow unprivileged socket ioctl commands
allowxperm mediaserver self:{ rawip_socket tcp_socket udp_socket }
  ioctl { 
#line 115
{
#line 115
# Socket ioctls for gathering information about the interface
#line 115
0x00008906 0x00008907
#line 115
0x00008910 0x00008912 0x00008913 0x00008915 0x00008917 0x00008919
#line 115
0x0000891b 0x00008921 0x00008933 0x00008938 0x00008942
#line 115
# Wireless extension ioctls. Primarily get functions.
#line 115
0x00008b01 0x00008b05 0x00008b07 0x00008b09 0x00008b0b 0x00008b0d
#line 115
0x00008b0f 0x00008b11 0x00008b12 0x00008b13 0x00008b21 0x00008b23
#line 115
0x00008b25 0x00008b27 0x00008b29 0x00008b2d
#line 115
} { 0x00005411 0x00005451 } };

# Access to /data/media.
# This should be removed if sdcardfs is modified to alter the secontext for its
# accesses to the underlying FS.
allow mediaserver media_rw_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow mediaserver media_rw_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Access to /data/preloads
allow mediaserver preloads_data_file:file { getattr read ioctl };

###
### neverallow rules
###

# mediaserver should never execute any executable without a
# domain transition
neverallow mediaserver { file_type fs_type }:file execute_no_trans;

# do not allow privileged socket ioctl commands
neverallowxperm mediaserver domain:{ rawip_socket tcp_socket udp_socket } ioctl 
#line 135
{
#line 135
# qualcomm rmnet ioctls
#line 135
0x00006900 0x00006902
#line 135
# socket ioctls
#line 135
0x0000890b 0x0000890c 0x0000890d 0x00008911 0x00008914 0x00008916
#line 135
0x00008918 0x0000891a 0x0000891c 0x0000891d 0x0000891e 0x0000891f
#line 135
0x00008920 0x00008922 0x00008923 0x00008924 0x00008925 0x00008926
#line 135
0x00008927 0x00008929 0x00008930 0x00008931 0x00008932
#line 135
0x00008934 0x00008935 0x00008936 0x00008937 0x00008940 0x00008941
#line 135
0x00008943 0x00008946 0x00008947 0x00008948 0x00008949 0x0000894a
#line 135
0x0000894b 0x00008953 0x00008954 0x00008955 0x00008960 0x00008961 0x00008962 0x00008970
#line 135
0x00008971 0x00008980 0x00008981 0x00008982 0x00008983 0x00008990
#line 135
0x00008991 0x00008992 0x00008993 0x00008994
#line 135
0x00008995 0x000089a0 0x000089a1 0x000089a2 0x000089a3 0x000089b0
#line 135
# device and protocol specific ioctls
#line 135
0x000089f0-0x000089ff
#line 135
0x000089e0-0x000089ef
#line 135
# Wireless extension ioctls
#line 135
0x00008b00 0x00008b02 0x00008b04 0x00008b06 0x00008b08 0x00008b0a
#line 135
0x00008b0c 0x00008b0e 0x00008b10 0x00008b14 0x00008b15 0x00008b16 0x00008b17
#line 135
0x00008b18 0x00008b19 0x00008b1a 0x00008b1b 0x00008b1c 0x00008b1d
#line 135
0x00008b20 0x00008b22 0x00008b24 0x00008b26 0x00008b28 0x00008b2a
#line 135
0x00008b2b 0x00008b2c 0x00008b30 0x00008b31 0x00008b32 0x00008b33
#line 135
0x00008b34 0x00008b35 0x00008b36
#line 135
# Dev private ioctl i.e. hardware specific ioctls
#line 135
0x00008be0-0x00008bff
#line 135
};
#line 1 "system/sepolicy/mtp.te"
# vpn tunneling protocol manager
type mtp, domain, domain_deprecated;
type mtp_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init mtp_exec:file { getattr open read execute };
#line 5
allow init mtp:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow mtp mtp_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow mtp init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init mtp:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init mtp_exec:process mtp;
#line 5

#line 5

#line 5
type mtp_tmpfs, file_type;
#line 5
type_transition mtp tmpfs:file mtp_tmpfs;
#line 5
allow mtp mtp_tmpfs:file { read write };
#line 5

#line 5


#line 6
typeattribute mtp netdomain;
#line 6


# pptp policy
allow mtp self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow mtp self:capability net_raw;
allow mtp ppp:process signal;
allow mtp vpn_data_file:dir search;
#line 1 "system/sepolicy/net.te"
# Network types
type node, node_type;
type netif, netif_type;
type port, port_type;

# Use network sockets.
allow netdomain self:tcp_socket { create { { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } listen accept } };
allow netdomain self:{ udp_socket rawip_socket } { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
# Connect to ports.
allow netdomain port_type:tcp_socket name_connect;
# Bind to ports.
allow netdomain node_type:{ tcp_socket udp_socket } node_bind;
allow netdomain port_type:udp_socket name_bind;
allow netdomain port_type:tcp_socket name_bind;
# See changes to the routing table.
allow netdomain self:netlink_route_socket { create read getattr write setattr lock append bind connect getopt setopt shutdown nlmsg_read };

# Talks to netd via dnsproxyd socket.

#line 19

#line 19

#line 19
allow netdomain dnsproxyd_socket:sock_file write;
#line 19
allow netdomain netd:unix_stream_socket connectto;
#line 19

#line 19


# Talks to netd via fwmarkd socket.

#line 22

#line 22

#line 22
allow netdomain fwmarkd_socket:sock_file write;
#line 22
allow netdomain netd:unix_stream_socket connectto;
#line 22

#line 22


# Connect to mdnsd via mdnsd socket.

#line 25

#line 25

#line 25
allow netdomain mdnsd_socket:sock_file write;
#line 25
allow netdomain mdnsd:unix_stream_socket connectto;
#line 25

#line 25

#line 1 "system/sepolicy/netd.te"
# network manager
type netd, domain, domain_deprecated, mlstrustedsubject;
type netd_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init netd_exec:file { getattr open read execute };
#line 5
allow init netd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow netd netd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow netd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init netd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init netd_exec:process netd;
#line 5

#line 5

#line 5
type netd_tmpfs, file_type;
#line 5
type_transition netd tmpfs:file netd_tmpfs;
#line 5
allow netd netd_tmpfs:file { read write };
#line 5

#line 5


#line 6
typeattribute netd netdomain;
#line 6


allow netd self:capability { net_admin net_raw kill };
# Note: fsetid is deliberately not included above. fsetid checks are
# triggered by chmod on a directory or file owned by a group other
# than one of the groups assigned to the current process to see if
# the setgid bit should be cleared, regardless of whether the setgid
# bit was even set.  We do not appear to truly need this capability
# for netd to operate.

allow netd self:netlink_kobject_uevent_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow netd self:netlink_route_socket nlmsg_write;
allow netd self:netlink_nflog_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow netd self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow netd self:netlink_tcpdiag_socket { { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } } nlmsg_read nlmsg_write };
allow netd self:netlink_generic_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow netd self:netlink_netfilter_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow netd shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow netd system_file:file { getattr execute execute_no_trans };
allow netd devpts:chr_file { { getattr open read ioctl lock } { open append write lock } };

# For /proc/sys/net/ipv[46]/route/flush.
allow netd proc_net:file write;

# For /sys/modules/bcmdhd/parameters/firmware_path
# XXX Split into its own type.
allow netd sysfs:file write;

# TODO: added to match above sysfs rule. Remove me?
allow netd sysfs_usb:file write;

# Needed to update /data/misc/wifi/hostapd.conf
# TODO: See what we can do to reduce the need for
# these capabilities
allow netd self:capability { dac_override chown fowner };
allow netd wifi_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow netd wifi_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };

# Needed to update /data/misc/net/rt_tables
allow netd net_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow netd net_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };

# Allow netd to spawn hostapd in it's own domain

#line 50
# Allow the necessary permissions.
#line 50

#line 50
# Old domain may exec the file and transition to the new domain.
#line 50
allow netd hostapd_exec:file { getattr open read execute };
#line 50
allow netd hostapd:process transition;
#line 50
# New domain is entered by executing the file.
#line 50
allow hostapd hostapd_exec:file { entrypoint open read execute getattr };
#line 50
# New domain can send SIGCHLD to its caller.
#line 50
allow hostapd netd:process sigchld;
#line 50
# Enable AT_SECURE, i.e. libc secure mode.
#line 50
#line 50
#line 50
allow netd hostapd:process { siginh rlimitinh };
#line 50

#line 50
# Make the transition occur by default.
#line 50
type_transition netd hostapd_exec:process hostapd;
#line 50

allow netd hostapd:process signal;

# Allow netd to spawn dnsmasq in it's own domain

#line 54
# Allow the necessary permissions.
#line 54

#line 54
# Old domain may exec the file and transition to the new domain.
#line 54
allow netd dnsmasq_exec:file { getattr open read execute };
#line 54
allow netd dnsmasq:process transition;
#line 54
# New domain is entered by executing the file.
#line 54
allow dnsmasq dnsmasq_exec:file { entrypoint open read execute getattr };
#line 54
# New domain can send SIGCHLD to its caller.
#line 54
allow dnsmasq netd:process sigchld;
#line 54
# Enable AT_SECURE, i.e. libc secure mode.
#line 54
#line 54
#line 54
allow netd dnsmasq:process { siginh rlimitinh };
#line 54

#line 54
# Make the transition occur by default.
#line 54
type_transition netd dnsmasq_exec:process dnsmasq;
#line 54

allow netd dnsmasq:process signal;

# Allow netd to start clatd in its own domain

#line 58
# Allow the necessary permissions.
#line 58

#line 58
# Old domain may exec the file and transition to the new domain.
#line 58
allow netd clatd_exec:file { getattr open read execute };
#line 58
allow netd clatd:process transition;
#line 58
# New domain is entered by executing the file.
#line 58
allow clatd clatd_exec:file { entrypoint open read execute getattr };
#line 58
# New domain can send SIGCHLD to its caller.
#line 58
allow clatd netd:process sigchld;
#line 58
# Enable AT_SECURE, i.e. libc secure mode.
#line 58
#line 58
#line 58
allow netd clatd:process { siginh rlimitinh };
#line 58

#line 58
# Make the transition occur by default.
#line 58
type_transition netd clatd_exec:process clatd;
#line 58

allow netd clatd:process signal;


#line 61

#line 61
allow netd property_socket:sock_file write;
#line 61
allow netd init:unix_stream_socket connectto;
#line 61

#line 61
allow netd ctl_mdnsd_prop:property_service set;
#line 61

#line 61
allow netd ctl_mdnsd_prop:file { getattr open read ioctl lock };
#line 61

#line 61


# Allow netd to publish a binder service and make binder calls.

#line 64
# Call the servicemanager and transfer references to it.
#line 64
allow netd servicemanager:binder { call transfer };
#line 64
# servicemanager performs getpidcon on clients.
#line 64
allow servicemanager netd:dir search;
#line 64
allow servicemanager netd:file { read open };
#line 64
allow servicemanager netd:process getattr;
#line 64
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 64
# all domains in domain.te.
#line 64

allow netd netd_service:service_manager add;
allow netd dumpstate:fifo_file  { getattr write };

# Allow netd to call into the system server so it can check permissions.
allow netd system_server:binder call;
allow netd permission_service:service_manager find;

# Allow netd to talk to the framework service which collects DNS query metrics.
allow netd dns_listener_service:service_manager find;

# Allow netd to operate on sockets that are passed to it.
allow netd netdomain:{tcp_socket udp_socket rawip_socket dccp_socket tun_socket} {read write getattr setattr getopt setopt};
allow netd netdomain:fd use;


###
### Neverallow rules
###
### netd should NEVER do any of this

# Block device access.
neverallow netd dev_type:blk_file { read write };

# ptrace any other app
neverallow netd { domain }:process ptrace;

# Write to /system.
neverallow netd system_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;

# Write to files in /data/data or system files on /data
neverallow netd { app_data_file system_data_file }:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;

# only system_server and dumpstate may interact with netd over binder
neverallow { domain -system_server -dumpstate } netd_service:service_manager find;
neverallow { domain -system_server -dumpstate } netd:binder call;
neverallow netd { domain -system_server -servicemanager -su }:binder call;
#line 1 "system/sepolicy/nfc.te"
# nfc subsystem
type nfc, domain, domain_deprecated;

#line 3
typeattribute nfc appdomain;
#line 3
# Label ashmem objects with our own unique type.
#line 3

#line 3
type nfc_tmpfs, file_type;
#line 3
type_transition nfc tmpfs:file nfc_tmpfs;
#line 3
allow nfc nfc_tmpfs:file { read write };
#line 3

#line 3
# Map with PROT_EXEC.
#line 3
allow nfc nfc_tmpfs:file execute;
#line 3


#line 4
typeattribute nfc netdomain;
#line 4


#line 5
typeattribute nfc binderservicedomain;
#line 5


# Set NFC properties

#line 8

#line 8
allow nfc property_socket:sock_file write;
#line 8
allow nfc init:unix_stream_socket connectto;
#line 8

#line 8
allow nfc nfc_prop:property_service set;
#line 8

#line 8
allow nfc nfc_prop:file { getattr open read ioctl lock };
#line 8

#line 8


# NFC device access.
allow nfc nfc_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Data file accesses.
allow nfc nfc_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow nfc nfc_data_file:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

allow nfc sysfs_nfc_power_writable:file { { getattr open read ioctl lock } { open append write lock } };
allow nfc sysfs:file write;

# TODO: added to match above sysfs rule. Remove me?
allow nfc sysfs_usb:file write;

# SoundPool loading and playback
allow nfc audioserver_service:service_manager find;
allow nfc drmserver_service:service_manager find;
allow nfc mediacodec_service:service_manager find;
allow nfc mediaextractor_service:service_manager find;
allow nfc mediaserver_service:service_manager find;

allow nfc nfc_service:service_manager { add find };
allow nfc radio_service:service_manager find;
allow nfc surfaceflinger_service:service_manager find;
allow nfc app_api_service:service_manager find;
allow nfc system_api_service:service_manager find;

# already open bugreport file descriptors may be shared with
# the nfc process, from a file in
# /data/data/com.android.shell/files/bugreports/bugreport-*.
allow nfc shell_data_file:file read;
#line 1 "system/sepolicy/otapreopt_chroot.te"
# otapreopt_chroot executable
type otapreopt_chroot, domain;
type otapreopt_chroot_exec, exec_type, file_type;

# Chroot preparation and execution.
# We need to create an unshared mount namespace, and then mount /data.
allow otapreopt_chroot postinstall_file:dir { search mounton };
allow otapreopt_chroot self:capability { sys_admin sys_chroot };

# Allow to transition to postinstall_ota, to run otapreopt in its own sandbox.

#line 11
# Allow the necessary permissions.
#line 11

#line 11
# Old domain may exec the file and transition to the new domain.
#line 11
allow otapreopt_chroot postinstall_file:file { getattr open read execute };
#line 11
allow otapreopt_chroot postinstall_dexopt:process transition;
#line 11
# New domain is entered by executing the file.
#line 11
allow postinstall_dexopt postinstall_file:file { entrypoint open read execute getattr };
#line 11
# New domain can send SIGCHLD to its caller.
#line 11
allow postinstall_dexopt otapreopt_chroot:process sigchld;
#line 11
# Enable AT_SECURE, i.e. libc secure mode.
#line 11
#line 11
#line 11
allow otapreopt_chroot postinstall_dexopt:process { siginh rlimitinh };
#line 11

#line 11
# Make the transition occur by default.
#line 11
type_transition otapreopt_chroot postinstall_file:process postinstall_dexopt;
#line 11


# Allow otapreopt to use file descriptors from installd.
allow otapreopt_chroot installd:fd use;
#line 1 "system/sepolicy/perfprofd.te"
# perfprofd - perf profile collection daemon
type perfprofd_exec, exec_type, file_type;


#line 4

#line 4
  type perfprofd, domain, domain_deprecated, mlstrustedsubject;
#line 4

#line 4
  
#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init perfprofd_exec:file { getattr open read execute };
#line 4
allow init perfprofd:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow perfprofd perfprofd_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow perfprofd init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow init perfprofd:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init perfprofd_exec:process perfprofd;
#line 4

#line 4

#line 4
type perfprofd_tmpfs, file_type;
#line 4
type_transition perfprofd tmpfs:file perfprofd_tmpfs;
#line 4
allow perfprofd perfprofd_tmpfs:file { read write };
#line 4

#line 4

#line 4

#line 4
  # perfprofd needs to control CPU hot-plug in order to avoid kernel
#line 4
  # perfevents problems in cases where CPU goes on/off during measurement;
#line 4
  # this means read access to /sys/devices/system/cpu/possible
#line 4
  # and read/write access to /sys/devices/system/cpu/cpu*/online
#line 4
  allow perfprofd sysfs_devices_system_cpu:file { { getattr open read ioctl lock } { open append write lock } };
#line 4

#line 4
  # perfprofd checks for the existence of and then invokes simpleperf;
#line 4
  # simpleperf retains perfprofd domain after exec
#line 4
  allow perfprofd system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 4

#line 4
  # perfprofd reads a config file from /data/data/com.google.android.gms/files
#line 4
  allow perfprofd app_data_file:file { getattr open read ioctl lock };
#line 4
  allow perfprofd app_data_file:dir search;
#line 4
  allow perfprofd self:capability { dac_override };
#line 4

#line 4
  # perfprofd opens a file for writing in /data/misc/perfprofd
#line 4
  allow perfprofd perfprofd_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 4
  allow perfprofd perfprofd_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
#line 4

#line 4
  # perfprofd uses the system log
#line 4
  
#line 4
allow perfprofd logcat_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 4

#line 4

#line 4

#line 4
allow perfprofd logdr_socket:sock_file write;
#line 4
allow perfprofd logd:unix_stream_socket connectto;
#line 4

#line 4

#line 4
;
#line 4
  
#line 4

#line 4
allow perfprofd logdw_socket:sock_file write;
#line 4
allow perfprofd logd:unix_dgram_socket sendto;
#line 4

#line 4
allow perfprofd pmsg_device:chr_file { open append write lock };
#line 4
;
#line 4

#line 4
  # perfprofd inspects /sys/power/wake_unlock
#line 4
  
#line 4
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 4
allow perfprofd sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 4
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 4
allow perfprofd self:capability2 block_suspend;
#line 4
;
#line 4

#line 4
  # simpleperf uses ioctl() to turn on kernel perf events measurements
#line 4
  allow perfprofd self:capability sys_admin;
#line 4

#line 4
  # simpleperf needs to examine /proc to collect task/thread info
#line 4
  
#line 4
allow perfprofd domain:dir { open getattr read search ioctl lock };
#line 4
allow perfprofd domain:{ file lnk_file } { getattr open read ioctl lock };
#line 4

#line 4

#line 4
  # simpleperf needs to access /proc/<pid>/exec
#line 4
  allow perfprofd self:capability { sys_resource sys_ptrace };
#line 4
  neverallow perfprofd domain:process ptrace;
#line 4

#line 4
  # simpleperf needs open/read any file that turns up in a profile
#line 4
  # to see whether it has a build ID
#line 4
  allow perfprofd exec_type:file { getattr open read ioctl lock };
#line 4

#line 4
  # simpleperf examines debugfs on startup to collect tracepoint event types
#line 4
  allow perfprofd debugfs_tracing:file { getattr open read ioctl lock };
#line 4

#line 4
  # simpleperf is going to execute "sleep"
#line 4
  allow perfprofd toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 4

#line 4
  # needed for simpleperf on some kernels
#line 4
  allow perfprofd self:capability ipc_lock;
#line 4

#line 59

#line 1 "system/sepolicy/platform_app.te"
###
### Apps signed with the platform key.
###

type platform_app, domain, domain_deprecated;

#line 6
typeattribute platform_app appdomain;
#line 6
# Label ashmem objects with our own unique type.
#line 6

#line 6
type platform_app_tmpfs, file_type;
#line 6
type_transition platform_app tmpfs:file platform_app_tmpfs;
#line 6
allow platform_app platform_app_tmpfs:file { read write };
#line 6

#line 6
# Map with PROT_EXEC.
#line 6
allow platform_app platform_app_tmpfs:file execute;
#line 6

# Access the network.

#line 8
typeattribute platform_app netdomain;
#line 8

# Access bluetooth.

#line 10
typeattribute platform_app bluetoothdomain;
#line 10

# Read from /data/local/tmp or /data/data/com.android.shell.
allow platform_app shell_data_file:dir search;
allow platform_app shell_data_file:file { open getattr read };
allow platform_app icon_file:file { open getattr read };
# Populate /data/app/vmdl*.tmp, /data/app-private/vmdl*.tmp files
# created by system server.
allow platform_app { apk_tmp_file apk_private_tmp_file }:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow platform_app { apk_tmp_file apk_private_tmp_file }:file { { getattr open read ioctl lock } { open append write lock } };
allow platform_app apk_private_data_file:dir search;
# ASEC
allow platform_app asec_apk_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow platform_app asec_apk_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Access to /data/media.
allow platform_app media_rw_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow platform_app media_rw_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Write to /cache.
allow platform_app { cache_file cache_recovery_file }:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow platform_app { cache_file cache_recovery_file }:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Likely not needed
auditallow platform_app cache_recovery_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
auditallow platform_app cache_recovery_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Direct access to vold-mounted storage under /mnt/media_rw
# This is a performance optimization that allows platform apps to bypass the FUSE layer
allow platform_app mnt_media_rw_file:dir { open getattr read search ioctl lock };
allow platform_app vfat:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow platform_app vfat:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

allow platform_app audioserver_service:service_manager find;
allow platform_app cameraserver_service:service_manager find;
allow platform_app drmserver_service:service_manager find;
allow platform_app mediaserver_service:service_manager find;
allow platform_app mediaextractor_service:service_manager find;
allow platform_app mediacodec_service:service_manager find;
allow platform_app persistent_data_block_service:service_manager find;
allow platform_app radio_service:service_manager find;
allow platform_app surfaceflinger_service:service_manager find;
allow platform_app app_api_service:service_manager find;
allow platform_app system_api_service:service_manager find;
allow platform_app vr_manager_service:service_manager find;

# Access to /data/preloads
allow platform_app preloads_data_file:file { getattr open read ioctl lock };
allow platform_app preloads_data_file:dir { open getattr read search ioctl lock };
#line 1 "system/sepolicy/postinstall.te"
# Domain where the postinstall program runs during the update.
# Extend the permissions in this domain to allow this program to access other
# files needed by the specific device on your device's sepolicy directory.
type postinstall, domain;

# Allow postinstall to write to its stdout/stderr when redirected via pipes to
# update_engine.
allow postinstall update_engine:fd use;
allow postinstall update_engine:fifo_file { { getattr open read ioctl lock } { open append write lock } };

# Allow postinstall to read and execute directories and files in the same
# mounted location.
allow postinstall postinstall_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow postinstall postinstall_file:lnk_file { getattr open read ioctl lock };
allow postinstall postinstall_file:dir { open getattr read search ioctl lock };

# Allow postinstall to execute the shell or other system executables.
allow postinstall shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow postinstall system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow postinstall toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# No domain other than update_engine should transition to postinstall, as it is
# only meant to run during the update.
neverallow { domain -update_engine } postinstall:process { transition dyntransition };

#
# For OTA dexopt.
#

# Allow postinstall scripts to talk to the system server.

#line 31
# Call the servicemanager and transfer references to it.
#line 31
allow postinstall servicemanager:binder { call transfer };
#line 31
# servicemanager performs getpidcon on clients.
#line 31
allow servicemanager postinstall:dir search;
#line 31
allow servicemanager postinstall:file { read open };
#line 31
allow servicemanager postinstall:process getattr;
#line 31
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 31
# all domains in domain.te.
#line 31


#line 32
# Call the server domain and optionally transfer references to it.
#line 32
allow postinstall system_server:binder { call transfer };
#line 32
# Allow the serverdomain to transfer references to the client on the reply.
#line 32
allow system_server postinstall:binder transfer;
#line 32
# Receive and use open files from the server.
#line 32
allow postinstall system_server:fd use;
#line 32


# Need to talk to the otadexopt service.
allow postinstall otadexopt_service:service_manager find;# Domain for the otapreopt executable, running under postinstall_dexopt
#line 2 "system/sepolicy/postinstall_dexopt.te"
#
# Note: otapreopt is a driver for dex2oat, and reuses parts of installd. As such,
# this is derived and adapted from installd.te.

type postinstall_dexopt, domain;

# init_daemon_domain(otapreopt)
allow postinstall_dexopt self:capability { chown dac_override fowner setgid setuid };

allow postinstall_dexopt postinstall_file:dir getattr;
allow postinstall_dexopt proc:file { getattr open read };
allow postinstall_dexopt tmpfs:file read;

# Note: /data/ota is created by init (see system/core/rootdir/init.rc) to avoid giving access
# here and having to relabel the directory.

# Read app data (APKs) as input to dex2oat.

#line 19
allow postinstall_dexopt apk_data_file:dir { open getattr read search ioctl lock };
#line 19
allow postinstall_dexopt apk_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 19

# Access to app oat directory.

#line 21
allow postinstall_dexopt dalvikcache_data_file:dir { open getattr read search ioctl lock };
#line 21
allow postinstall_dexopt dalvikcache_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 21


# Read profile data.
allow postinstall_dexopt user_profile_data_file:dir { getattr search };
allow postinstall_dexopt user_profile_data_file:file { getattr open read ioctl lock };

# Write to /data/ota(/*). Create symlinks in /data/ota(/*)
allow postinstall_dexopt ota_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow postinstall_dexopt ota_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow postinstall_dexopt ota_data_file:lnk_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Need to write .b files, which are dalvikcache_data_file, not ota_data_file.
# TODO: See whether we can apply ota_data_file?
allow postinstall_dexopt dalvikcache_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow postinstall_dexopt dalvikcache_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Allow labeling of files under /data/app/com.example/oat/
# TODO: Restrict to .b suffix?
allow postinstall_dexopt dalvikcache_data_file:dir relabelto;
allow postinstall_dexopt dalvikcache_data_file:file { relabelto link };

allow postinstall_dexopt selinuxfs:dir { open getattr read search ioctl lock };

# Check validity of SELinux context before use.

#line 45
allow postinstall_dexopt selinuxfs:file { { getattr open read ioctl lock } { open append write lock } };
#line 45
allow postinstall_dexopt kernel:security check_context;
#line 45


#line 46
allow postinstall_dexopt selinuxfs:file { { getattr open read ioctl lock } { open append write lock } };
#line 46
allow postinstall_dexopt kernel:security compute_av;
#line 46
allow postinstall_dexopt self:netlink_selinux_socket { read write create getattr setattr lock relabelfrom relabelto append bind connect listen accept getopt setopt shutdown recvfrom sendto recv_msg send_msg name_bind };
#line 46


# Run dex2oat/patchoat in its own sandbox.
# We have to manually transition, as we don't have an entrypoint.

#line 50
# Allow the necessary permissions.
#line 50

#line 50
# Old domain may exec the file and transition to the new domain.
#line 50
allow postinstall_dexopt postinstall_file:file { getattr open read execute };
#line 50
allow postinstall_dexopt dex2oat:process transition;
#line 50
# New domain is entered by executing the file.
#line 50
allow dex2oat postinstall_file:file { entrypoint open read execute getattr };
#line 50
# New domain can send SIGCHLD to its caller.
#line 50
allow dex2oat postinstall_dexopt:process sigchld;
#line 50
# Enable AT_SECURE, i.e. libc secure mode.
#line 50
#line 50
#line 50
allow postinstall_dexopt dex2oat:process { siginh rlimitinh };
#line 50

#line 50
# Make the transition occur by default.
#line 50
type_transition postinstall_dexopt postinstall_file:process dex2oat;
#line 50


# installd wants to know about our child.
allow postinstall_dexopt installd:process sigchld;

# Allow otapreopt to use file descriptors from otapreopt_chroot.
# TODO: Probably we can actually close file descriptors...
allow postinstall_dexopt otapreopt_chroot:fd use;
#line 1 "system/sepolicy/ppp.te"
# Point to Point Protocol daemon
type ppp, domain, domain_deprecated;
type ppp_device, dev_type;
type ppp_exec, exec_type, file_type;

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow mtp ppp_exec:file { getattr open read execute };
#line 5
allow mtp ppp:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow ppp ppp_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow ppp mtp:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow mtp ppp:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition mtp ppp_exec:process ppp;
#line 5



#line 7
typeattribute ppp netdomain;
#line 7


allow ppp mtp:socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };
allow ppp mtp:unix_dgram_socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };
allow ppp ppp_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow ppp self:capability net_admin;
allow ppp system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow ppp vpn_data_file:dir { open search write add_name remove_name lock };
allow ppp vpn_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow ppp mtp:fd use;
#line 1 "system/sepolicy/priv_app.te"
###
### A domain for further sandboxing privileged apps.
###
type priv_app, domain, domain_deprecated;

#line 5
typeattribute priv_app appdomain;
#line 5
# Label ashmem objects with our own unique type.
#line 5

#line 5
type priv_app_tmpfs, file_type;
#line 5
type_transition priv_app tmpfs:file priv_app_tmpfs;
#line 5
allow priv_app priv_app_tmpfs:file { read write };
#line 5

#line 5
# Map with PROT_EXEC.
#line 5
allow priv_app priv_app_tmpfs:file execute;
#line 5

# Access the network.

#line 7
typeattribute priv_app netdomain;
#line 7

# Access bluetooth.

#line 9
typeattribute priv_app bluetoothdomain;
#line 9


# webview crash handling depends on self ptrace (b/27697529, b/20150694, b/19277529#comment7)
allow priv_app self:process ptrace;

# Some apps ship with shared libraries and binaries that they write out
# to their sandbox directory and then execute.
allow priv_app app_data_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# android.process.media uses /dev/mtp_usb
allow priv_app mtp_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Allow the allocation and use of ptys
# Used by: https://play.privileged.com/store/apps/details?id=jackpal.androidterm

#line 23
# Each domain gets a unique devpts type.
#line 23
type priv_app_devpts, fs_type;
#line 23
# Label the pty with the unique type when created.
#line 23
type_transition priv_app devpts:chr_file priv_app_devpts;
#line 23
# Allow use of the pty after creation.
#line 23
allow priv_app priv_app_devpts:chr_file { open getattr read write ioctl };
#line 23
# Note: devpts:dir search and ptmx_device:chr_file rw_file_perms
#line 23
# allowed to everyone via domain.te.
#line 23


allow priv_app audioserver_service:service_manager find;
allow priv_app cameraserver_service:service_manager find;
allow priv_app drmserver_service:service_manager find;
allow priv_app mediacodec_service:service_manager find;
allow priv_app mediadrmserver_service:service_manager find;
allow priv_app mediaextractor_service:service_manager find;
allow priv_app mediaserver_service:service_manager find;
allow priv_app nfc_service:service_manager find;
allow priv_app radio_service:service_manager find;
allow priv_app surfaceflinger_service:service_manager find;
allow priv_app app_api_service:service_manager find;
allow priv_app system_api_service:service_manager find;
allow priv_app persistent_data_block_service:service_manager find;
allow priv_app recovery_service:service_manager find;

# Traverse into /mnt/media_rw for bypassing FUSE daemon
# TODO: narrow this to just MediaProvider
allow priv_app mnt_media_rw_file:dir search;

# Write to /cache.
allow priv_app { cache_file cache_recovery_file }:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow priv_app { cache_file cache_recovery_file }:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Access to /data/media.
allow priv_app media_rw_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow priv_app media_rw_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Used by Finsky / Android "Verify Apps" functionality when
# running "adb install foo.apk".
allow priv_app shell_data_file:file { getattr open read ioctl lock };
allow priv_app shell_data_file:dir { open getattr read search ioctl lock };

# Allow verifier to access staged apks.
allow priv_app { apk_tmp_file apk_private_tmp_file }:dir { open getattr read search ioctl lock };
allow priv_app { apk_tmp_file apk_private_tmp_file }:file { getattr open read ioctl lock };

# b/18504118: Allow reads from /data/anr/traces.txt
allow priv_app anr_data_file:file { getattr open read ioctl lock };

# Allow GMS core to access perfprofd output, which is stored
# in /data/misc/perfprofd/. GMS core will need to list all
# data stored in that directory to process them one by one.

#line 67
  allow priv_app perfprofd_data_file:file { getattr open read ioctl lock };
#line 67
  allow priv_app perfprofd_data_file:dir { open getattr read search ioctl lock };
#line 70


# Allow GMS core to scan executables on the system partition
allow priv_app exec_type:file { getattr read open };

# For AppFuse.
allow priv_app vold:fd use;
allow priv_app fuse_device:chr_file { read write };
allow priv_app app_fuse_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow priv_app app_fuse_file:file { { getattr open read ioctl lock } { open append write lock } };

# /sys access
allow priv_app sysfs_zram:dir search;
allow priv_app sysfs_zram:file { getattr open read ioctl lock };

# access the mac address
allowxperm priv_app self:udp_socket ioctl 0x00008927;

# Allow GMS core to communicate with update_engine for A/B update.

#line 89
# Call the server domain and optionally transfer references to it.
#line 89
allow priv_app update_engine:binder { call transfer };
#line 89
# Allow the serverdomain to transfer references to the client on the reply.
#line 89
allow update_engine priv_app:binder transfer;
#line 89
# Receive and use open files from the server.
#line 89
allow priv_app update_engine:fd use;
#line 89

allow priv_app update_engine_service:service_manager find;

# Allow Phone to read/write cached ringtones (opened by system).
allow priv_app ringtone_file:file { getattr read write };

# Access to /data/preloads
allow priv_app preloads_data_file:file { getattr open read ioctl lock };
allow priv_app preloads_data_file:dir { open getattr read search ioctl lock };

###
### neverallow rules
###

# Receive or send uevent messages.
neverallow priv_app domain:netlink_kobject_uevent_socket *;

# Receive or send generic netlink messages
neverallow priv_app domain:netlink_socket *;

# Too much leaky information in debugfs. It's a security
# best practice to ensure these files aren't readable.
neverallow priv_app debugfs:file read;

# Do not allow privileged apps to register services.
# Only trusted components of Android should be registering
# services.
neverallow priv_app service_manager_type:service_manager add;

# Do not allow privileged apps to connect to the property service
# or set properties. b/10243159
neverallow priv_app property_socket:sock_file write;
neverallow priv_app init:unix_stream_socket connectto;
neverallow priv_app property_type:property_service set;

# Do not allow priv_app to be assigned mlstrustedsubject.
# This would undermine the per-user isolation model being
# enforced via levelFrom=user in seapp_contexts and the mls
# constraints.  As there is no direct way to specify a neverallow
# on attribute assignment, this relies on the fact that fork
# permission only makes sense within a domain (hence should
# never be granted to any other domain within mlstrustedsubject)
# and priv_app is allowed fork permission to itself.
neverallow priv_app mlstrustedsubject:process fork;

# Do not allow priv_app to hard link to any files.
# In particular, if priv_app links to other app data
# files, installd will not be able to guarantee the deletion
# of the linked to file. Hard links also contribute to security
# bugs, so we want to ensure priv_app never has this
# capability.
neverallow priv_app file_type:file link;
#line 1 "system/sepolicy/profman.te"
# profman
type profman, domain;
type profman_exec, exec_type, file_type;

allow profman user_profile_data_file:file { getattr read write lock };

# Dumping profile info opens the application APK file for pretty printing.
allow profman asec_apk_file:file { read };
allow profman apk_data_file:file { read };
allow profman oemfs:file { read };
# Reading an APK opens a ZipArchive, which unpack to tmpfs.
allow profman tmpfs:file { read };
allow profman profman_dump_data_file:file { write };

allow profman installd:fd use;

neverallow profman app_data_file:{ file lnk_file sock_file fifo_file } open;
#line 1 "system/sepolicy/property.te"
type default_prop, property_type, core_property_type;
type shell_prop, property_type, core_property_type;
type debug_prop, property_type, core_property_type;
type dumpstate_prop, property_type, core_property_type;
type persist_debug_prop, property_type, core_property_type;
type debuggerd_prop, property_type, core_property_type;
type dhcp_prop, property_type, core_property_type;
type fingerprint_prop, property_type, core_property_type;
type ffs_prop, property_type, core_property_type;
type radio_prop, property_type, core_property_type;
type net_radio_prop, property_type, core_property_type;
type system_radio_prop, property_type, core_property_type;
type system_prop, property_type, core_property_type;
type vold_prop, property_type, core_property_type;
type wifi_log_prop, property_type, log_property_type;
type ctl_bootanim_prop, property_type;
type ctl_default_prop, property_type;
type ctl_dumpstate_prop, property_type;
type ctl_fuse_prop, property_type;
type ctl_mdnsd_prop, property_type;
type ctl_rildaemon_prop, property_type;
type ctl_bugreport_prop, property_type;
type ctl_console_prop, property_type;
type audio_prop, property_type, core_property_type;
type log_prop, property_type, log_property_type;
type log_tag_prop, property_type, log_property_type;
type logd_prop, property_type, core_property_type;
type mmc_prop, property_type;
type restorecon_prop, property_type, core_property_type;
type security_prop, property_type, core_property_type;
type bluetooth_prop, property_type, core_property_type;
type pan_result_prop, property_type, core_property_type;
type powerctl_prop, property_type, core_property_type;
type nfc_prop, property_type, core_property_type;
type dalvik_prop, property_type, core_property_type;
type config_prop, property_type, core_property_type;
type device_logging_prop, property_type;
type safemode_prop, property_type;

allow property_type tmpfs:filesystem associate;
#line 1 "system/sepolicy/racoon.te"
# IKE key management daemon
type racoon, domain, domain_deprecated;
type racoon_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init racoon_exec:file { getattr open read execute };
#line 5
allow init racoon:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow racoon racoon_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow racoon init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init racoon:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init racoon_exec:process racoon;
#line 5

#line 5

#line 5
type racoon_tmpfs, file_type;
#line 5
type_transition racoon tmpfs:file racoon_tmpfs;
#line 5
allow racoon racoon_tmpfs:file { read write };
#line 5

#line 5

typeattribute racoon mlstrustedsubject;


#line 8
typeattribute racoon netdomain;
#line 8



#line 10
# Call the servicemanager and transfer references to it.
#line 10
allow racoon servicemanager:binder { call transfer };
#line 10
# servicemanager performs getpidcon on clients.
#line 10
allow servicemanager racoon:dir search;
#line 10
allow servicemanager racoon:file { read open };
#line 10
allow servicemanager racoon:process getattr;
#line 10
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 10
# all domains in domain.te.
#line 10


allow racoon tun_device:chr_file { getattr open read ioctl lock };
allow racoon cgroup:dir { add_name create };
allow racoon kernel:system module_request;

allow racoon self:key_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow racoon self:tun_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow racoon self:capability { net_admin net_bind_service net_raw setuid };

# XXX: should we give ip-up-vpn its own label (currently racoon domain)
allow racoon system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow racoon vpn_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow racoon vpn_data_file:dir { open search write add_name remove_name lock };


#line 25
  allow keystore racoon:dir search;
#line 25
  allow keystore racoon:file { read open };
#line 25
  allow keystore racoon:process getattr;
#line 25
  allow racoon keystore_service:service_manager find;
#line 25
  
#line 25
# Call the server domain and optionally transfer references to it.
#line 25
allow racoon keystore:binder { call transfer };
#line 25
# Allow the serverdomain to transfer references to the client on the reply.
#line 25
allow keystore racoon:binder transfer;
#line 25
# Receive and use open files from the server.
#line 25
allow racoon keystore:fd use;
#line 25

#line 25


# Racoon (VPN) has a restricted set of permissions from the default.
allow racoon keystore:keystore_key {
	get
	sign
	verify
};
#line 1 "system/sepolicy/radio.te"
# phone subsystem
type radio, domain, domain_deprecated, mlstrustedsubject;

#line 3
typeattribute radio appdomain;
#line 3
# Label ashmem objects with our own unique type.
#line 3

#line 3
type radio_tmpfs, file_type;
#line 3
type_transition radio tmpfs:file radio_tmpfs;
#line 3
allow radio radio_tmpfs:file { read write };
#line 3

#line 3
# Map with PROT_EXEC.
#line 3
allow radio radio_tmpfs:file execute;
#line 3


#line 4
typeattribute radio netdomain;
#line 4


#line 5
typeattribute radio bluetoothdomain;
#line 5


#line 6
typeattribute radio binderservicedomain;
#line 6


# Talks to rild via the rild socket.

#line 9

#line 9

#line 9
allow radio rild_socket:sock_file write;
#line 9
allow radio rild:unix_stream_socket connectto;
#line 9

#line 9


# Data file accesses.
allow radio radio_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow radio radio_data_file:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

allow radio alarm_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

allow radio net_data_file:dir search;
allow radio net_data_file:file { getattr open read ioctl lock };

# Property service

#line 21

#line 21
allow radio property_socket:sock_file write;
#line 21
allow radio init:unix_stream_socket connectto;
#line 21

#line 21
allow radio radio_prop:property_service set;
#line 21

#line 21
allow radio radio_prop:file { getattr open read ioctl lock };
#line 21

#line 21


#line 22

#line 22
allow radio property_socket:sock_file write;
#line 22
allow radio init:unix_stream_socket connectto;
#line 22

#line 22
allow radio system_radio_prop:property_service set;
#line 22

#line 22
allow radio system_radio_prop:file { getattr open read ioctl lock };
#line 22

#line 22


#line 23

#line 23
allow radio property_socket:sock_file write;
#line 23
allow radio init:unix_stream_socket connectto;
#line 23

#line 23
allow radio net_radio_prop:property_service set;
#line 23

#line 23
allow radio net_radio_prop:file { getattr open read ioctl lock };
#line 23

#line 23

auditallow radio net_radio_prop:property_service set;
auditallow radio system_radio_prop:property_service set;

# ctl interface

#line 28

#line 28
allow radio property_socket:sock_file write;
#line 28
allow radio init:unix_stream_socket connectto;
#line 28

#line 28
allow radio ctl_rildaemon_prop:property_service set;
#line 28

#line 28
allow radio ctl_rildaemon_prop:file { getattr open read ioctl lock };
#line 28

#line 28


allow radio audioserver_service:service_manager find;
allow radio cameraserver_service:service_manager find;
allow radio drmserver_service:service_manager find;
allow radio mediaserver_service:service_manager find;
allow radio nfc_service:service_manager find;
allow radio radio_service:service_manager { add find };
allow radio surfaceflinger_service:service_manager find;
allow radio app_api_service:service_manager find;
allow radio system_api_service:service_manager find;
#line 1 "system/sepolicy/recovery.te"
# recovery console (used in recovery init.rc for /sbin/recovery)

# Declare the domain unconditionally so we can always reference it
# in neverallow rules.
type recovery, domain, domain_deprecated;

# But the allow rules are only included in the recovery policy.
# Otherwise recovery is only allowed the domain rules.
#line 104


###
### neverallow rules
###

# Recovery should never touch /data.
#
# In particular, if /data is encrypted, it is not accessible
# to recovery anyway.
#
# For now, we only enforce write/execute restrictions, as domain.te
# contains a number of read-only rules that apply to all
# domains, including recovery.
#
# TODO: tighten this up further.
neverallow recovery data_file_type:file { { append create link unlink relabelfrom rename setattr write } { execute execute_no_trans } };
neverallow recovery data_file_type:dir { add_name create link relabelfrom remove_name rename reparent rmdir setattr write };
#line 1 "system/sepolicy/recovery_persist.te"
# android recovery persistent log manager
type recovery_persist, domain;
type recovery_persist_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init recovery_persist_exec:file { getattr open read execute };
#line 5
allow init recovery_persist:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow recovery_persist recovery_persist_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow recovery_persist init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init recovery_persist:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init recovery_persist_exec:process recovery_persist;
#line 5

#line 5

#line 5
type recovery_persist_tmpfs, file_type;
#line 5
type_transition recovery_persist tmpfs:file recovery_persist_tmpfs;
#line 5
allow recovery_persist recovery_persist_tmpfs:file { read write };
#line 5

#line 5


allow recovery_persist pstorefs:dir search;
allow recovery_persist pstorefs:file { getattr open read ioctl lock };

allow recovery_persist recovery_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow recovery_persist recovery_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };

###
### Neverallow rules
###
### recovery_persist should NEVER do any of this

# Block device access.
neverallow recovery_persist dev_type:blk_file { read write };

# ptrace any other app
neverallow recovery_persist domain:process ptrace;

# Write to /system.
neverallow recovery_persist system_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;

# Write to files in /data/data
neverallow recovery_persist { app_data_file system_data_file }:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;

# recovery_persist is not allowed to write anywhere other than recovery_data_file
neverallow recovery_persist { file_type -recovery_data_file -recovery_persist_tmpfs -coredump_file }:file write;
#line 1 "system/sepolicy/recovery_refresh.te"
# android recovery refresh log manager
type recovery_refresh, domain;
type recovery_refresh_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init recovery_refresh_exec:file { getattr open read execute };
#line 5
allow init recovery_refresh:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow recovery_refresh recovery_refresh_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow recovery_refresh init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init recovery_refresh:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init recovery_refresh_exec:process recovery_refresh;
#line 5

#line 5

#line 5
type recovery_refresh_tmpfs, file_type;
#line 5
type_transition recovery_refresh tmpfs:file recovery_refresh_tmpfs;
#line 5
allow recovery_refresh recovery_refresh_tmpfs:file { read write };
#line 5

#line 5


allow recovery_refresh pstorefs:dir search;
allow recovery_refresh pstorefs:file { getattr open read ioctl lock };
# NB: domain inherits write_logd which hands us write to pmsg_device

###
### Neverallow rules
###
### recovery_refresh should NEVER do any of this

# Block device access.
neverallow recovery_refresh dev_type:blk_file { read write };

# ptrace any other app
neverallow recovery_refresh domain:process ptrace;

# Write to /system.
neverallow recovery_refresh system_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;

# Write to files in /data/data or system files on /data
neverallow recovery_refresh { app_data_file system_data_file }:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;

# recovery_refresh is not allowed to write anywhere
neverallow recovery_refresh { file_type -recovery_refresh_tmpfs -coredump_file }:file write;
#line 1 "system/sepolicy/rild.te"
# rild - radio interface layer daemon
type rild, domain, domain_deprecated;
type rild_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init rild_exec:file { getattr open read execute };
#line 5
allow init rild:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow rild rild_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow rild init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init rild:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init rild_exec:process rild;
#line 5

#line 5

#line 5
type rild_tmpfs, file_type;
#line 5
type_transition rild tmpfs:file rild_tmpfs;
#line 5
allow rild rild_tmpfs:file { read write };
#line 5

#line 5


#line 6
typeattribute rild netdomain;
#line 6

allow rild self:netlink_route_socket nlmsg_write;
allow rild kernel:system module_request;
allow rild self:capability { setuid net_admin net_raw };
allow rild alarm_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow rild cgroup:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow rild radio_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow rild radio_device:blk_file { getattr open read ioctl lock };
allow rild mtd_device:dir search;
allow rild efs_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow rild efs_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow rild shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow rild bluetooth_efs_file:file { getattr open read ioctl lock };
allow rild bluetooth_efs_file:dir { open getattr read search ioctl lock };
allow rild radio_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow rild radio_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow rild sdcard_type:dir { open getattr read search ioctl lock };
allow rild system_data_file:dir { open getattr read search ioctl lock };
allow rild system_data_file:file { getattr open read ioctl lock };
allow rild system_file:file { getattr execute execute_no_trans };

# property service

#line 28

#line 28
allow rild property_socket:sock_file write;
#line 28
allow rild init:unix_stream_socket connectto;
#line 28

#line 28
allow rild radio_prop:property_service set;
#line 28

#line 28
allow rild radio_prop:file { getattr open read ioctl lock };
#line 28

#line 28


#line 29

#line 29
allow rild property_socket:sock_file write;
#line 29
allow rild init:unix_stream_socket connectto;
#line 29

#line 29
allow rild net_radio_prop:property_service set;
#line 29

#line 29
allow rild net_radio_prop:file { getattr open read ioctl lock };
#line 29

#line 29


#line 30

#line 30
allow rild property_socket:sock_file write;
#line 30
allow rild init:unix_stream_socket connectto;
#line 30

#line 30
allow rild system_radio_prop:property_service set;
#line 30

#line 30
allow rild system_radio_prop:file { getattr open read ioctl lock };
#line 30

#line 30

auditallow rild net_radio_prop:property_service set;
auditallow rild system_radio_prop:property_service set;

# Read/Write to uart driver (for GPS)
allow rild gps_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

allow rild tty_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Allow rild to create and use netlink sockets.
allow rild self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow rild self:netlink_generic_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow rild self:netlink_kobject_uevent_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

# Access to wake locks

#line 45
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 45
allow rild sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 45
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 45
allow rild self:capability2 block_suspend;
#line 45


allow rild self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
#line 1 "system/sepolicy/runas.te"
type runas, domain, domain_deprecated, mlstrustedsubject;
type runas_exec, exec_type, file_type;

# ndk-gdb invokes adb shell run-as.

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow shell runas_exec:file { getattr open read execute };
#line 5
allow shell runas:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow runas runas_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow runas shell:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow shell runas:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition shell runas_exec:process runas;
#line 5

allow runas adbd:process sigchld;
allow runas shell:fd use;
allow runas shell:fifo_file { read write };
allow runas devpts:chr_file { read write ioctl };
allow runas shell_data_file:file { read write };

# run-as reads package information.
allow runas system_data_file:file { getattr open read ioctl lock };

# run-as checks and changes to the app data dir.
allow runas app_data_file:dir { getattr search };

# run-as switches to the app UID/GID.
allow runas self:capability { setuid setgid };

# run-as switches to the app security context.
# read /seapp_contexts and /data/security/seapp_contexts

#line 24
allow runas security_file:dir { open getattr read search ioctl lock };
#line 24
allow runas security_file:file { getattr open read ioctl lock };
#line 24


#line 25
allow runas selinuxfs:file { { getattr open read ioctl lock } { open append write lock } };
#line 25
allow runas kernel:security check_context;
#line 25
 # validate context
allow runas self:process setcurrent;
allow runas { appdomain -system_app }:process dyntransition; # setcon

###
### neverallow rules
###

# run-as cannot have capabilities other than CAP_SETUID and CAP_SETGID
neverallow runas self:capability ~{ setuid setgid };
neverallow runas self:capability2 *;
#line 1 "system/sepolicy/sdcardd.te"
type sdcardd, domain, domain_deprecated;
type sdcardd_exec, exec_type, file_type;

allow sdcardd cgroup:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow sdcardd fuse_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow sdcardd rootfs:dir mounton;  # TODO: deprecated in M
allow sdcardd tmpfs:dir { open getattr read search ioctl lock };
allow sdcardd mnt_media_rw_file:dir { open getattr read search ioctl lock };
allow sdcardd storage_file:dir search;
allow sdcardd storage_stub_file:dir { search mounton };
allow sdcardd sdcard_type:filesystem { mount unmount };
allow sdcardd self:capability { setuid setgid dac_override sys_admin sys_resource };

allow sdcardd sdcard_type:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow sdcardd sdcard_type:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

type_transition sdcardd system_data_file:{ dir file } media_rw_data_file;
allow sdcardd media_rw_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow sdcardd media_rw_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Read /data/system/packages.list.
allow sdcardd system_data_file:file { getattr open read ioctl lock };

# Read /data/.layout_version
allow sdcardd install_data_file:file { getattr open read ioctl lock };

# Allow stdin/out back to vold
allow sdcardd vold:fd use;
allow sdcardd vold:fifo_file { read write getattr };

# Allow running on top of expanded storage
allow sdcardd mnt_expand_file:dir search;

###
### neverallow rules
###

# The sdcard daemon should no longer be started from init
neverallow init sdcardd_exec:file execute;
neverallow init sdcardd:process { transition dyntransition };
#line 1 "system/sepolicy/service.te"
type audioserver_service,       service_manager_type;
type bluetooth_service,         service_manager_type;
type cameraserver_service,      service_manager_type;
type default_android_service,   service_manager_type;
type drmserver_service,         service_manager_type;
type gatekeeper_service,        app_api_service, service_manager_type;
type fingerprintd_service,      service_manager_type;
type batteryproperties_service, app_api_service, service_manager_type;
type gpu_service,               service_manager_type;
type inputflinger_service,      service_manager_type;
type keystore_service,          service_manager_type;
type mediaserver_service,       service_manager_type;
type mediaextractor_service,    service_manager_type;
type mediacodec_service,        service_manager_type;
type mediadrmserver_service,    service_manager_type;
type netd_service,              service_manager_type;
type nfc_service,               service_manager_type;
type radio_service,             service_manager_type;
type surfaceflinger_service,    service_manager_type;
type system_app_service,        service_manager_type;
type update_engine_service,     service_manager_type;

# system_server_services broken down
type accessibility_service, app_api_service, system_server_service, service_manager_type;
type account_service, app_api_service, system_server_service, service_manager_type;
type activity_service, app_api_service, system_server_service, service_manager_type;
type alarm_service, app_api_service, system_server_service, service_manager_type;
type appops_service, app_api_service, system_server_service, service_manager_type;
type appwidget_service, app_api_service, system_server_service, service_manager_type;
type assetatlas_service, app_api_service, system_server_service, service_manager_type;
type audio_service, app_api_service, system_server_service, service_manager_type;
type backup_service, app_api_service, system_server_service, service_manager_type;
type batterystats_service, app_api_service, system_server_service, service_manager_type;
type battery_service, system_server_service, service_manager_type;
type bluetooth_manager_service, app_api_service, system_server_service, service_manager_type;
type cameraproxy_service, system_server_service, service_manager_type;
type clipboard_service, app_api_service, system_server_service, service_manager_type;
type contexthub_service, app_api_service, system_server_service, service_manager_type;
type IProxyService_service, app_api_service, system_server_service, service_manager_type;
type commontime_management_service, system_server_service, service_manager_type;
type connectivity_service, app_api_service, system_server_service, service_manager_type;
type consumer_ir_service, app_api_service, system_server_service, service_manager_type;
type content_service, app_api_service, system_server_service, service_manager_type;
type country_detector_service, app_api_service, system_server_service, service_manager_type;
type cpuinfo_service, system_api_service, system_server_service, service_manager_type;
type dbinfo_service, system_api_service, system_server_service, service_manager_type;
type device_policy_service, app_api_service, system_server_service, service_manager_type;
type deviceidle_service, app_api_service, system_server_service, service_manager_type;
type devicestoragemonitor_service, system_server_service, service_manager_type;
type diskstats_service, system_api_service, system_server_service, service_manager_type;
type display_service, app_api_service, system_server_service, service_manager_type;
type dns_listener_service, system_server_service, service_manager_type;
type DockObserver_service, system_server_service, service_manager_type;
type dreams_service, app_api_service, system_server_service, service_manager_type;
type dropbox_service, app_api_service, system_server_service, service_manager_type;
type ethernet_service, app_api_service, system_server_service, service_manager_type;
type fingerprint_service, app_api_service, system_server_service, service_manager_type;
type gfxinfo_service, system_api_service, system_server_service, service_manager_type;
type graphicsstats_service, app_api_service, system_server_service, service_manager_type;
type hardware_service, system_server_service, service_manager_type;
type hardware_properties_service, app_api_service, system_server_service, service_manager_type;
type hdmi_control_service, system_api_service, system_server_service, service_manager_type;
type input_method_service, app_api_service, system_server_service, service_manager_type;
type input_service, app_api_service, system_server_service, service_manager_type;
type imms_service, app_api_service, system_server_service, service_manager_type;
type jobscheduler_service, app_api_service, system_server_service, service_manager_type;
type launcherapps_service, app_api_service, system_server_service, service_manager_type;
type location_service, app_api_service, system_server_service, service_manager_type;
type lock_settings_service, system_api_service, system_server_service, service_manager_type;
type media_projection_service, app_api_service, system_server_service, service_manager_type;
type media_router_service, app_api_service, system_server_service, service_manager_type;
type media_session_service, app_api_service, system_server_service, service_manager_type;
type meminfo_service, system_api_service, system_server_service, service_manager_type;
type midi_service, app_api_service, system_server_service, service_manager_type;
type mount_service, app_api_service, system_server_service, service_manager_type;
type netpolicy_service, app_api_service, system_server_service, service_manager_type;
type netstats_service, app_api_service, system_server_service, service_manager_type;
type network_management_service, app_api_service, system_server_service, service_manager_type;
type network_score_service, system_api_service, system_server_service, service_manager_type;
type network_time_update_service, system_server_service, service_manager_type;
type notification_service, app_api_service, system_server_service, service_manager_type;
type otadexopt_service, system_server_service, service_manager_type;
type overlay_service, app_api_service, system_server_service, service_manager_type; 
type package_service, app_api_service, system_server_service, service_manager_type;
type permission_service, app_api_service, system_server_service, service_manager_type;
type persistent_data_block_service, system_api_service, system_server_service, service_manager_type;
type pinner_service, system_server_service, service_manager_type;
type power_service, app_api_service, system_server_service, service_manager_type;
type print_service, app_api_service, system_server_service, service_manager_type;
type processinfo_service, system_server_service, service_manager_type;
type procstats_service, app_api_service, system_server_service, service_manager_type;
type recovery_service, system_server_service, service_manager_type;
type registry_service, app_api_service, system_server_service, service_manager_type;
type restrictions_service, app_api_service, system_server_service, service_manager_type;
type rttmanager_service, app_api_service, system_server_service, service_manager_type;
type samplingprofiler_service, system_server_service, service_manager_type;
type scheduling_policy_service, system_server_service, service_manager_type;
type search_service, app_api_service, system_server_service, service_manager_type;
type sensorservice_service, app_api_service, system_server_service, service_manager_type;
type serial_service, system_api_service, system_server_service, service_manager_type;
type servicediscovery_service, app_api_service, system_server_service, service_manager_type;
type shortcut_service, app_api_service, system_server_service, service_manager_type;
type statusbar_service, app_api_service, system_server_service, service_manager_type;
type task_service, system_server_service, service_manager_type;
type textservices_service, app_api_service, system_server_service, service_manager_type;
type telecom_service, app_api_service, system_server_service, service_manager_type;
type trust_service, app_api_service, system_server_service, service_manager_type;
type tv_input_service, app_api_service, system_server_service, service_manager_type;
type uimode_service, app_api_service, system_server_service, service_manager_type;
type updatelock_service, system_api_service, system_server_service, service_manager_type;
type usagestats_service, app_api_service, system_server_service, service_manager_type;
type usb_service, app_api_service, system_server_service, service_manager_type;
type user_service, app_api_service, system_server_service, service_manager_type;
type vibrator_service, app_api_service, system_server_service, service_manager_type;
type voiceinteraction_service, app_api_service, system_server_service, service_manager_type;
type vr_manager_service, system_server_service, service_manager_type;
type wallpaper_service, app_api_service, system_server_service, service_manager_type;
type webviewupdate_service, app_api_service, system_server_service, service_manager_type;
type wifip2p_service, app_api_service, system_server_service, service_manager_type;
type wifiscanner_service, system_api_service, system_server_service, service_manager_type;
type wifi_service, app_api_service, system_server_service, service_manager_type;
type window_service, system_api_service, system_server_service, service_manager_type;
#line 1 "system/sepolicy/servicemanager.te"
# servicemanager - the Binder context manager
type servicemanager, domain, domain_deprecated, mlstrustedsubject;
type servicemanager_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init servicemanager_exec:file { getattr open read execute };
#line 5
allow init servicemanager:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow servicemanager servicemanager_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow servicemanager init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init servicemanager:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init servicemanager_exec:process servicemanager;
#line 5

#line 5

#line 5
type servicemanager_tmpfs, file_type;
#line 5
type_transition servicemanager tmpfs:file servicemanager_tmpfs;
#line 5
allow servicemanager servicemanager_tmpfs:file { read write };
#line 5

#line 5


# Note that we do not use the binder_* macros here.
# servicemanager is unique in that it only provides
# name service (aka context manager) for Binder.
# As such, it only ever receives and transfers other references
# created by other domains.  It never passes its own references
# or initiates a Binder IPC.
allow servicemanager self:binder set_context_mgr;
allow servicemanager { domain -init }:binder transfer;

# Check SELinux permissions.

#line 17
allow servicemanager selinuxfs:file { { getattr open read ioctl lock } { open append write lock } };
#line 17
allow servicemanager kernel:security compute_av;
#line 17
allow servicemanager self:netlink_selinux_socket { read write create getattr setattr lock relabelfrom relabelto append bind connect listen accept getopt setopt shutdown recvfrom sendto recv_msg send_msg name_bind };
#line 17

#line 1 "system/sepolicy/sgdisk.te"
# sgdisk called from vold
type sgdisk, domain, domain_deprecated;
type sgdisk_exec, exec_type, file_type;

# Allowed to read/write low-level partition tables
allow sgdisk block_device:dir search;
allow sgdisk vold_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Inherit and use pty created by android_fork_execvp()
allow sgdisk devpts:chr_file { read write ioctl getattr };

# Allow stdin/out back to vold
allow sgdisk vold:fd use;
allow sgdisk vold:fifo_file { read write getattr };

# Used to probe kernel to reload partition tables
allow sgdisk self:capability sys_admin;

# Only allow entry from vold
neverallow { domain -vold } sgdisk:process transition;
neverallow * sgdisk:process dyntransition;
neverallow sgdisk { file_type fs_type -sgdisk_exec }:file entrypoint;
#line 1 "system/sepolicy/shared_relro.te"
# Process which creates/updates shared RELRO files to be used by other apps.
type shared_relro, domain, domain_deprecated;

# The shared relro process is a Java program forked from the zygote, so it
# inherits from app to get basic permissions it needs to run.

#line 6
typeattribute shared_relro appdomain;
#line 6
# Label ashmem objects with our own unique type.
#line 6

#line 6
type shared_relro_tmpfs, file_type;
#line 6
type_transition shared_relro tmpfs:file shared_relro_tmpfs;
#line 6
allow shared_relro shared_relro_tmpfs:file { read write };
#line 6

#line 6
# Map with PROT_EXEC.
#line 6
allow shared_relro shared_relro_tmpfs:file execute;
#line 6


# Grant write access to the shared relro files/directory.
allow shared_relro shared_relro_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow shared_relro shared_relro_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Needs to contact the "webviewupdate" and "activity" services
allow shared_relro webviewupdate_service:service_manager find;
#line 1 "system/sepolicy/shell.te"
# Domain for shell processes spawned by ADB or console service.
type shell, domain, mlstrustedsubject;
type shell_exec, exec_type, file_type;

# Create and use network sockets.

#line 6
typeattribute shell netdomain;
#line 6


# Run app_process.
# XXX Transition into its own domain?

#line 10
typeattribute shell appdomain;
#line 10
# Label ashmem objects with our own unique type.
#line 10

#line 10
type shell_tmpfs, file_type;
#line 10
type_transition shell tmpfs:file shell_tmpfs;
#line 10
allow shell shell_tmpfs:file { read write };
#line 10

#line 10
# Map with PROT_EXEC.
#line 10
allow shell shell_tmpfs:file execute;
#line 10


# logcat

#line 13
allow shell logcat_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 13

#line 13

#line 13

#line 13
allow shell logdr_socket:sock_file write;
#line 13
allow shell logd:unix_stream_socket connectto;
#line 13

#line 13

#line 13


#line 14
# Group AID_LOG checked by filesystem & logd
#line 14
# to permit control commands
#line 14

#line 14

#line 14

#line 14
allow shell logd_socket:sock_file write;
#line 14
allow shell logd:unix_stream_socket connectto;
#line 14

#line 14

#line 14

# logcat -L (directly, or via dumpstate)
allow shell pstorefs:dir search;
allow shell pstorefs:file { getattr open read ioctl lock };
# logpersistd (nee logcatd) files

#line 19
  allow shell misc_logd_file:dir { open getattr read search ioctl lock };
#line 19
  allow shell misc_logd_file:file { getattr open read ioctl lock };
#line 22


# Root fs.
allow shell rootfs:dir { open getattr read search ioctl lock };

# read files in /data/anr
allow shell anr_data_file:dir { open getattr read search ioctl lock };
allow shell anr_data_file:file { getattr open read ioctl lock };

# Access /data/local/tmp.
allow shell shell_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow shell shell_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow shell shell_data_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow shell shell_data_file:lnk_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Access /data/misc/profman.
allow shell profman_dump_data_file:dir { search getattr write remove_name };
allow shell profman_dump_data_file:file { getattr unlink };

# Read/execute files in /data/nativetest

#line 42
  allow shell nativetest_data_file:dir { open getattr read search ioctl lock };
#line 42
  allow shell nativetest_data_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 45


# adb bugreport

#line 48

#line 48

#line 48
allow shell dumpstate_socket:sock_file write;
#line 48
allow shell dumpstate:unix_stream_socket connectto;
#line 48

#line 48


allow shell devpts:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow shell tty_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow shell console_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow shell input_device:dir { open getattr read search ioctl lock };
allow shell input_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

#line 55
allow shell system_file:dir { open getattr read search ioctl lock };
#line 55
allow shell system_file:{ file lnk_file } { getattr open read ioctl lock };
#line 55

allow shell system_file:file { getattr execute execute_no_trans };
allow shell toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow shell shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow shell zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };


#line 61
allow shell apk_data_file:dir { open getattr read search ioctl lock };
#line 61
allow shell apk_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 61


# Set properties.

#line 64

#line 64
allow shell property_socket:sock_file write;
#line 64
allow shell init:unix_stream_socket connectto;
#line 64

#line 64
allow shell shell_prop:property_service set;
#line 64

#line 64
allow shell shell_prop:file { getattr open read ioctl lock };
#line 64

#line 64


#line 65

#line 65
allow shell property_socket:sock_file write;
#line 65
allow shell init:unix_stream_socket connectto;
#line 65

#line 65
allow shell ctl_bugreport_prop:property_service set;
#line 65

#line 65
allow shell ctl_bugreport_prop:file { getattr open read ioctl lock };
#line 65

#line 65


#line 66

#line 66
allow shell property_socket:sock_file write;
#line 66
allow shell init:unix_stream_socket connectto;
#line 66

#line 66
allow shell ctl_dumpstate_prop:property_service set;
#line 66

#line 66
allow shell ctl_dumpstate_prop:file { getattr open read ioctl lock };
#line 66

#line 66


#line 67

#line 67
allow shell property_socket:sock_file write;
#line 67
allow shell init:unix_stream_socket connectto;
#line 67

#line 67
allow shell dumpstate_prop:property_service set;
#line 67

#line 67
allow shell dumpstate_prop:file { getattr open read ioctl lock };
#line 67

#line 67


#line 68

#line 68
allow shell property_socket:sock_file write;
#line 68
allow shell init:unix_stream_socket connectto;
#line 68

#line 68
allow shell debug_prop:property_service set;
#line 68

#line 68
allow shell debug_prop:file { getattr open read ioctl lock };
#line 68

#line 68


#line 69

#line 69
allow shell property_socket:sock_file write;
#line 69
allow shell init:unix_stream_socket connectto;
#line 69

#line 69
allow shell powerctl_prop:property_service set;
#line 69

#line 69
allow shell powerctl_prop:file { getattr open read ioctl lock };
#line 69

#line 69


#line 70

#line 70
allow shell property_socket:sock_file write;
#line 70
allow shell init:unix_stream_socket connectto;
#line 70

#line 70
allow shell log_tag_prop:property_service set;
#line 70

#line 70
allow shell log_tag_prop:file { getattr open read ioctl lock };
#line 70

#line 70


#line 71

#line 71
allow shell property_socket:sock_file write;
#line 71
allow shell init:unix_stream_socket connectto;
#line 71

#line 71
allow shell wifi_log_prop:property_service set;
#line 71

#line 71
allow shell wifi_log_prop:file { getattr open read ioctl lock };
#line 71

#line 71


#line 72

#line 72
allow shell property_socket:sock_file write;
#line 72
allow shell init:unix_stream_socket connectto;
#line 72

#line 72
allow shell log_prop:property_service set;
#line 72

#line 72
allow shell log_prop:file { getattr open read ioctl lock };
#line 72

#line 72


# systrace support - allow atrace to run
allow shell debugfs_tracing:dir { open getattr read search ioctl lock };
allow shell debugfs_tracing:file { { getattr open read ioctl lock } { open append write lock } };
allow shell debugfs_trace_marker:file getattr;
allow shell atrace_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };


#line 80
  # "systrace --boot" support - allow boottrace service to run
#line 80
  allow shell boottrace_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
#line 80
  allow shell boottrace_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 80
  
#line 80

#line 80
allow shell property_socket:sock_file write;
#line 80
allow shell init:unix_stream_socket connectto;
#line 80

#line 80
allow shell persist_debug_prop:property_service set;
#line 80

#line 80
allow shell persist_debug_prop:file { getattr open read ioctl lock };
#line 80

#line 80

#line 85


# allow shell to run dmesg
allow shell kernel:system syslog_read;

# allow shell access to services
allow shell servicemanager:service_manager list;
# don't allow shell to access GateKeeper service
allow shell { service_manager_type -gatekeeper_service -netd_service }:service_manager find;

# allow shell to look through /proc/ for ps, top, netstat

#line 96
allow shell proc:dir { open getattr read search ioctl lock };
#line 96
allow shell proc:{ file lnk_file } { getattr open read ioctl lock };
#line 96


#line 97
allow shell proc_net:dir { open getattr read search ioctl lock };
#line 97
allow shell proc_net:{ file lnk_file } { getattr open read ioctl lock };
#line 97

allow shell proc_meminfo:file { getattr open read ioctl lock };

#line 99
allow shell cgroup:dir { open getattr read search ioctl lock };
#line 99
allow shell cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 99

allow shell domain:dir { search open read getattr };
allow shell domain:{ file lnk_file } { open read getattr };

# statvfs() of /proc and other labeled filesystems
# (yaffs2, jffs2, ext2, ext3, ext4, xfs, btrfs, f2fs, squashfs)
allow shell { proc labeledfs }:filesystem getattr;

# stat() of /dev
allow shell device:dir getattr;

# allow shell to read /proc/pid/attr/current for ps -Z
allow shell domain:process getattr;

# Allow pulling the SELinux policy for CTS purposes
allow shell selinuxfs:dir { open getattr read search ioctl lock };
allow shell selinuxfs:file { getattr open read ioctl lock };

# enable shell domain to read/write files/dirs for bootchart data
# User will creates the start and stop file via adb shell
# and read other files created by init process under /data/bootchart
allow shell bootchart_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow shell bootchart_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Make sure strace works for the non-privileged shell user
allow shell self:process ptrace;

# allow shell to get battery info
allow shell sysfs_batteryinfo:file { getattr open read ioctl lock };
allow shell sysfs:dir { open getattr read search ioctl lock };

# Allow access to ion memory allocation device.
allow shell ion_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Access to /data/media.
# This should be removed if sdcardfs is modified to alter the secontext for its
# accesses to the underlying FS.
allow shell media_rw_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow shell media_rw_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

###
### Neverallow rules
###

# Do not allow shell to hard link to any files.
# In particular, if shell hard links to app data
# files, installd will not be able to guarantee the deletion
# of the linked to file. Hard links also contribute to security
# bugs, so we want to ensure the shell user never has this
# capability.
neverallow shell file_type:file link;

# Do not allow privileged socket ioctl commands
neverallowxperm shell domain:{ rawip_socket tcp_socket udp_socket } ioctl 
#line 152
{
#line 152
# qualcomm rmnet ioctls
#line 152
0x00006900 0x00006902
#line 152
# socket ioctls
#line 152
0x0000890b 0x0000890c 0x0000890d 0x00008911 0x00008914 0x00008916
#line 152
0x00008918 0x0000891a 0x0000891c 0x0000891d 0x0000891e 0x0000891f
#line 152
0x00008920 0x00008922 0x00008923 0x00008924 0x00008925 0x00008926
#line 152
0x00008927 0x00008929 0x00008930 0x00008931 0x00008932
#line 152
0x00008934 0x00008935 0x00008936 0x00008937 0x00008940 0x00008941
#line 152
0x00008943 0x00008946 0x00008947 0x00008948 0x00008949 0x0000894a
#line 152
0x0000894b 0x00008953 0x00008954 0x00008955 0x00008960 0x00008961 0x00008962 0x00008970
#line 152
0x00008971 0x00008980 0x00008981 0x00008982 0x00008983 0x00008990
#line 152
0x00008991 0x00008992 0x00008993 0x00008994
#line 152
0x00008995 0x000089a0 0x000089a1 0x000089a2 0x000089a3 0x000089b0
#line 152
# device and protocol specific ioctls
#line 152
0x000089f0-0x000089ff
#line 152
0x000089e0-0x000089ef
#line 152
# Wireless extension ioctls
#line 152
0x00008b00 0x00008b02 0x00008b04 0x00008b06 0x00008b08 0x00008b0a
#line 152
0x00008b0c 0x00008b0e 0x00008b10 0x00008b14 0x00008b15 0x00008b16 0x00008b17
#line 152
0x00008b18 0x00008b19 0x00008b1a 0x00008b1b 0x00008b1c 0x00008b1d
#line 152
0x00008b20 0x00008b22 0x00008b24 0x00008b26 0x00008b28 0x00008b2a
#line 152
0x00008b2b 0x00008b2c 0x00008b30 0x00008b31 0x00008b32 0x00008b33
#line 152
0x00008b34 0x00008b35 0x00008b36
#line 152
# Dev private ioctl i.e. hardware specific ioctls
#line 152
0x00008be0-0x00008bff
#line 152
};
#line 1 "system/sepolicy/slideshow.te"
# slideshow seclabel is specified in init.rc since
# it lives in the rootfs and has no unique file type.
type slideshow, domain, domain_deprecated;

allow slideshow kmsg_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

#line 6
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 6
allow slideshow sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 6
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 6
allow slideshow self:capability2 block_suspend;
#line 6

allow slideshow device:dir { open getattr read search ioctl lock };
allow slideshow self:capability sys_tty_config;
allow slideshow graphics_device:dir { open getattr read search ioctl lock };
allow slideshow graphics_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow slideshow input_device:dir { open getattr read search ioctl lock };
allow slideshow input_device:chr_file { getattr open read ioctl lock };
allow slideshow tty_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

#line 1 "system/sepolicy/su.te"
# File types must be defined for file_contexts.
type su_exec, exec_type, file_type;


#line 4
  # Domain used for su processes, as well as for adbd and adb shell
#line 4
  # after performing an adb root command.  The domain definition is
#line 4
  # wrapped to ensure that it does not exist at all on -user builds.
#line 4
  type su, domain, mlstrustedsubject;
#line 4
  
#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow shell su_exec:file { getattr open read execute };
#line 4
allow shell su:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow su su_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow su shell:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow shell su:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition shell su_exec:process su;
#line 4

#line 4

#line 4
  # Allow dumpstate to call su on userdebug / eng builds to collect
#line 4
  # additional information.
#line 4
  
#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow dumpstate su_exec:file { getattr open read execute };
#line 4
allow dumpstate su:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow su su_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow su dumpstate:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow dumpstate su:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition dumpstate su_exec:process su;
#line 4

#line 4

#line 4
  # Make sure that dumpstate runs the same from the "su" domain as
#line 4
  # from the "init" domain.
#line 4
  
#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow su dumpstate_exec:file { getattr open read execute };
#line 4
allow su dumpstate:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow dumpstate dumpstate_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow dumpstate su:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow su dumpstate:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition su dumpstate_exec:process dumpstate;
#line 4

#line 4

#line 4
  # su is also permissive to permit setenforce.
#line 4
  permissive su;
#line 4

#line 4
  # Add su to various domains
#line 4
  
#line 4
typeattribute su netdomain;
#line 4

#line 4
  
#line 4
typeattribute su appdomain;
#line 4
# Label ashmem objects with our own unique type.
#line 4

#line 4
type su_tmpfs, file_type;
#line 4
type_transition su tmpfs:file su_tmpfs;
#line 4
allow su su_tmpfs:file { read write };
#line 4

#line 4
# Map with PROT_EXEC.
#line 4
allow su su_tmpfs:file execute;
#line 4

#line 4

#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 4
#line 55

#line 1 "system/sepolicy/surfaceflinger.te"
# surfaceflinger - display compositor service
type surfaceflinger, domain, domain_deprecated;
type surfaceflinger_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init surfaceflinger_exec:file { getattr open read execute };
#line 5
allow init surfaceflinger:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow surfaceflinger surfaceflinger_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow surfaceflinger init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init surfaceflinger:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init surfaceflinger_exec:process surfaceflinger;
#line 5

#line 5

#line 5
type surfaceflinger_tmpfs, file_type;
#line 5
type_transition surfaceflinger tmpfs:file surfaceflinger_tmpfs;
#line 5
allow surfaceflinger surfaceflinger_tmpfs:file { read write };
#line 5

#line 5

typeattribute surfaceflinger mlstrustedsubject;

# Perform Binder IPC.

#line 9
# Call the servicemanager and transfer references to it.
#line 9
allow surfaceflinger servicemanager:binder { call transfer };
#line 9
# servicemanager performs getpidcon on clients.
#line 9
allow servicemanager surfaceflinger:dir search;
#line 9
allow servicemanager surfaceflinger:file { read open };
#line 9
allow servicemanager surfaceflinger:process getattr;
#line 9
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 9
# all domains in domain.te.
#line 9


#line 10
# Call the server domain and optionally transfer references to it.
#line 10
allow surfaceflinger binderservicedomain:binder { call transfer };
#line 10
# Allow the serverdomain to transfer references to the client on the reply.
#line 10
allow binderservicedomain surfaceflinger:binder transfer;
#line 10
# Receive and use open files from the server.
#line 10
allow surfaceflinger binderservicedomain:fd use;
#line 10


#line 11
# Call the server domain and optionally transfer references to it.
#line 11
allow surfaceflinger { appdomain autoplay_app }:binder { call transfer };
#line 11
# Allow the serverdomain to transfer references to the client on the reply.
#line 11
allow { appdomain autoplay_app } surfaceflinger:binder transfer;
#line 11
# Receive and use open files from the server.
#line 11
allow surfaceflinger { appdomain autoplay_app }:fd use;
#line 11


#line 12
# Call the server domain and optionally transfer references to it.
#line 12
allow surfaceflinger bootanim:binder { call transfer };
#line 12
# Allow the serverdomain to transfer references to the client on the reply.
#line 12
allow bootanim surfaceflinger:binder transfer;
#line 12
# Receive and use open files from the server.
#line 12
allow surfaceflinger bootanim:fd use;
#line 12


#line 13
typeattribute surfaceflinger binderservicedomain;
#line 13


# Binder IPC to bu, presently runs in adbd domain.

#line 16
# Call the server domain and optionally transfer references to it.
#line 16
allow surfaceflinger adbd:binder { call transfer };
#line 16
# Allow the serverdomain to transfer references to the client on the reply.
#line 16
allow adbd surfaceflinger:binder transfer;
#line 16
# Receive and use open files from the server.
#line 16
allow surfaceflinger adbd:fd use;
#line 16


# Read /proc/pid files for Binder clients.

#line 19
allow surfaceflinger binderservicedomain:dir { open getattr read search ioctl lock };
#line 19
allow surfaceflinger binderservicedomain:{ file lnk_file } { getattr open read ioctl lock };
#line 19


#line 20
allow surfaceflinger { appdomain autoplay_app }:dir { open getattr read search ioctl lock };
#line 20
allow surfaceflinger { appdomain autoplay_app }:{ file lnk_file } { getattr open read ioctl lock };
#line 20


# Access the GPU.
allow surfaceflinger gpu_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Access /dev/graphics/fb0.
allow surfaceflinger graphics_device:dir search;
allow surfaceflinger graphics_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Access /dev/video1.
allow surfaceflinger video_device:dir { open getattr read search ioctl lock };
allow surfaceflinger video_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Create and use netlink kobject uevent sockets.
allow surfaceflinger self:netlink_kobject_uevent_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

# Set properties.

#line 37

#line 37
allow surfaceflinger property_socket:sock_file write;
#line 37
allow surfaceflinger init:unix_stream_socket connectto;
#line 37

#line 37
allow surfaceflinger system_prop:property_service set;
#line 37

#line 37
allow surfaceflinger system_prop:file { getattr open read ioctl lock };
#line 37

#line 37


#line 38

#line 38
allow surfaceflinger property_socket:sock_file write;
#line 38
allow surfaceflinger init:unix_stream_socket connectto;
#line 38

#line 38
allow surfaceflinger ctl_bootanim_prop:property_service set;
#line 38

#line 38
allow surfaceflinger ctl_bootanim_prop:file { getattr open read ioctl lock };
#line 38

#line 38


# Use open files supplied by an app.
allow surfaceflinger { appdomain autoplay_app }:fd use;
allow surfaceflinger app_data_file:file { read write };

# Allow a dumpstate triggered screenshot

#line 45
# Call the server domain and optionally transfer references to it.
#line 45
allow surfaceflinger dumpstate:binder { call transfer };
#line 45
# Allow the serverdomain to transfer references to the client on the reply.
#line 45
allow dumpstate surfaceflinger:binder transfer;
#line 45
# Receive and use open files from the server.
#line 45
allow surfaceflinger dumpstate:fd use;
#line 45


#line 46
# Call the server domain and optionally transfer references to it.
#line 46
allow surfaceflinger shell:binder { call transfer };
#line 46
# Allow the serverdomain to transfer references to the client on the reply.
#line 46
allow shell surfaceflinger:binder transfer;
#line 46
# Receive and use open files from the server.
#line 46
allow surfaceflinger shell:fd use;
#line 46


#line 47
allow surfaceflinger dumpstate:dir { open getattr read search ioctl lock };
#line 47
allow surfaceflinger dumpstate:{ file lnk_file } { getattr open read ioctl lock };
#line 47


# Needed on some devices for playing DRM protected content,
# but seems expected and appropriate for all devices.
allow surfaceflinger tee:unix_stream_socket connectto;
allow surfaceflinger tee_device:chr_file { { getattr open read ioctl lock } { open append write lock } };


# media.player service
allow surfaceflinger mediaserver_service:service_manager find;
allow surfaceflinger permission_service:service_manager find;
allow surfaceflinger power_service:service_manager find;
allow surfaceflinger gpu_service:service_manager { add find };
allow surfaceflinger surfaceflinger_service:service_manager { add find };
allow surfaceflinger window_service:service_manager find;

###
### Neverallow rules
###
### surfaceflinger should NEVER do any of this

# Do not allow accessing SDcard files as unsafe ejection could
# cause the kernel to kill the process.
neverallow surfaceflinger sdcard_type:file { { getattr open read ioctl lock } { open append write lock } };
#line 1 "system/sepolicy/system_app.te"
#
# Apps that run with the system UID, e.g. com.android.system.ui,
# com.android.settings.  These are not as privileged as the system
# server.
#
type system_app, domain, domain_deprecated;

#line 7
typeattribute system_app appdomain;
#line 7
# Label ashmem objects with our own unique type.
#line 7

#line 7
type system_app_tmpfs, file_type;
#line 7
type_transition system_app tmpfs:file system_app_tmpfs;
#line 7
allow system_app system_app_tmpfs:file { read write };
#line 7

#line 7
# Map with PROT_EXEC.
#line 7
allow system_app system_app_tmpfs:file execute;
#line 7


#line 8
typeattribute system_app netdomain;
#line 8


#line 9
typeattribute system_app binderservicedomain;
#line 9


# Read and write /data/data subdirectory.
allow system_app system_app_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow system_app system_app_data_file:{ file lnk_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Read and write to /data/misc/user.
allow system_app misc_user_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow system_app misc_user_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Access to vold-mounted storage for measuring free space
allow system_app mnt_media_rw_file:dir search;

# Read wallpaper file.
allow system_app wallpaper_file:file { getattr open read ioctl lock };

# Read icon file.
allow system_app icon_file:file { getattr open read ioctl lock };

# Write to properties

#line 29

#line 29
allow system_app property_socket:sock_file write;
#line 29
allow system_app init:unix_stream_socket connectto;
#line 29

#line 29
allow system_app debug_prop:property_service set;
#line 29

#line 29
allow system_app debug_prop:file { getattr open read ioctl lock };
#line 29

#line 29


#line 30

#line 30
allow system_app property_socket:sock_file write;
#line 30
allow system_app init:unix_stream_socket connectto;
#line 30

#line 30
allow system_app system_prop:property_service set;
#line 30

#line 30
allow system_app system_prop:file { getattr open read ioctl lock };
#line 30

#line 30


#line 31

#line 31
allow system_app property_socket:sock_file write;
#line 31
allow system_app init:unix_stream_socket connectto;
#line 31

#line 31
allow system_app logd_prop:property_service set;
#line 31

#line 31
allow system_app logd_prop:file { getattr open read ioctl lock };
#line 31

#line 31


#line 32

#line 32
allow system_app property_socket:sock_file write;
#line 32
allow system_app init:unix_stream_socket connectto;
#line 32

#line 32
allow system_app net_radio_prop:property_service set;
#line 32

#line 32
allow system_app net_radio_prop:file { getattr open read ioctl lock };
#line 32

#line 32


#line 33

#line 33
allow system_app property_socket:sock_file write;
#line 33
allow system_app init:unix_stream_socket connectto;
#line 33

#line 33
allow system_app system_radio_prop:property_service set;
#line 33

#line 33
allow system_app system_radio_prop:file { getattr open read ioctl lock };
#line 33

#line 33


#line 34

#line 34
allow system_app property_socket:sock_file write;
#line 34
allow system_app init:unix_stream_socket connectto;
#line 34

#line 34
allow system_app log_tag_prop:property_service set;
#line 34

#line 34
allow system_app log_tag_prop:file { getattr open read ioctl lock };
#line 34

#line 34

auditallow system_app net_radio_prop:property_service set;
auditallow system_app system_radio_prop:property_service set;

# ctl interface

#line 39

#line 39
allow system_app property_socket:sock_file write;
#line 39
allow system_app init:unix_stream_socket connectto;
#line 39

#line 39
allow system_app ctl_default_prop:property_service set;
#line 39

#line 39
allow system_app ctl_default_prop:file { getattr open read ioctl lock };
#line 39

#line 39


#line 40

#line 40
allow system_app property_socket:sock_file write;
#line 40
allow system_app init:unix_stream_socket connectto;
#line 40

#line 40
allow system_app ctl_bugreport_prop:property_service set;
#line 40

#line 40
allow system_app ctl_bugreport_prop:file { getattr open read ioctl lock };
#line 40

#line 40


# Create /data/anr/traces.txt.
allow system_app anr_data_file:dir { { open getattr read search ioctl lock } add_name write };
allow system_app anr_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Settings need to access app name and icon from asec
allow system_app asec_apk_file:file { getattr open read ioctl lock };

allow system_app servicemanager:service_manager list;
allow system_app { service_manager_type -netd_service }:service_manager find;

allow system_app keystore:keystore_key {
	get_state
	get
	insert
	delete
	exist
	list
	reset
	password
	lock
	unlock
	is_empty
	sign
	verify
	grant
	duplicate
	clear_uid
	user_changed
};

# /sys access
allow system_app sysfs_zram:dir search;
allow system_app sysfs_zram:file { getattr open read ioctl lock };


#line 76
# Group AID_LOG checked by filesystem & logd
#line 76
# to permit control commands
#line 76

#line 76

#line 76

#line 76
allow system_app logd_socket:sock_file write;
#line 76
allow system_app logd:unix_stream_socket connectto;
#line 76

#line 76

#line 76

#line 1 "system/sepolicy/system_server.te"
#
# System Server aka system_server spawned by zygote.
# Most of the framework services run in this process.
#
type system_server, domain, domain_deprecated, mlstrustedsubject;

# Define a type for tmpfs-backed ashmem regions.

#line 8
type system_server_tmpfs, file_type;
#line 8
type_transition system_server tmpfs:file system_server_tmpfs;
#line 8
allow system_server system_server_tmpfs:file { read write };
#line 8


# For art.
allow system_server dalvikcache_data_file:file execute;
allow system_server dalvikcache_data_file:dir { open getattr read search ioctl lock };

# Enable system server to check the foreign dex usage markers.
# We need search on top level directories so that we can get to the files
allow system_server user_profile_data_file:dir search;
allow system_server user_profile_data_file:file getattr;
allow system_server user_profile_foreign_dex_data_file:dir { add_name open read write search remove_name };
allow system_server user_profile_foreign_dex_data_file:file { getattr rename unlink };

# /data/resource-cache
allow system_server resourcecache_data_file:file { getattr open read ioctl lock };
allow system_server resourcecache_data_file:dir { open getattr read search ioctl lock };

# ptrace to processes in the same domain for debugging crashes.
allow system_server self:process ptrace;

# Child of the zygote.
allow system_server zygote:fd use;
allow system_server zygote:process sigchld;
allow system_server zygote_tmpfs:file read;

# May kill zygote on crashes.
allow system_server zygote:process sigkill;

# Read /system/bin/app_process.
allow system_server zygote_exec:file { getattr open read ioctl lock };

# Needed to close the zygote socket, which involves getopt / getattr
allow system_server zygote:unix_stream_socket { getopt getattr };

# system server gets network and bluetooth permissions.

#line 43
typeattribute system_server netdomain;
#line 43


#line 44
typeattribute system_server bluetoothdomain;
#line 44


# These are the capabilities assigned by the zygote to the
# system server.
allow system_server self:capability {
    ipc_lock
    kill
    net_admin
    net_bind_service
    net_broadcast
    net_raw
    sys_boot
    sys_nice
    sys_resource
    sys_time
    sys_tty_config
};


#line 62
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 62
allow system_server sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 62
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 62
allow system_server self:capability2 block_suspend;
#line 62


# Triggered by /proc/pid accesses, not allowed.

# Trigger module auto-load.
allow system_server kernel:system module_request;

# Use netlink uevent sockets.
allow system_server self:netlink_kobject_uevent_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

# Use generic netlink sockets.
allow system_server self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow system_server self:netlink_generic_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

# Use generic "sockets" where the address family is not known
# to the kernel.
allow system_server self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

# Set and get routes directly via netlink.
allow system_server self:netlink_route_socket nlmsg_write;

# Kill apps.
allow system_server { appdomain autoplay_app }:process { sigkill signal };

# Set scheduling info for apps.
allow system_server { appdomain autoplay_app }:process { getsched setsched };
allow system_server audioserver:process { getsched setsched };
allow system_server cameraserver:process { getsched setsched };
allow system_server mediaserver:process { getsched setsched };

# Read /proc/pid data for all domains. This is used by ProcessCpuTracker
# within system_server to keep track of memory and CPU usage for
# all processes on the device. In addition, /proc/pid files access is needed
# for dumping stack traces of native processes.

#line 97
allow system_server domain:dir { open getattr read search ioctl lock };
#line 97
allow system_server domain:{ file lnk_file } { getattr open read ioctl lock };
#line 97


# Read/Write to /proc/net/xt_qtaguid/ctrl and and /dev/xt_qtaguid.
allow system_server qtaguid_proc:file { { getattr open read ioctl lock } { open append write lock } };
allow system_server qtaguid_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Read /proc/uid_cputime/show_uid_stat.
allow system_server proc_uid_cputime_showstat:file { getattr open read ioctl lock };

# Write /proc/uid_cputime/remove_uid_range.
allow system_server proc_uid_cputime_removeuid:file { { open append write lock } getattr };

# Write to /proc/sysrq-trigger.
allow system_server proc_sysrq:file { { getattr open read ioctl lock } { open append write lock } };

# Read /sys/kernel/debug/wakeup_sources.
allow system_server debugfs:file { getattr open read ioctl lock };

# The DhcpClient and WifiWatchdog use packet_sockets
allow system_server self:packet_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

# NetworkDiagnostics requires explicit bind() calls to ping sockets. These aren't actually the same
# as raw sockets, but the kernel doesn't yet distinguish between the two.
allow system_server node:rawip_socket node_bind;

# 3rd party VPN clients require a tun_socket to be created
allow system_server self:tun_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

# Notify init of death.
allow system_server init:process sigchld;

# Talk to init and various daemons via sockets.

#line 129

#line 129

#line 129
allow system_server installd_socket:sock_file write;
#line 129
allow system_server installd:unix_stream_socket connectto;
#line 129

#line 129


#line 130

#line 130

#line 130
allow system_server lmkd_socket:sock_file write;
#line 130
allow system_server lmkd:unix_stream_socket connectto;
#line 130

#line 130


#line 131

#line 131

#line 131
allow system_server mtpd_socket:sock_file write;
#line 131
allow system_server mtp:unix_stream_socket connectto;
#line 131

#line 131


#line 132

#line 132

#line 132
allow system_server netd_socket:sock_file write;
#line 132
allow system_server netd:unix_stream_socket connectto;
#line 132

#line 132


#line 133

#line 133

#line 133
allow system_server vold_socket:sock_file write;
#line 133
allow system_server vold:unix_stream_socket connectto;
#line 133

#line 133


#line 134

#line 134

#line 134
allow system_server zygote_socket:sock_file write;
#line 134
allow system_server zygote:unix_stream_socket connectto;
#line 134

#line 134


#line 135

#line 135

#line 135
allow system_server gps_socket:sock_file write;
#line 135
allow system_server gpsd:unix_stream_socket connectto;
#line 135

#line 135


#line 136

#line 136

#line 136
allow system_server racoon_socket:sock_file write;
#line 136
allow system_server racoon:unix_stream_socket connectto;
#line 136

#line 136


#line 137
allow system_server wpa_socket:sock_file write;
#line 137
allow system_server wpa:unix_dgram_socket sendto;
#line 137


#line 138

#line 138

#line 138
allow system_server uncrypt_socket:sock_file write;
#line 138
allow system_server uncrypt:unix_stream_socket connectto;
#line 138

#line 138


# Communicate over a socket created by surfaceflinger.
allow system_server surfaceflinger:unix_stream_socket { read write setopt };

# Perform Binder IPC.

#line 144
# Call the servicemanager and transfer references to it.
#line 144
allow system_server servicemanager:binder { call transfer };
#line 144
# servicemanager performs getpidcon on clients.
#line 144
allow servicemanager system_server:dir search;
#line 144
allow servicemanager system_server:file { read open };
#line 144
allow servicemanager system_server:process getattr;
#line 144
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 144
# all domains in domain.te.
#line 144


#line 145
# Call the server domain and optionally transfer references to it.
#line 145
allow system_server binderservicedomain:binder { call transfer };
#line 145
# Allow the serverdomain to transfer references to the client on the reply.
#line 145
allow binderservicedomain system_server:binder transfer;
#line 145
# Receive and use open files from the server.
#line 145
allow system_server binderservicedomain:fd use;
#line 145


#line 146
# Call the server domain and optionally transfer references to it.
#line 146
allow system_server gatekeeperd:binder { call transfer };
#line 146
# Allow the serverdomain to transfer references to the client on the reply.
#line 146
allow gatekeeperd system_server:binder transfer;
#line 146
# Receive and use open files from the server.
#line 146
allow system_server gatekeeperd:fd use;
#line 146


#line 147
# Call the server domain and optionally transfer references to it.
#line 147
allow system_server fingerprintd:binder { call transfer };
#line 147
# Allow the serverdomain to transfer references to the client on the reply.
#line 147
allow fingerprintd system_server:binder transfer;
#line 147
# Receive and use open files from the server.
#line 147
allow system_server fingerprintd:fd use;
#line 147


#line 148
# Call the server domain and optionally transfer references to it.
#line 148
allow system_server { appdomain autoplay_app }:binder { call transfer };
#line 148
# Allow the serverdomain to transfer references to the client on the reply.
#line 148
allow { appdomain autoplay_app } system_server:binder transfer;
#line 148
# Receive and use open files from the server.
#line 148
allow system_server { appdomain autoplay_app }:fd use;
#line 148


#line 149
# Call the server domain and optionally transfer references to it.
#line 149
allow system_server dumpstate:binder { call transfer };
#line 149
# Allow the serverdomain to transfer references to the client on the reply.
#line 149
allow dumpstate system_server:binder transfer;
#line 149
# Receive and use open files from the server.
#line 149
allow system_server dumpstate:fd use;
#line 149


#line 150
# Call the server domain and optionally transfer references to it.
#line 150
allow system_server netd:binder { call transfer };
#line 150
# Allow the serverdomain to transfer references to the client on the reply.
#line 150
allow netd system_server:binder transfer;
#line 150
# Receive and use open files from the server.
#line 150
allow system_server netd:fd use;
#line 150


#line 151
typeattribute system_server binderservicedomain;
#line 151


# Ask debuggerd to dump backtraces for native stacks of interest.
#
# This is derived from the list that system server defines as interesting native processes
# to dump during ANRs or watchdog aborts, defined in NATIVE_STACKS_OF_INTEREST in
# frameworks/base/services/core/java/com/android/server/Watchdog.java.
allow system_server {
  audioserver
  bluetooth
  cameraserver
  drmserver
  inputflinger
  mediacodec
  mediadrmserver
  mediaextractor
  mediaserver
  sdcardd
  surfaceflinger
}:debuggerd dump_backtrace;

# Use sockets received over binder from various services.
allow system_server audioserver:tcp_socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };
allow system_server audioserver:udp_socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };
allow system_server mediaserver:tcp_socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };
allow system_server mediaserver:udp_socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };

# Use sockets received over binder from various services.
allow system_server mediadrmserver:tcp_socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };
allow system_server mediadrmserver:udp_socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };

# Check SELinux permissions.

#line 183
allow system_server selinuxfs:file { { getattr open read ioctl lock } { open append write lock } };
#line 183
allow system_server kernel:security compute_av;
#line 183
allow system_server self:netlink_selinux_socket { read write create getattr setattr lock relabelfrom relabelto append bind connect listen accept getopt setopt shutdown recvfrom sendto recv_msg send_msg name_bind };
#line 183


# XXX Label sysfs files with a specific type?
allow system_server sysfs:file { { getattr open read ioctl lock } { open append write lock } };
allow system_server sysfs_nfc_power_writable:file { { getattr open read ioctl lock } { open append write lock } };
allow system_server sysfs_devices_system_cpu:file { open append write lock };
allow system_server sysfs_mac_address:file { getattr open read ioctl lock };
allow system_server sysfs_thermal:dir search;
allow system_server sysfs_thermal:file { getattr open read ioctl lock };

# TODO: added to match above sysfs rule. Remove me?
allow system_server sysfs_usb:file { open append write lock };

# Access devices.
allow system_server device:dir { open getattr read search ioctl lock };
allow system_server mdns_socket:sock_file { { getattr open read ioctl lock } { open append write lock } };
allow system_server alarm_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow system_server gpu_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow system_server iio_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow system_server input_device:dir { open getattr read search ioctl lock };
allow system_server input_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow system_server radio_device:chr_file { getattr open read ioctl lock };
allow system_server tty_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow system_server usbaccessory_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow system_server video_device:dir { open getattr read search ioctl lock };
allow system_server video_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow system_server adbd_socket:sock_file { { getattr open read ioctl lock } { open append write lock } };
allow system_server rtc_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow system_server audio_device:dir { open getattr read search ioctl lock };

# write access needed for MIDI
allow system_server audio_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# tun device used for 3rd party vpn apps
allow system_server tun_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Manage system data files.
allow system_server system_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow system_server system_data_file:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow system_server keychain_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow system_server keychain_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Manage /data/app.
allow system_server apk_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow system_server apk_data_file:file { { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } } link };
allow system_server apk_tmp_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow system_server apk_tmp_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Manage /data/app-private.
allow system_server apk_private_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow system_server apk_private_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow system_server apk_private_tmp_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow system_server apk_private_tmp_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Manage files within asec containers.
allow system_server asec_apk_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow system_server asec_apk_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow system_server asec_public_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Manage /data/anr.
allow system_server anr_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow system_server anr_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Manage /data/backup.
allow system_server backup_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow system_server backup_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Write to /data/system/heapdump
allow system_server heapdump_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow system_server heapdump_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Manage /data/misc/adb.
allow system_server adb_keys_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow system_server adb_keys_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Manage /data/misc/sms.
# TODO:  Split into a separate type?
allow system_server radio_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow system_server radio_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Manage /data/misc/systemkeys.
allow system_server systemkeys_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow system_server systemkeys_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Access /data/tombstones.
allow system_server tombstone_data_file:dir { open getattr read search ioctl lock };
allow system_server tombstone_data_file:file { getattr open read ioctl lock };

# Manage /data/misc/vpn.
allow system_server vpn_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow system_server vpn_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Manage /data/misc/wifi.
allow system_server wifi_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow system_server wifi_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Manage /data/misc/zoneinfo.
allow system_server zoneinfo_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow system_server zoneinfo_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Walk /data/data subdirectories.
# Types extracted from seapp_contexts type= fields.
allow system_server { system_app_data_file bluetooth_data_file nfc_data_file radio_data_file shell_data_file app_data_file autoplay_data_file }:dir { getattr read search };
# Also permit for unlabeled /data/data subdirectories and
# for unlabeled asec containers on upgrades from 4.2.
allow system_server unlabeled:dir { open getattr read search ioctl lock };
# Read pkg.apk file before it has been relabeled by vold.
allow system_server unlabeled:file { getattr open read ioctl lock };

# Populate com.android.providers.settings/databases/settings.db.
allow system_server system_app_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow system_server system_app_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Receive and use open app data files passed over binder IPC.
# Types extracted from seapp_contexts type= fields.
allow system_server { system_app_data_file bluetooth_data_file nfc_data_file radio_data_file shell_data_file app_data_file }:file { getattr read write };

# Receive and use open /data/media files passed over binder IPC.
allow system_server media_rw_data_file:file { getattr read write };

# Read /file_contexts and /data/security/file_contexts

#line 304
allow system_server security_file:dir { open getattr read search ioctl lock };
#line 304
allow system_server security_file:file { getattr open read ioctl lock };
#line 304


# Relabel apk files.
allow system_server { apk_tmp_file apk_private_tmp_file }:{ dir file } { relabelfrom relabelto };
allow system_server { apk_data_file apk_private_data_file }:{ dir file } { relabelfrom relabelto };

# Relabel wallpaper.
allow system_server system_data_file:file relabelfrom;
allow system_server wallpaper_file:file relabelto;
allow system_server wallpaper_file:file { { { getattr open read ioctl lock } { open append write lock } } rename unlink };

# Backup of wallpaper imagery uses temporary hard links to avoid data churn
allow system_server { system_data_file wallpaper_file }:file link;

# ShortcutManager icons
allow system_server system_data_file:dir relabelfrom;
allow system_server shortcut_manager_icons:dir { { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } } relabelto };
allow system_server shortcut_manager_icons:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Manage ringtones.
allow system_server ringtone_file:dir { { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } } relabelto };
allow system_server ringtone_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Relabel icon file.
allow system_server icon_file:file relabelto;
allow system_server icon_file:file { { { getattr open read ioctl lock } { open append write lock } } unlink };

# FingerprintService.java does a restorecon of the directory /data/system/users/[0-9]+/fpdata(/.*)?
allow system_server system_data_file:dir relabelfrom;

# Property Service write

#line 335

#line 335
allow system_server property_socket:sock_file write;
#line 335
allow system_server init:unix_stream_socket connectto;
#line 335

#line 335
allow system_server system_prop:property_service set;
#line 335

#line 335
allow system_server system_prop:file { getattr open read ioctl lock };
#line 335

#line 335


#line 336

#line 336
allow system_server property_socket:sock_file write;
#line 336
allow system_server init:unix_stream_socket connectto;
#line 336

#line 336
allow system_server safemode_prop:property_service set;
#line 336

#line 336
allow system_server safemode_prop:file { getattr open read ioctl lock };
#line 336

#line 336


#line 337

#line 337
allow system_server property_socket:sock_file write;
#line 337
allow system_server init:unix_stream_socket connectto;
#line 337

#line 337
allow system_server dhcp_prop:property_service set;
#line 337

#line 337
allow system_server dhcp_prop:file { getattr open read ioctl lock };
#line 337

#line 337


#line 338

#line 338
allow system_server property_socket:sock_file write;
#line 338
allow system_server init:unix_stream_socket connectto;
#line 338

#line 338
allow system_server net_radio_prop:property_service set;
#line 338

#line 338
allow system_server net_radio_prop:file { getattr open read ioctl lock };
#line 338

#line 338


#line 339

#line 339
allow system_server property_socket:sock_file write;
#line 339
allow system_server init:unix_stream_socket connectto;
#line 339

#line 339
allow system_server system_radio_prop:property_service set;
#line 339

#line 339
allow system_server system_radio_prop:file { getattr open read ioctl lock };
#line 339

#line 339


#line 340

#line 340
allow system_server property_socket:sock_file write;
#line 340
allow system_server init:unix_stream_socket connectto;
#line 340

#line 340
allow system_server debug_prop:property_service set;
#line 340

#line 340
allow system_server debug_prop:file { getattr open read ioctl lock };
#line 340

#line 340


#line 341

#line 341
allow system_server property_socket:sock_file write;
#line 341
allow system_server init:unix_stream_socket connectto;
#line 341

#line 341
allow system_server powerctl_prop:property_service set;
#line 341

#line 341
allow system_server powerctl_prop:file { getattr open read ioctl lock };
#line 341

#line 341


#line 342

#line 342
allow system_server property_socket:sock_file write;
#line 342
allow system_server init:unix_stream_socket connectto;
#line 342

#line 342
allow system_server fingerprint_prop:property_service set;
#line 342

#line 342
allow system_server fingerprint_prop:file { getattr open read ioctl lock };
#line 342

#line 342


#line 343

#line 343
allow system_server property_socket:sock_file write;
#line 343
allow system_server init:unix_stream_socket connectto;
#line 343

#line 343
allow system_server device_logging_prop:property_service set;
#line 343

#line 343
allow system_server device_logging_prop:file { getattr open read ioctl lock };
#line 343

#line 343


#line 344

#line 344
allow system_server property_socket:sock_file write;
#line 344
allow system_server init:unix_stream_socket connectto;
#line 344

#line 344
allow system_server wifi_log_prop:property_service set;
#line 344

#line 344
allow system_server wifi_log_prop:file { getattr open read ioctl lock };
#line 344

#line 344


# ctl interface

#line 347

#line 347
allow system_server property_socket:sock_file write;
#line 347
allow system_server init:unix_stream_socket connectto;
#line 347

#line 347
allow system_server ctl_default_prop:property_service set;
#line 347

#line 347
allow system_server ctl_default_prop:file { getattr open read ioctl lock };
#line 347

#line 347


#line 348

#line 348
allow system_server property_socket:sock_file write;
#line 348
allow system_server init:unix_stream_socket connectto;
#line 348

#line 348
allow system_server ctl_bugreport_prop:property_service set;
#line 348

#line 348
allow system_server ctl_bugreport_prop:file { getattr open read ioctl lock };
#line 348

#line 348


# Create a socket for receiving info from wpa.
type_transition system_server wifi_data_file:sock_file system_wpa_socket;
type_transition system_server wpa_socket:sock_file system_wpa_socket;
allow system_server wpa_socket:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow system_server system_wpa_socket:sock_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Remove sockets created by wpa_supplicant
allow system_server wpa_socket:sock_file unlink;

# Create a socket for connections from debuggerd.
type_transition system_server system_data_file:sock_file system_ndebug_socket "ndebugsocket";
allow system_server system_ndebug_socket:sock_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Manage cache files.
allow system_server { cache_file cache_recovery_file }:dir { relabelfrom { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } } };
allow system_server { cache_file cache_recovery_file }:file { relabelfrom { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } } };
allow system_server { cache_file cache_recovery_file }:fifo_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Run system programs, e.g. dexopt.
allow system_server system_file:file { getattr execute execute_no_trans };

# LocationManager(e.g, GPS) needs to read and write
# to uart driver and ctrl proc entry
allow system_server gps_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow system_server gps_control:file { { getattr open read ioctl lock } { open append write lock } };

# Allow system_server to use app-created sockets and pipes.
allow system_server { appdomain autoplay_app }:{ tcp_socket udp_socket } { getattr getopt setopt read write shutdown };
allow system_server { appdomain autoplay_app }:{ fifo_file unix_stream_socket } { getattr read write };

# Allow abstract socket connection
allow system_server rild:unix_stream_socket connectto;

# BackupManagerService needs to manipulate backup data files
allow system_server cache_backup_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow system_server cache_backup_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
# LocalTransport works inside /cache/backup
allow system_server cache_private_backup_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow system_server cache_private_backup_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Allow system to talk to usb device
allow system_server usb_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow system_server usb_device:dir { open getattr read search ioctl lock };

# Allow system to talk to sensors
allow system_server sensors_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Read from HW RNG (needed by EntropyMixer).
allow system_server hw_random_device:chr_file { getattr open read ioctl lock };

# Read and delete files under /dev/fscklogs.

#line 401
allow system_server fscklogs:dir { open getattr read search ioctl lock };
#line 401
allow system_server fscklogs:{ file lnk_file } { getattr open read ioctl lock };
#line 401

allow system_server fscklogs:dir { write remove_name };
allow system_server fscklogs:file unlink;

# logd access, system_server inherit logd write socket
# (urge is to deprecate this long term)
allow system_server zygote:unix_dgram_socket write;

# Read from log daemon.

#line 410
allow system_server logcat_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 410

#line 410

#line 410

#line 410
allow system_server logdr_socket:sock_file write;
#line 410
allow system_server logd:unix_stream_socket connectto;
#line 410

#line 410

#line 410


# Be consistent with DAC permissions. Allow system_server to write to
# /sys/module/lowmemorykiller/parameters/adj
# /sys/module/lowmemorykiller/parameters/minfree
allow system_server sysfs_lowmemorykiller:file { getattr { open append write lock } };

# Read /sys/fs/pstore/console-ramoops
# Don't worry about overly broad permissions for now, as there's
# only one file in /sys/fs/pstore
allow system_server pstorefs:dir { open getattr read search ioctl lock };
allow system_server pstorefs:file { getattr open read ioctl lock };

# /sys access
allow system_server sysfs_zram:dir search;
allow system_server sysfs_zram:file { getattr open read ioctl lock };

allow system_server audioserver_service:service_manager find;
allow system_server cameraserver_service:service_manager find;
allow system_server drmserver_service:service_manager find;
allow system_server batteryproperties_service:service_manager find;
allow system_server keystore_service:service_manager find;
allow system_server gatekeeper_service:service_manager find;
allow system_server fingerprintd_service:service_manager find;
allow system_server mediaserver_service:service_manager find;
allow system_server mediaextractor_service:service_manager find;
allow system_server mediacodec_service:service_manager find;
allow system_server mediadrmserver_service:service_manager find;
allow system_server netd_service:service_manager find;
allow system_server nfc_service:service_manager find;
allow system_server overlay_service:service_manager find;
allow system_server radio_service:service_manager find;
allow system_server system_server_service:service_manager { add find };
allow system_server surfaceflinger_service:service_manager find;

allow system_server keystore:keystore_key {
	get_state
	get
	insert
	delete
	exist
	list
	reset
	password
	lock
	unlock
	is_empty
	sign
	verify
	grant
	duplicate
	clear_uid
	add_auth
	user_changed
};

# Allow system server to search and write to the persistent factory reset
# protection partition. This block device does not get wiped in a factory reset.
allow system_server block_device:dir search;
allow system_server frp_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Clean up old cgroups
allow system_server cgroup:dir { remove_name rmdir };

# /oem access

#line 475
allow system_server oemfs:dir { open getattr read search ioctl lock };
#line 475
allow system_server oemfs:{ file lnk_file } { getattr open read ioctl lock };
#line 475


# Allow resolving per-user storage symlinks
allow system_server { mnt_user_file storage_file }:dir { getattr search };
allow system_server { mnt_user_file storage_file }:lnk_file { getattr read };

# Allow statfs() on storage devices, which happens fast enough that
# we shouldn't be killed during unsafe removal
allow system_server sdcard_type:dir { getattr search };

# Traverse into expanded storage
allow system_server mnt_expand_file:dir { open getattr read search ioctl lock };

# Allow system process to relabel the fingerprint directory after mkdir
# and delete the directory and files when no longer needed
allow system_server fingerprintd_data_file:dir { { open getattr read search ioctl lock } remove_name rmdir relabelto write };
allow system_server fingerprintd_data_file:file { getattr unlink };

# Allow system process to read network MAC address
allow system_server sysfs_mac_address:file { getattr open read ioctl lock };


#line 496
  # Allow system server to create and write method traces in /data/misc/trace.
#line 496
  allow system_server method_trace_data_file:dir { open search write add_name remove_name lock };
#line 496
  allow system_server method_trace_data_file:file { create { open append write lock } };
#line 496

#line 496
  # Allow system server to read dmesg
#line 496
  allow system_server kernel:system syslog_read;
#line 503


# For AppFuse.
allow system_server vold:fd use;
allow system_server fuse_device:chr_file { read write ioctl getattr };

# For configuring sdcardfs
allow system_server configfs:dir { { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } } };
allow system_server configfs:file { getattr open unlink write };

# Connect to adbd and use a socket transferred from it.
# Used for e.g. jdwp.
allow system_server adbd:unix_stream_socket connectto;
allow system_server adbd:fd use;
allow system_server adbd:unix_stream_socket { getattr getopt ioctl read write shutdown };

# Access to /data/media.
# This should be removed if sdcardfs is modified to alter the secontext for its
# accesses to the underlying FS.
allow system_server media_rw_data_file:dir search;

# Allow invoking tools like "timeout"
allow system_server toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Postinstall
#
# For OTA dexopt, allow calls coming from postinstall.

#line 530
# Call the server domain and optionally transfer references to it.
#line 530
allow system_server postinstall:binder { call transfer };
#line 530
# Allow the serverdomain to transfer references to the client on the reply.
#line 530
allow postinstall system_server:binder transfer;
#line 530
# Receive and use open files from the server.
#line 530
allow system_server postinstall:fd use;
#line 530


allow system_server postinstall:fifo_file write;
allow system_server update_engine:fd use;
allow system_server update_engine:fifo_file write;

# Access to /data/preloads
allow system_server preloads_data_file:file { { getattr open read ioctl lock } unlink };
allow system_server preloads_data_file:dir { { open getattr read search ioctl lock } write remove_name };

###
### Neverallow rules
###
### system_server should NEVER do any of this

# Do not allow opening files from external storage as unsafe ejection
# could cause the kernel to kill the system_server.
neverallow system_server sdcard_type:dir { open read write };
neverallow system_server sdcard_type:file { { getattr open read ioctl lock } { open append write lock } };

# system server should never be opening zygote spawned app data
# files directly. Rather, they should always be passed via a
# file descriptor.
# Types extracted from seapp_contexts type= fields, excluding
# those types that system_server needs to open directly.
neverallow system_server { bluetooth_data_file nfc_data_file shell_data_file app_data_file }:file open;

# system_server should never be executing dex2oat. This is either
# a bug (for example, bug 16317188), or represents an attempt by
# system server to dynamically load a dex file, something we do not
# want to allow.
neverallow system_server dex2oat_exec:file { execute execute_no_trans };

# system_server should never execute anything from /data except for /data/dalvik-cache files.
neverallow system_server {
  data_file_type
  -dalvikcache_data_file #mapping with PROT_EXEC
}:file { execute execute_no_trans };

# The only block device system_server should be accessing is
# the frp_block_device. This helps avoid a system_server to root
# escalation by writing to raw block devices.
neverallow system_server { dev_type -frp_block_device }:blk_file { { append create link unlink relabelfrom rename setattr write } open read ioctl lock };

# system_server should never use JIT functionality
neverallow system_server self:process execmem;
neverallow system_server ashmem_device:chr_file execute;
neverallow system_server system_server_tmpfs:file execute;
#line 1 "system/sepolicy/tee.te"
##
# trusted execution environment (tee) daemon
#
type tee, domain, domain_deprecated;
type tee_exec, exec_type, file_type;
type tee_device, dev_type;
type tee_data_file, file_type, data_file_type;


#line 9

#line 9
# Allow the necessary permissions.
#line 9

#line 9
# Old domain may exec the file and transition to the new domain.
#line 9
allow init tee_exec:file { getattr open read execute };
#line 9
allow init tee:process transition;
#line 9
# New domain is entered by executing the file.
#line 9
allow tee tee_exec:file { entrypoint open read execute getattr };
#line 9
# New domain can send SIGCHLD to its caller.
#line 9
allow tee init:process sigchld;
#line 9
# Enable AT_SECURE, i.e. libc secure mode.
#line 9
#line 9
#line 9
allow init tee:process { siginh rlimitinh };
#line 9

#line 9
# Make the transition occur by default.
#line 9
type_transition init tee_exec:process tee;
#line 9

#line 9

#line 9
type tee_tmpfs, file_type;
#line 9
type_transition tee tmpfs:file tee_tmpfs;
#line 9
allow tee tee_tmpfs:file { read write };
#line 9

#line 9

allow tee self:capability { dac_override };
allow tee tee_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow tee tee_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow tee tee_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow tee self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow tee self:netlink_generic_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
#line 1 "system/sepolicy/toolbox.te"
# Any toolbox command run by init.
# At present, the only known usage is for running mkswap via fs_mgr.
# Do NOT use this domain for toolbox when run by any other domain.
type toolbox, domain, domain_deprecated;
type toolbox_exec, exec_type, file_type;


#line 7

#line 7
# Allow the necessary permissions.
#line 7

#line 7
# Old domain may exec the file and transition to the new domain.
#line 7
allow init toolbox_exec:file { getattr open read execute };
#line 7
allow init toolbox:process transition;
#line 7
# New domain is entered by executing the file.
#line 7
allow toolbox toolbox_exec:file { entrypoint open read execute getattr };
#line 7
# New domain can send SIGCHLD to its caller.
#line 7
allow toolbox init:process sigchld;
#line 7
# Enable AT_SECURE, i.e. libc secure mode.
#line 7
#line 7
#line 7
allow init toolbox:process { siginh rlimitinh };
#line 7

#line 7
# Make the transition occur by default.
#line 7
type_transition init toolbox_exec:process toolbox;
#line 7

#line 7

#line 7
type toolbox_tmpfs, file_type;
#line 7
type_transition toolbox tmpfs:file toolbox_tmpfs;
#line 7
allow toolbox toolbox_tmpfs:file { read write };
#line 7

#line 7


# /dev/__null__ created by init prior to policy load,
# open fd inherited by fsck.
allow toolbox tmpfs:chr_file { read write ioctl };

# Inherit and use pty created by android_fork_execvp_ext().
allow toolbox devpts:chr_file { read write getattr ioctl };

# mkswap-specific.
# Read/write block devices used for swap partitions.
# Assign swap_block_device type any such partition in your
# device/<vendor>/<product>/sepolicy/file_contexts file.
allow toolbox block_device:dir search;
allow toolbox swap_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Only allow entry from init via the toolbox binary.
neverallow { domain -init } toolbox:process transition;
neverallow * toolbox:process dyntransition;
neverallow toolbox { file_type fs_type -toolbox_exec}:file entrypoint;
#line 1 "system/sepolicy/tzdatacheck.te"
# The tzdatacheck command run by init.
type tzdatacheck, domain, domain_deprecated;
type tzdatacheck_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init tzdatacheck_exec:file { getattr open read execute };
#line 5
allow init tzdatacheck:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow tzdatacheck tzdatacheck_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow tzdatacheck init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init tzdatacheck:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init tzdatacheck_exec:process tzdatacheck;
#line 5

#line 5

#line 5
type tzdatacheck_tmpfs, file_type;
#line 5
type_transition tzdatacheck tmpfs:file tzdatacheck_tmpfs;
#line 5
allow tzdatacheck tzdatacheck_tmpfs:file { read write };
#line 5

#line 5


allow tzdatacheck zoneinfo_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow tzdatacheck zoneinfo_data_file:file unlink;
#line 1 "system/sepolicy/ueventd.te"
# ueventd seclabel is specified in init.rc since
# it lives in the rootfs and has no unique file type.
type ueventd, domain, domain_deprecated;

#line 4
type ueventd_tmpfs, file_type;
#line 4
type_transition ueventd tmpfs:file ueventd_tmpfs;
#line 4
allow ueventd ueventd_tmpfs:file { read write };
#line 4


# TODO: why is ueventd using __kmsg__ when it should just create
# and use /dev/kmsg instead?
type_transition ueventd device:chr_file klog_device "__kmsg__";
allow ueventd klog_device:chr_file { create open write unlink };


#line 11
allow ueventd security_file:dir { open getattr read search ioctl lock };
#line 11
allow ueventd security_file:file { getattr open read ioctl lock };
#line 11

allow ueventd init:process sigchld;
allow ueventd self:capability { chown mknod net_admin setgid fsetid sys_rawio dac_override fowner };
allow ueventd device:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow ueventd device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow ueventd sysfs:file { { getattr open read ioctl lock } { open append write lock } };
allow ueventd sysfs_usb:file { open append write lock };
allow ueventd sysfs_hwrandom:file { open append write lock };
allow ueventd sysfs_zram_uevent:file { open append write lock };
allow ueventd sysfs_type:{ file lnk_file } { relabelfrom relabelto setattr getattr };
allow ueventd sysfs_type:dir { relabelfrom relabelto setattr { open getattr read search ioctl lock } };
allow ueventd sysfs_devices_system_cpu:file { { getattr open read ioctl lock } { open append write lock } };
allow ueventd tmpfs:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow ueventd dev_type:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow ueventd dev_type:lnk_file { create unlink };
allow ueventd dev_type:chr_file { create setattr unlink };
allow ueventd dev_type:blk_file { relabelfrom relabelto create setattr unlink };
allow ueventd self:netlink_kobject_uevent_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow ueventd efs_file:dir search;
allow ueventd efs_file:file { getattr open read ioctl lock };

# Use setfscreatecon() to label /dev directories and files.
allow ueventd self:process setfscreate;

#####
##### neverallow rules
#####

# ueventd must never set properties, otherwise deadlocks may occur.
# https://android-review.googlesource.com/#/c/133120/6/init/devices.cpp@941
# No writing to the property socket, connecting to init, or setting properties.
neverallow ueventd property_socket:sock_file write;
neverallow ueventd init:unix_stream_socket connectto;
neverallow ueventd property_type:property_service set;
#line 1 "system/sepolicy/uncrypt.te"
# uncrypt
type uncrypt, domain, domain_deprecated, mlstrustedsubject;
type uncrypt_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init uncrypt_exec:file { getattr open read execute };
#line 5
allow init uncrypt:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow uncrypt uncrypt_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow uncrypt init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init uncrypt:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init uncrypt_exec:process uncrypt;
#line 5

#line 5

#line 5
type uncrypt_tmpfs, file_type;
#line 5
type_transition uncrypt tmpfs:file uncrypt_tmpfs;
#line 5
allow uncrypt uncrypt_tmpfs:file { read write };
#line 5

#line 5


allow uncrypt self:capability dac_override;

# Read OTA zip file from /data/data/com.google.android.gsf/app_download

#line 10
allow uncrypt app_data_file:dir { open getattr read search ioctl lock };
#line 10
allow uncrypt app_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 10



#line 12
  # For debugging, allow /data/local/tmp access
#line 12
  
#line 12
allow uncrypt shell_data_file:dir { open getattr read search ioctl lock };
#line 12
allow uncrypt shell_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 12

#line 15


# Read /cache/recovery/command
# Read /cache/recovery/uncrypt_file
allow uncrypt cache_recovery_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow uncrypt cache_recovery_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Write to /dev/socket/uncrypt

#line 23

#line 23

#line 23
allow uncrypt uncrypt_socket:sock_file write;
#line 23
allow uncrypt uncrypt:unix_stream_socket connectto;
#line 23

#line 23


# Set a property to reboot the device.

#line 26

#line 26
allow uncrypt property_socket:sock_file write;
#line 26
allow uncrypt init:unix_stream_socket connectto;
#line 26

#line 26
allow uncrypt powerctl_prop:property_service set;
#line 26

#line 26
allow uncrypt powerctl_prop:file { getattr open read ioctl lock };
#line 26

#line 26


# Raw writes to block device
allow uncrypt self:capability sys_rawio;
allow uncrypt block_device:blk_file { open append write lock };
auditallow uncrypt block_device:blk_file { open append write lock };
allow uncrypt misc_block_device:blk_file { open append write lock };
allow uncrypt block_device:dir { open getattr read search ioctl lock };

# Access userdata block device.
allow uncrypt userdata_block_device:blk_file { open append write lock };
#line 1 "system/sepolicy/untrusted_app.te"
###
### Untrusted apps.
###
### This file defines the rules for untrusted apps.
### Apps are labeled based on mac_permissions.xml (maps signer and
### optionally package name to seinfo value) and seapp_contexts (maps UID
### and optionally seinfo value to domain for process and type for data
### directory).  The untrusted_app domain is the default assignment in
### seapp_contexts for any app with UID between APP_AID (10000)
### and AID_ISOLATED_START (99000) if the app has no specific seinfo
### value as determined from mac_permissions.xml.  In current AOSP, this
### domain is assigned to all non-system apps as well as to any system apps
### that are not signed by the platform key.  To move
### a system app into a specific domain, add a signer entry for it to
### mac_permissions.xml and assign it one of the pre-existing seinfo values
### or define and use a new seinfo value in both mac_permissions.xml and
### seapp_contexts.
###
### untrusted_app includes all the appdomain rules, plus the
### additional following rules:
###

type untrusted_app, domain;

#line 24
typeattribute untrusted_app appdomain;
#line 24
# Label ashmem objects with our own unique type.
#line 24

#line 24
type untrusted_app_tmpfs, file_type;
#line 24
type_transition untrusted_app tmpfs:file untrusted_app_tmpfs;
#line 24
allow untrusted_app untrusted_app_tmpfs:file { read write };
#line 24

#line 24
# Map with PROT_EXEC.
#line 24
allow untrusted_app untrusted_app_tmpfs:file execute;
#line 24


#line 25
typeattribute untrusted_app netdomain;
#line 25


#line 26
typeattribute untrusted_app bluetoothdomain;
#line 26


# Some apps ship with shared libraries and binaries that they write out
# to their sandbox directory and then execute.
allow untrusted_app app_data_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } execmod };

# ASEC
allow untrusted_app asec_apk_file:file { getattr open read ioctl lock };
# Execute libs in asec containers.
allow untrusted_app asec_public_file:file { execute execmod };

# Allow the allocation and use of ptys
# Used by: https://play.google.com/store/apps/details?id=jackpal.androidterm

#line 39
# Each domain gets a unique devpts type.
#line 39
type untrusted_app_devpts, fs_type;
#line 39
# Label the pty with the unique type when created.
#line 39
type_transition untrusted_app devpts:chr_file untrusted_app_devpts;
#line 39
# Allow use of the pty after creation.
#line 39
allow untrusted_app untrusted_app_devpts:chr_file { open getattr read write ioctl };
#line 39
# Note: devpts:dir search and ptmx_device:chr_file rw_file_perms
#line 39
# allowed to everyone via domain.te.
#line 39


# Used by Finsky / Android "Verify Apps" functionality when
# running "adb install foo.apk".
# TODO: Long term, we don't want apps probing into shell data files.
# Figure out a way to remove these rules.
allow untrusted_app shell_data_file:file { getattr open read ioctl lock };
allow untrusted_app shell_data_file:dir { open getattr read search ioctl lock };

# Read and write system app data files passed over Binder.
# Motivating case was /data/data/com.android.settings/cache/*.jpg for
# cropping or taking user photos.
allow untrusted_app system_app_data_file:file { read write getattr };

#
# Rules migrated from old app domains coalesced into untrusted_app.
# This includes what used to be media_app, shared_app, and release_app.
#

# Access to /data/media.
allow untrusted_app media_rw_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow untrusted_app media_rw_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Traverse into /mnt/media_rw for bypassing FUSE daemon
# TODO: narrow this to just MediaProvider
allow untrusted_app mnt_media_rw_file:dir search;

# allow cts to query all services
allow untrusted_app servicemanager:service_manager list;

allow untrusted_app audioserver_service:service_manager find;
allow untrusted_app cameraserver_service:service_manager find;
allow untrusted_app drmserver_service:service_manager find;
allow untrusted_app mediaserver_service:service_manager find;
allow untrusted_app mediaextractor_service:service_manager find;
allow untrusted_app mediacodec_service:service_manager find;
allow untrusted_app mediadrmserver_service:service_manager find;
allow untrusted_app nfc_service:service_manager find;
allow untrusted_app radio_service:service_manager find;
allow untrusted_app surfaceflinger_service:service_manager find;
allow untrusted_app app_api_service:service_manager find;

# Allow GMS core to access perfprofd output, which is stored
# in /data/misc/perfprofd/. GMS core will need to list all
# data stored in that directory to process them one by one.

#line 84
  allow untrusted_app perfprofd_data_file:file { getattr open read ioctl lock };
#line 84
  allow untrusted_app perfprofd_data_file:dir { open getattr read search ioctl lock };
#line 87


# gdbserver for ndk-gdb ptrace attaches to app process.
allow untrusted_app self:process ptrace;

# Programs routinely attempt to scan through /system, looking
# for files. Suppress the denials when they occur.

# TODO: switch to meminfo service
allow untrusted_app proc_meminfo:file { getattr open read ioctl lock };

# https://code.google.com/p/chromium/issues/detail?id=586021
allow untrusted_app proc:file { getattr open read ioctl lock };
# access /proc/net/xt_qtguid/stats

#line 102
allow untrusted_app proc_net:dir { open getattr read search ioctl lock };
#line 102
allow untrusted_app proc_net:{ file lnk_file } { getattr open read ioctl lock };
#line 102


# Cts: HwRngTest
allow untrusted_app sysfs_hwrandom:dir search;
allow untrusted_app sysfs_hwrandom:file { getattr open read ioctl lock };

###
### neverallow rules
###

# Receive or send uevent messages.
neverallow untrusted_app domain:netlink_kobject_uevent_socket *;

# Receive or send generic netlink messages
neverallow untrusted_app domain:netlink_socket *;

# Too much leaky information in debugfs. It's a security
# best practice to ensure these files aren't readable.
neverallow untrusted_app debugfs_type:file read;

# Do not allow untrusted apps to register services.
# Only trusted components of Android should be registering
# services.
neverallow untrusted_app service_manager_type:service_manager add;

# Do not allow untrusted_apps to connect to the property service
# or set properties. b/10243159
neverallow untrusted_app property_socket:sock_file write;
neverallow untrusted_app init:unix_stream_socket connectto;
neverallow untrusted_app property_type:property_service set;

# Do not allow untrusted_app to be assigned mlstrustedsubject.
# This would undermine the per-user isolation model being
# enforced via levelFrom=user in seapp_contexts and the mls
# constraints.  As there is no direct way to specify a neverallow
# on attribute assignment, this relies on the fact that fork
# permission only makes sense within a domain (hence should
# never be granted to any other domain within mlstrustedsubject)
# and untrusted_app is allowed fork permission to itself.
neverallow untrusted_app mlstrustedsubject:process fork;

# Do not allow untrusted_app to hard link to any files.
# In particular, if untrusted_app links to other app data
# files, installd will not be able to guarantee the deletion
# of the linked to file. Hard links also contribute to security
# bugs, so we want to ensure untrusted_app never has this
# capability.
neverallow untrusted_app file_type:file link;

# Do not allow untrusted_app to access network MAC address file
neverallow untrusted_app sysfs_mac_address:file { { append create link unlink relabelfrom rename setattr write } open read ioctl lock };

# Restrict socket ioctls. Either 1. disallow privileged ioctls, 2. disallow the
# ioctl permission, or 3. disallow the socket class.
neverallowxperm untrusted_app domain:{ rawip_socket tcp_socket udp_socket } ioctl 
#line 156
{
#line 156
# qualcomm rmnet ioctls
#line 156
0x00006900 0x00006902
#line 156
# socket ioctls
#line 156
0x0000890b 0x0000890c 0x0000890d 0x00008911 0x00008914 0x00008916
#line 156
0x00008918 0x0000891a 0x0000891c 0x0000891d 0x0000891e 0x0000891f
#line 156
0x00008920 0x00008922 0x00008923 0x00008924 0x00008925 0x00008926
#line 156
0x00008927 0x00008929 0x00008930 0x00008931 0x00008932
#line 156
0x00008934 0x00008935 0x00008936 0x00008937 0x00008940 0x00008941
#line 156
0x00008943 0x00008946 0x00008947 0x00008948 0x00008949 0x0000894a
#line 156
0x0000894b 0x00008953 0x00008954 0x00008955 0x00008960 0x00008961 0x00008962 0x00008970
#line 156
0x00008971 0x00008980 0x00008981 0x00008982 0x00008983 0x00008990
#line 156
0x00008991 0x00008992 0x00008993 0x00008994
#line 156
0x00008995 0x000089a0 0x000089a1 0x000089a2 0x000089a3 0x000089b0
#line 156
# device and protocol specific ioctls
#line 156
0x000089f0-0x000089ff
#line 156
0x000089e0-0x000089ef
#line 156
# Wireless extension ioctls
#line 156
0x00008b00 0x00008b02 0x00008b04 0x00008b06 0x00008b08 0x00008b0a
#line 156
0x00008b0c 0x00008b0e 0x00008b10 0x00008b14 0x00008b15 0x00008b16 0x00008b17
#line 156
0x00008b18 0x00008b19 0x00008b1a 0x00008b1b 0x00008b1c 0x00008b1d
#line 156
0x00008b20 0x00008b22 0x00008b24 0x00008b26 0x00008b28 0x00008b2a
#line 156
0x00008b2b 0x00008b2c 0x00008b30 0x00008b31 0x00008b32 0x00008b33
#line 156
0x00008b34 0x00008b35 0x00008b36
#line 156
# Dev private ioctl i.e. hardware specific ioctls
#line 156
0x00008be0-0x00008bff
#line 156
};
neverallow untrusted_app *:{ netlink_route_socket netlink_selinux_socket } ioctl;
neverallow untrusted_app *:{
  socket netlink_socket packet_socket key_socket appletalk_socket
  netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket
  netlink_xfrm_socket netlink_audit_socket netlink_ip6fw_socket
  netlink_dnrt_socket netlink_kobject_uevent_socket tun_socket
  netlink_iscsi_socket netlink_fib_lookup_socket netlink_connector_socket
  netlink_netfilter_socket netlink_generic_socket netlink_scsitransport_socket
  netlink_rdma_socket netlink_crypto_socket
} *;

# Do not allow untrusted_app access to /cache
neverallow untrusted_app { cache_file cache_recovery_file }:dir ~{ { open getattr read search ioctl lock } };
neverallow untrusted_app { cache_file cache_recovery_file }:file ~{ read getattr };

# Do not allow untrusted_app to set system properties.
neverallow untrusted_app property_socket:sock_file write;
neverallow untrusted_app property_type:property_service set;

# Do not allow untrusted_app to create/unlink files outside of its sandbox,
# internal storage or sdcard.
# World accessible data locations allow application to fill the device
# with unaccounted for data. This data will not get removed during
# application un-installation.
neverallow untrusted_app {
  fs_type
  -fuse                     # sdcard
  -sdcardfs                 # sdcard
  file_type
  -app_data_file            # The apps sandbox itself
  -media_rw_data_file       # Internal storage. Known that apps can
                            # leave artfacts here after uninstall.
  -user_profile_data_file   # Access to profile files
  -user_profile_foreign_dex_data_file   # Access to profile files
  
#line 191
    -method_trace_data_file # only on ro.debuggable=1
#line 191
    -coredump_file          # userdebug/eng only
#line 191
  
#line 195
}:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } { create unlink };

# Do not allow untrusted_app to directly open tun_device
neverallow untrusted_app tun_device:chr_file open;

# Only allow appending to /data/anr/traces.txt (b/27853304, b/18340553)
neverallow untrusted_app anr_data_file:file ~{ open append };
neverallow untrusted_app anr_data_file:dir ~search;
#line 1 "system/sepolicy/update_engine.te"
# Domain for update_engine daemon.
# update_engine uses the boot_control_hal.
type update_engine, domain, domain_deprecated, boot_control_hal;
type update_engine_exec, exec_type, file_type;
type update_engine_data_file, file_type, data_file_type;


#line 7

#line 7
# Allow the necessary permissions.
#line 7

#line 7
# Old domain may exec the file and transition to the new domain.
#line 7
allow init update_engine_exec:file { getattr open read execute };
#line 7
allow init update_engine:process transition;
#line 7
# New domain is entered by executing the file.
#line 7
allow update_engine update_engine_exec:file { entrypoint open read execute getattr };
#line 7
# New domain can send SIGCHLD to its caller.
#line 7
allow update_engine init:process sigchld;
#line 7
# Enable AT_SECURE, i.e. libc secure mode.
#line 7
#line 7
#line 7
allow init update_engine:process { siginh rlimitinh };
#line 7

#line 7
# Make the transition occur by default.
#line 7
type_transition init update_engine_exec:process update_engine;
#line 7

#line 7

#line 7
type update_engine_tmpfs, file_type;
#line 7
type_transition update_engine tmpfs:file update_engine_tmpfs;
#line 7
allow update_engine update_engine_tmpfs:file { read write };
#line 7

#line 7
;

#line 8
typeattribute update_engine netdomain;
#line 8
;

# Following permissions are needed for update_engine.
allow update_engine self:process { setsched };
allow update_engine self:capability { fowner sys_admin };
allow update_engine kmsg_device:chr_file { open append write lock };
allow update_engine update_engine_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

#line 15
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 15
allow update_engine sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 15
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 15
allow update_engine self:capability2 block_suspend;
#line 15
;

# Ignore these denials.

# Allow using persistent storage in /data/misc/update_engine.
allow update_engine update_engine_data_file:dir { { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } } };
allow update_engine update_engine_data_file:file { { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } } };

# Allow update_engine to reach block devices in /dev/block.
allow update_engine block_device:dir search;

# Allow read/write on system and boot partitions.
allow update_engine boot_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };
allow update_engine system_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Don't allow kernel module loading, just silence the logs.

# Allow update_engine to mount on the /postinstall directory and reset the
# labels on the mounted filesystem to postinstall_file.
allow update_engine postinstall_mnt_dir:dir mounton;
allow update_engine postinstall_file:filesystem { mount unmount relabelfrom relabelto };
allow update_engine labeledfs:filesystem relabelfrom;

# Allow update_engine to read and execute postinstall_file.
allow update_engine postinstall_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow update_engine postinstall_file:lnk_file { getattr open read ioctl lock };
allow update_engine postinstall_file:dir { open getattr read search ioctl lock };

# The postinstall program is run by update_engine and will always be tagged as a
# postinstall_file regardless of its attributes in the new system.

#line 47
# Allow the necessary permissions.
#line 47

#line 47
# Old domain may exec the file and transition to the new domain.
#line 47
allow update_engine postinstall_file:file { getattr open read execute };
#line 47
allow update_engine postinstall:process transition;
#line 47
# New domain is entered by executing the file.
#line 47
allow postinstall postinstall_file:file { entrypoint open read execute getattr };
#line 47
# New domain can send SIGCHLD to its caller.
#line 47
allow postinstall update_engine:process sigchld;
#line 47
# Enable AT_SECURE, i.e. libc secure mode.
#line 47
#line 47
#line 47
allow update_engine postinstall:process { siginh rlimitinh };
#line 47

#line 47
# Make the transition occur by default.
#line 47
type_transition update_engine postinstall_file:process postinstall;
#line 47


# A postinstall program is typically a shell script (with a #!), so we allow
# to execute those.
allow update_engine shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Register the service to perform Binder IPC.

#line 54
# Call the servicemanager and transfer references to it.
#line 54
allow update_engine servicemanager:binder { call transfer };
#line 54
# servicemanager performs getpidcon on clients.
#line 54
allow servicemanager update_engine:dir search;
#line 54
allow servicemanager update_engine:file { read open };
#line 54
allow servicemanager update_engine:process getattr;
#line 54
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 54
# all domains in domain.te.
#line 54

allow update_engine update_engine_service:service_manager { add };

# Allow update_engine to call the callback function provided by priv_app.

#line 58
# Call the server domain and optionally transfer references to it.
#line 58
allow update_engine priv_app:binder { call transfer };
#line 58
# Allow the serverdomain to transfer references to the client on the reply.
#line 58
allow priv_app update_engine:binder transfer;
#line 58
# Receive and use open files from the server.
#line 58
allow update_engine priv_app:fd use;
#line 58

#line 1 "system/sepolicy/update_verifier.te"
# update_verifier
# update_verifier uses the boot_control_hal.
type update_verifier, domain, boot_control_hal;
type update_verifier_exec, exec_type, file_type;


#line 6

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init update_verifier_exec:file { getattr open read execute };
#line 6
allow init update_verifier:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow update_verifier update_verifier_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow update_verifier init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
#line 6
#line 6
allow init update_verifier:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init update_verifier_exec:process update_verifier;
#line 6

#line 6

#line 6
type update_verifier_tmpfs, file_type;
#line 6
type_transition update_verifier tmpfs:file update_verifier_tmpfs;
#line 6
allow update_verifier update_verifier_tmpfs:file { read write };
#line 6

#line 6


# TODO: Add rules to allow update_verifier to read system_block_device.
#line 1 "system/sepolicy/vdc.te"
# vdc spawned from init for the following services:
#  defaultcrypto
#  encrypt
#
# We also transition into this domain from dumpstate, when
# collecting bug reports.

type vdc, domain, domain_deprecated;
type vdc_exec, exec_type, file_type;


#line 11

#line 11
# Allow the necessary permissions.
#line 11

#line 11
# Old domain may exec the file and transition to the new domain.
#line 11
allow init vdc_exec:file { getattr open read execute };
#line 11
allow init vdc:process transition;
#line 11
# New domain is entered by executing the file.
#line 11
allow vdc vdc_exec:file { entrypoint open read execute getattr };
#line 11
# New domain can send SIGCHLD to its caller.
#line 11
allow vdc init:process sigchld;
#line 11
# Enable AT_SECURE, i.e. libc secure mode.
#line 11
#line 11
#line 11
allow init vdc:process { siginh rlimitinh };
#line 11

#line 11
# Make the transition occur by default.
#line 11
type_transition init vdc_exec:process vdc;
#line 11

#line 11

#line 11
type vdc_tmpfs, file_type;
#line 11
type_transition vdc tmpfs:file vdc_tmpfs;
#line 11
allow vdc vdc_tmpfs:file { read write };
#line 11

#line 11



#line 13

#line 13

#line 13
allow vdc vold_socket:sock_file write;
#line 13
allow vdc vold:unix_stream_socket connectto;
#line 13

#line 13


# vdc sends information back to dumpstate when "adb bugreport" is used
allow vdc dumpstate:fd use;
allow vdc dumpstate:unix_stream_socket { read write getattr };

# vdc information is written to shell owned bugreport files
allow vdc shell_data_file:file { write getattr };

# Why?
allow vdc dumpstate:unix_dgram_socket { read write };

# vdc can be invoked with logwrapper, so let it write to pty
allow vdc devpts:chr_file { { getattr open read ioctl lock } { open append write lock } };
#line 1 "system/sepolicy/vold.te"
# volume manager
type vold, domain, domain_deprecated;
type vold_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init vold_exec:file { getattr open read execute };
#line 5
allow init vold:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow vold vold_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow vold init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init vold:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init vold_exec:process vold;
#line 5

#line 5

#line 5
type vold_tmpfs, file_type;
#line 5
type_transition vold tmpfs:file vold_tmpfs;
#line 5
allow vold vold_tmpfs:file { read write };
#line 5

#line 5


# Switch to more restrictive domains when executing common tools

#line 8
# Allow the necessary permissions.
#line 8

#line 8
# Old domain may exec the file and transition to the new domain.
#line 8
allow vold sgdisk_exec:file { getattr open read execute };
#line 8
allow vold sgdisk:process transition;
#line 8
# New domain is entered by executing the file.
#line 8
allow sgdisk sgdisk_exec:file { entrypoint open read execute getattr };
#line 8
# New domain can send SIGCHLD to its caller.
#line 8
allow sgdisk vold:process sigchld;
#line 8
# Enable AT_SECURE, i.e. libc secure mode.
#line 8
#line 8
#line 8
allow vold sgdisk:process { siginh rlimitinh };
#line 8

#line 8
# Make the transition occur by default.
#line 8
type_transition vold sgdisk_exec:process sgdisk;
#line 8
;

#line 9
# Allow the necessary permissions.
#line 9

#line 9
# Old domain may exec the file and transition to the new domain.
#line 9
allow vold sdcardd_exec:file { getattr open read execute };
#line 9
allow vold sdcardd:process transition;
#line 9
# New domain is entered by executing the file.
#line 9
allow sdcardd sdcardd_exec:file { entrypoint open read execute getattr };
#line 9
# New domain can send SIGCHLD to its caller.
#line 9
allow sdcardd vold:process sigchld;
#line 9
# Enable AT_SECURE, i.e. libc secure mode.
#line 9
#line 9
#line 9
allow vold sdcardd:process { siginh rlimitinh };
#line 9

#line 9
# Make the transition occur by default.
#line 9
type_transition vold sdcardd_exec:process sdcardd;
#line 9
;

# Read already opened /cache files.
allow vold cache_file:dir { open getattr read search ioctl lock };
allow vold cache_file:file { getattr read };
allow vold cache_file:lnk_file { getattr open read ioctl lock };

# Read access to pseudo filesystems.

#line 17
allow vold proc:dir { open getattr read search ioctl lock };
#line 17
allow vold proc:{ file lnk_file } { getattr open read ioctl lock };
#line 17


#line 18
allow vold proc_net:dir { open getattr read search ioctl lock };
#line 18
allow vold proc_net:{ file lnk_file } { getattr open read ioctl lock };
#line 18


#line 19
allow vold sysfs:dir { open getattr read search ioctl lock };
#line 19
allow vold sysfs:{ file lnk_file } { getattr open read ioctl lock };
#line 19


#line 20
allow vold rootfs:dir { open getattr read search ioctl lock };
#line 20
allow vold rootfs:{ file lnk_file } { getattr open read ioctl lock };
#line 20


# For a handful of probing tools, we choose an even more restrictive
# domain when working with untrusted block devices

#line 24
# Old domain may exec the file and transition to the new domain.
#line 24
allow vold shell_exec:file { getattr open read execute };
#line 24
allow vold blkid:process transition;
#line 24
# New domain is entered by executing the file.
#line 24
allow blkid shell_exec:file { entrypoint open read execute getattr };
#line 24
# New domain can send SIGCHLD to its caller.
#line 24
allow blkid vold:process sigchld;
#line 24
# Enable AT_SECURE, i.e. libc secure mode.
#line 24
#line 24
#line 24
allow vold blkid:process { siginh rlimitinh };
#line 24
;

#line 25
# Old domain may exec the file and transition to the new domain.
#line 25
allow vold shell_exec:file { getattr open read execute };
#line 25
allow vold blkid_untrusted:process transition;
#line 25
# New domain is entered by executing the file.
#line 25
allow blkid_untrusted shell_exec:file { entrypoint open read execute getattr };
#line 25
# New domain can send SIGCHLD to its caller.
#line 25
allow blkid_untrusted vold:process sigchld;
#line 25
# Enable AT_SECURE, i.e. libc secure mode.
#line 25
#line 25
#line 25
allow vold blkid_untrusted:process { siginh rlimitinh };
#line 25
;

#line 26
# Old domain may exec the file and transition to the new domain.
#line 26
allow vold fsck_exec:file { getattr open read execute };
#line 26
allow vold fsck:process transition;
#line 26
# New domain is entered by executing the file.
#line 26
allow fsck fsck_exec:file { entrypoint open read execute getattr };
#line 26
# New domain can send SIGCHLD to its caller.
#line 26
allow fsck vold:process sigchld;
#line 26
# Enable AT_SECURE, i.e. libc secure mode.
#line 26
#line 26
#line 26
allow vold fsck:process { siginh rlimitinh };
#line 26
;

#line 27
# Old domain may exec the file and transition to the new domain.
#line 27
allow vold fsck_exec:file { getattr open read execute };
#line 27
allow vold fsck_untrusted:process transition;
#line 27
# New domain is entered by executing the file.
#line 27
allow fsck_untrusted fsck_exec:file { entrypoint open read execute getattr };
#line 27
# New domain can send SIGCHLD to its caller.
#line 27
allow fsck_untrusted vold:process sigchld;
#line 27
# Enable AT_SECURE, i.e. libc secure mode.
#line 27
#line 27
#line 27
allow vold fsck_untrusted:process { siginh rlimitinh };
#line 27
;

# Allow us to jump into execution domains of above tools
allow vold self:process setexec;

# For sgdisk launched through popen()
allow vold shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

typeattribute vold mlstrustedsubject;
allow vold self:process setfscreate;
allow vold system_file:file { getattr execute execute_no_trans };
allow vold block_device:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow vold device:dir write;
allow vold devpts:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow vold rootfs:dir mounton;
allow vold sdcard_type:dir mounton; # TODO: deprecated in M
allow vold sdcard_type:filesystem { mount remount unmount }; # TODO: deprecated in M
allow vold sdcard_type:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } }; # TODO: deprecated in M
allow vold sdcard_type:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } }; # TODO: deprecated in M

# Manage locations where storage is mounted
allow vold { mnt_media_rw_file storage_file sdcard_type }:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow vold { mnt_media_rw_file storage_file sdcard_type }:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Access to storage that backs emulated FUSE daemons for migration optimization
allow vold media_rw_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow vold media_rw_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Newly created storage dirs are always treated as mount stubs to prevent us
# from accidentally writing when the mount point isn't present.
type_transition vold storage_file:dir storage_stub_file;
type_transition vold mnt_media_rw_file:dir mnt_media_rw_stub_file;

# Allow mounting of storage devices
allow vold { mnt_media_rw_stub_file storage_stub_file }:dir { mounton create rmdir getattr setattr };
allow vold sdcard_type:filesystem { mount unmount remount };

# Manage per-user primary symlinks
allow vold mnt_user_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow vold mnt_user_file:lnk_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Allow to create and mount expanded storage
allow vold mnt_expand_file:dir { { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } } mounton };
allow vold apk_data_file:dir { create getattr setattr };
allow vold shell_data_file:dir { create getattr setattr };

allow vold tmpfs:filesystem { mount unmount };
allow vold tmpfs:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow vold tmpfs:dir mounton;
allow vold self:capability { net_admin dac_override mknod sys_admin chown fowner fsetid };
allow vold self:netlink_kobject_uevent_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow vold app_data_file:dir search;
allow vold app_data_file:file { { getattr open read ioctl lock } { open append write lock } };
allow vold loop_device:blk_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow vold vold_device:blk_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow vold dm_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow vold dm_device:blk_file { { getattr open read ioctl lock } { open append write lock } };
# For vold Process::killProcessesWithOpenFiles function.
allow vold domain:dir { open getattr read search ioctl lock };
allow vold domain:{ file lnk_file } { getattr open read ioctl lock };
allow vold domain:process { signal sigkill };
allow vold self:capability { sys_ptrace kill };

# XXX Label sysfs files with a specific type?
allow vold sysfs:file { { getattr open read ioctl lock } { open append write lock } };

# TODO: added to match above sysfs rule. Remove me?
allow vold sysfs_usb:file { open append write lock };

allow vold kmsg_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Run fsck in the fsck domain.
allow vold fsck_exec:file { { getattr open read ioctl lock } execute };

# Log fsck results
allow vold fscklogs:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow vold fscklogs:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

#
# Rules to support encrypted fs support.
#

# Unmount and mount the fs.
allow vold labeledfs:filesystem { mount unmount remount };

# Access /efs/userdata_footer.
# XXX Split into a separate type?
allow vold efs_file:file { { getattr open read ioctl lock } { open append write lock } };

# Create and mount on /data/tmp_mnt and management of expansion mounts
allow vold system_data_file:dir { create { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } mounton setattr rmdir };

# Set scheduling policy of kernel processes
allow vold kernel:process setsched;

# Property Service

#line 123

#line 123
allow vold property_socket:sock_file write;
#line 123
allow vold init:unix_stream_socket connectto;
#line 123

#line 123
allow vold vold_prop:property_service set;
#line 123

#line 123
allow vold vold_prop:file { getattr open read ioctl lock };
#line 123

#line 123


#line 124

#line 124
allow vold property_socket:sock_file write;
#line 124
allow vold init:unix_stream_socket connectto;
#line 124

#line 124
allow vold powerctl_prop:property_service set;
#line 124

#line 124
allow vold powerctl_prop:file { getattr open read ioctl lock };
#line 124

#line 124


#line 125

#line 125
allow vold property_socket:sock_file write;
#line 125
allow vold init:unix_stream_socket connectto;
#line 125

#line 125
allow vold ctl_fuse_prop:property_service set;
#line 125

#line 125
allow vold ctl_fuse_prop:file { getattr open read ioctl lock };
#line 125

#line 125


#line 126

#line 126
allow vold property_socket:sock_file write;
#line 126
allow vold init:unix_stream_socket connectto;
#line 126

#line 126
allow vold restorecon_prop:property_service set;
#line 126

#line 126
allow vold restorecon_prop:file { getattr open read ioctl lock };
#line 126

#line 126


# ASEC
allow vold asec_image_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow vold asec_image_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };

#line 131
allow vold security_file:dir { open getattr read search ioctl lock };
#line 131
allow vold security_file:file { getattr open read ioctl lock };
#line 131

allow vold asec_apk_file:dir { { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } } mounton relabelfrom relabelto };
allow vold asec_public_file:dir { relabelto setattr };
allow vold asec_apk_file:file { { getattr open read ioctl lock } setattr relabelfrom relabelto };
allow vold asec_public_file:file { relabelto setattr };
# restorecon files in asec containers created on 4.2 or earlier.
allow vold unlabeled:dir { { open getattr read search ioctl lock } setattr relabelfrom };
allow vold unlabeled:file { { getattr open read ioctl lock } setattr relabelfrom };

# Handle wake locks (used for device encryption)

#line 141
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 141
allow vold sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 141
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 141
allow vold self:capability2 block_suspend;
#line 141


# talk to batteryservice

#line 144
# Call the servicemanager and transfer references to it.
#line 144
allow vold servicemanager:binder { call transfer };
#line 144
# servicemanager performs getpidcon on clients.
#line 144
allow servicemanager vold:dir search;
#line 144
allow servicemanager vold:file { read open };
#line 144
allow servicemanager vold:process getattr;
#line 144
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 144
# all domains in domain.te.
#line 144


#line 145
# Call the server domain and optionally transfer references to it.
#line 145
allow vold healthd:binder { call transfer };
#line 145
# Allow the serverdomain to transfer references to the client on the reply.
#line 145
allow healthd vold:binder transfer;
#line 145
# Receive and use open files from the server.
#line 145
allow vold healthd:fd use;
#line 145


# talk to keymaster
allow vold tee_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Access userdata block device.
allow vold userdata_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Access metadata block device used for encryption meta-data.
allow vold metadata_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Allow vold to manipulate /data/unencrypted
allow vold unencrypted_data_file:{ file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow vold unencrypted_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };

# Write to /proc/sys/vm/drop_caches
allow vold proc_drop_caches:file { open append write lock };

# Give vold a place where only vold can store files; everyone else is off limits
allow vold vold_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow vold vold_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# linux keyring configuration
allow vold init:key { write search setattr };
allow vold vold:key { write search setattr };

# vold temporarily changes its priority when running benchmarks
allow vold self:capability sys_nice;

# vold needs to chroot into app namespaces to remount when runtime permissions change
allow vold self:capability sys_chroot;
allow vold storage_file:dir mounton;

# For AppFuse.
allow vold fuse_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow vold fuse:filesystem { relabelfrom };
allow vold app_fusefs:filesystem { relabelfrom relabelto };
allow vold app_fusefs:filesystem { mount unmount };

# coldboot of /sys/block
allow vold sysfs_zram:dir { open getattr read search ioctl lock };
allow vold sysfs_zram_uevent:file { { getattr open read ioctl lock } { open append write lock } };

# MoveTask.cpp executes cp and rm
allow vold toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Prepare profile dir for users.
allow vold user_profile_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow vold user_profile_foreign_dex_data_file:dir { getattr setattr };

# Raw writes to misc block device
allow vold misc_block_device:blk_file { open append write lock };

neverallow { domain -vold } vold_data_file:dir ~{ open create read getattr setattr search relabelto ioctl };
neverallow { domain -vold } vold_data_file:{ file lnk_file sock_file fifo_file } ~{ relabelto getattr };
neverallow { domain -vold -init } vold_data_file:dir *;
neverallow { domain -vold -init } vold_data_file:{ file lnk_file sock_file fifo_file } *;
neverallow { domain -vold -init } restorecon_prop:property_service set;

neverallow vold fsck_exec:file execute_no_trans;
#line 1 "system/sepolicy/watchdogd.te"
# watchdogd seclabel is specified in init.<board>.rc
type watchdogd, domain;
allow watchdogd watchdog_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow watchdogd kmsg_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
#line 1 "system/sepolicy/wpa.te"
# wpa - wpa supplicant or equivalent
type wpa, domain, domain_deprecated;
type wpa_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init wpa_exec:file { getattr open read execute };
#line 5
allow init wpa:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow wpa wpa_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow wpa init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init wpa:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init wpa_exec:process wpa;
#line 5

#line 5

#line 5
type wpa_tmpfs, file_type;
#line 5
type_transition wpa tmpfs:file wpa_tmpfs;
#line 5
allow wpa wpa_tmpfs:file { read write };
#line 5

#line 5



#line 7
typeattribute wpa netdomain;
#line 7


allow wpa kernel:system module_request;
allow wpa self:capability { setuid net_admin setgid net_raw };
allow wpa cgroup:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow wpa self:netlink_route_socket nlmsg_write;
allow wpa self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow wpa self:netlink_generic_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow wpa self:packet_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow wpa wifi_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow wpa wifi_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

#line 18
allow wpa system_wpa_socket:sock_file write;
#line 18
allow wpa system_server:unix_dgram_socket sendto;
#line 18



#line 20
# Call the servicemanager and transfer references to it.
#line 20
allow wpa servicemanager:binder { call transfer };
#line 20
# servicemanager performs getpidcon on clients.
#line 20
allow servicemanager wpa:dir search;
#line 20
allow servicemanager wpa:file { read open };
#line 20
allow servicemanager wpa:process getattr;
#line 20
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 20
# all domains in domain.te.
#line 20


# Create a socket for receiving info from wpa
type_transition wpa wifi_data_file:dir wpa_socket "sockets";
allow wpa wpa_socket:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow wpa wpa_socket:sock_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };


#line 27
  allow keystore wpa:dir search;
#line 27
  allow keystore wpa:file { read open };
#line 27
  allow keystore wpa:process getattr;
#line 27
  allow wpa keystore_service:service_manager find;
#line 27
  
#line 27
# Call the server domain and optionally transfer references to it.
#line 27
allow wpa keystore:binder { call transfer };
#line 27
# Allow the serverdomain to transfer references to the client on the reply.
#line 27
allow keystore wpa:binder transfer;
#line 27
# Receive and use open files from the server.
#line 27
allow wpa keystore:fd use;
#line 27

#line 27


# WPA (wifi) has a restricted set of permissions from the default.
allow wpa keystore:keystore_key {
	get
	sign
	verify
};

# Allow wpa_cli to work. wpa_cli creates a socket in
# /data/misc/wifi/sockets which wpa supplicant communicates with.

#line 38
  
#line 38
allow wpa wpa_socket:sock_file write;
#line 38
allow wpa su:unix_dgram_socket sendto;
#line 38

#line 40


###
### neverallow rules
###

# wpa_supplicant should not trust any data from sdcards
neverallow wpa sdcard_type:dir ~getattr;
neverallow wpa sdcard_type:file *;
#line 1 "system/sepolicy/zygote.te"
# zygote
type zygote, domain, domain_deprecated;
type zygote_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init zygote_exec:file { getattr open read execute };
#line 5
allow init zygote:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow zygote zygote_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow zygote init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init zygote:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init zygote_exec:process zygote;
#line 5

#line 5

#line 5
type zygote_tmpfs, file_type;
#line 5
type_transition zygote tmpfs:file zygote_tmpfs;
#line 5
allow zygote zygote_tmpfs:file { read write };
#line 5

#line 5

typeattribute zygote mlstrustedsubject;
# Override DAC on files and switch uid/gid.
allow zygote self:capability { dac_override setgid setuid fowner chown };
# Drop capabilities from bounding set.
allow zygote self:capability setpcap;
# Switch SELinux context to app domains.
allow zygote self:process setcurrent;
allow zygote system_server:process dyntransition;
allow zygote { appdomain autoplay_app }:process dyntransition;
# Allow zygote to read app /proc/pid dirs (b/10455872)
allow zygote { appdomain autoplay_app }:dir { getattr search };
allow zygote { appdomain autoplay_app }:file { { getattr open read ioctl lock } };
# Move children into the peer process group.
allow zygote system_server:process { getpgid setpgid };
allow zygote { appdomain autoplay_app }:process { getpgid setpgid };
# Read system data.
allow zygote system_data_file:dir { open getattr read search ioctl lock };
allow zygote system_data_file:file { getattr open read ioctl lock };
# Write to /data/dalvik-cache.
allow zygote dalvikcache_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow zygote dalvikcache_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
# Create symlinks in /data/dalvik-cache
allow zygote dalvikcache_data_file:lnk_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
# Write to /data/resource-cache
allow zygote resourcecache_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow zygote resourcecache_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
# For art.
allow zygote dalvikcache_data_file:file execute;
# Execute idmap and dex2oat within zygote's own domain.
# TODO:  Should either of these be transitioned to the same domain
# used by installd or stay in-domain for zygote?
allow zygote idmap_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow zygote dex2oat_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
# Control cgroups.
allow zygote cgroup:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow zygote self:capability sys_admin;
# Check validity of SELinux context before use.

#line 43
allow zygote selinuxfs:file { { getattr open read ioctl lock } { open append write lock } };
#line 43
allow zygote kernel:security check_context;
#line 43

# Check SELinux permissions.

#line 45
allow zygote selinuxfs:file { { getattr open read ioctl lock } { open append write lock } };
#line 45
allow zygote kernel:security compute_av;
#line 45
allow zygote self:netlink_selinux_socket { read write create getattr setattr lock relabelfrom relabelto append bind connect listen accept getopt setopt shutdown recvfrom sendto recv_msg send_msg name_bind };
#line 45

# Read /seapp_contexts and /data/security/seapp_contexts

#line 47
allow zygote security_file:dir { open getattr read search ioctl lock };
#line 47
allow zygote security_file:file { getattr open read ioctl lock };
#line 47


# Native bridge functionality requires that zygote replaces
# /proc/cpuinfo with /system/lib/<ISA>/cpuinfo using a bind mount
allow zygote proc_cpuinfo:file mounton;

# Allow remounting rootfs as MS_SLAVE
allow zygote rootfs:dir mounton;
allow zygote tmpfs:filesystem { mount unmount };
allow zygote fuse:filesystem { unmount };
allow zygote sdcardfs:filesystem { unmount };

# Allowed to create user-specific storage source if started before vold
allow zygote mnt_user_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow zygote mnt_user_file:lnk_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
# Allowed to mount user-specific storage into place
allow zygote storage_file:dir { search mounton };

# Handle --invoke-with command when launching Zygote with a wrapper command.
allow zygote zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Read access to pseudo filesystems.

#line 69
allow zygote proc_net:dir { open getattr read search ioctl lock };
#line 69
allow zygote proc_net:{ file lnk_file } { getattr open read ioctl lock };
#line 69


# Root fs.
allow zygote rootfs:file { getattr open read ioctl lock };

# System file accesses.
allow zygote system_file:dir { open getattr read search ioctl lock };
allow zygote system_file:file { getattr open read ioctl lock };


#line 78
  # Allow zygote to create and write method traces in /data/misc/trace.
#line 78
  allow zygote method_trace_data_file:dir { open search write add_name remove_name lock };
#line 78
  allow zygote method_trace_data_file:file { create { open append write lock } };
#line 82


###
### A/B OTA
###

# The zygote is responsible for detecting A/B OTA artifacts and moving them into
# the actual dalvik-cache.

# Allow zygote access to files in /data/ota.
# This includes reading symlinks in /data/ota/dalvik-cache. This is required for PIC mode boot
# images, where the oat file is symlinked to the original file in /system.

#line 94
allow zygote ota_data_file:dir { open getattr read search ioctl lock };
#line 94
allow zygote ota_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 94


# The zygote renames the OTA dalvik-cache to the regular dalvik-cache.
allow zygote ota_data_file:dir { { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } rename reparent };

# And needs to relabel the entries, so as to have the dalvikcache_data_file label.
allow zygote ota_data_file:{ dir file lnk_file } relabelfrom;
allow zygote dalvikcache_data_file:{ dir file lnk_file } relabelto;

# The zygote also cleans up the now-empty dalvik-cache directory after an OTA.
# In case something goes wrong in relabelling, we also need to be able to delete the files that
# have already been moved.
allow zygote ota_data_file:dir rmdir;
allow zygote ota_data_file:{ file lnk_file } unlink;

###
### neverallow rules
###

# Ensure that all types assigned to app processes are included
# in the appdomain attribute, so that all allow and neverallow rules
# written on appdomain are applied to all app processes.
# This is achieved by ensuring that it is impossible for zygote to
# setcon (dyntransition) to any types other than those associated
# with appdomain plus system_server.
neverallow zygote ~{ appdomain autoplay_app system_server }:process dyntransition;

# Zygote should never execute anything from /data except for /data/dalvik-cache files.
neverallow zygote {
  data_file_type
  -dalvikcache_data_file # map PROT_EXEC
}:file { execute execute_no_trans };
#line 1 "device/huawei/angler/sepolicy/atfwd.te"
type atfwd, domain, domain_deprecated;
type atfwd_exec, exec_type, file_type;

# Started by init

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init atfwd_exec:file { getattr open read execute };
#line 5
allow init atfwd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow atfwd atfwd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow atfwd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init atfwd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init atfwd_exec:process atfwd;
#line 5

#line 5

#line 5
type atfwd_tmpfs, file_type;
#line 5
type_transition atfwd tmpfs:file atfwd_tmpfs;
#line 5
allow atfwd atfwd_tmpfs:file { read write };
#line 5

#line 5



#line 7
# Call the servicemanager and transfer references to it.
#line 7
allow atfwd servicemanager:binder { call transfer };
#line 7
# servicemanager performs getpidcon on clients.
#line 7
allow servicemanager atfwd:dir search;
#line 7
allow servicemanager atfwd:file { read open };
#line 7
allow servicemanager atfwd:process getattr;
#line 7
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 7
# all domains in domain.te.
#line 7


#line 8
# Call the server domain and optionally transfer references to it.
#line 8
allow atfwd system_app:binder { call transfer };
#line 8
# Allow the serverdomain to transfer references to the client on the reply.
#line 8
allow system_app atfwd:binder transfer;
#line 8
# Receive and use open files from the server.
#line 8
allow atfwd system_app:fd use;
#line 8


allow atfwd sysfs_msm_subsys:dir { open getattr read search ioctl lock };
allow atfwd sysfs_msm_subsys:lnk_file { getattr open read ioctl lock };


#line 13

#line 13
allow atfwd property_socket:sock_file write;
#line 13
allow atfwd init:unix_stream_socket connectto;
#line 13

#line 13
allow atfwd radio_atfwd_prop:property_service set;
#line 13

#line 13
allow atfwd radio_atfwd_prop:file { getattr open read ioctl lock };
#line 13

#line 13


allow atfwd atfwd_service:service_manager find;

#line 16
type atfwd_qmuxd_socket, file_type;
#line 16

#line 16
# Allow the necessary permissions.
#line 16

#line 16
# Allow the domain to add entries to the directory.
#line 16
allow atfwd qmuxd_socket:dir { { open getattr read search ioctl lock } add_name write };
#line 16
# Allow the domain to create the file.
#line 16
allow atfwd atfwd_qmuxd_socket:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 16
allow atfwd atfwd_qmuxd_socket:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
#line 16

#line 16
# Make the transition occur by default.
#line 16
type_transition atfwd qmuxd_socket:dir atfwd_qmuxd_socket;
#line 16
type_transition atfwd qmuxd_socket:{ file lnk_file sock_file fifo_file } atfwd_qmuxd_socket;
#line 16

#line 16
allow atfwd qmuxd_socket:dir remove_name;
#line 16

#line 16

#line 16

#line 16
allow atfwd qmuxd_socket:sock_file write;
#line 16
allow atfwd qmux:unix_stream_socket connectto;
#line 16

#line 16

#line 16
allow qmux atfwd_qmuxd_socket:sock_file { getattr unlink };
#line 16

#line 1 "device/huawei/angler/sepolicy/audioserver.te"

#line 1
# Call the server domain and optionally transfer references to it.
#line 1
allow audioserver rild:binder { call transfer };
#line 1
# Allow the serverdomain to transfer references to the client on the reply.
#line 1
allow rild audioserver:binder transfer;
#line 1
# Receive and use open files from the server.
#line 1
allow audioserver rild:fd use;
#line 1



#line 3
  allow audioserver diag_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
#line 5


# access for speaker calibration file
allow audioserver persist_file:dir search;
allow audioserver persist_audio_file:dir search;
allow audioserver persist_audio_file:file { getattr open read ioctl lock };

# allow communication w/perfd
allow audioserver perfd_data_file:dir search;
allow audioserver perfd_data_file:sock_file write;
allow audioserver perfd:unix_dgram_socket sendto;
allow audioserver perfd:unix_stream_socket connectto;

# allow reading /sys/devices/soc0/hw_platform for acdb
allow audioserver sysfs:file { getattr open read };
#line 1 "device/huawei/angler/sepolicy/camera.te"
type camera, domain, domain_deprecated;
type camera_exec, exec_type, file_type;

# Started by init

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init camera_exec:file { getattr open read execute };
#line 5
allow init camera:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow camera camera_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow camera init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init camera:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init camera_exec:process camera;
#line 5

#line 5

#line 5
type camera_tmpfs, file_type;
#line 5
type_transition camera tmpfs:file camera_tmpfs;
#line 5
allow camera camera_tmpfs:file { read write };
#line 5

#line 5



#line 7
# Call the servicemanager and transfer references to it.
#line 7
allow camera servicemanager:binder { call transfer };
#line 7
# servicemanager performs getpidcon on clients.
#line 7
allow servicemanager camera:dir search;
#line 7
allow servicemanager camera:file { read open };
#line 7
allow servicemanager camera:process getattr;
#line 7
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 7
# all domains in domain.te.
#line 7


#line 8
# Call the server domain and optionally transfer references to it.
#line 8
allow camera system_server:binder { call transfer };
#line 8
# Allow the serverdomain to transfer references to the client on the reply.
#line 8
allow system_server camera:binder transfer;
#line 8
# Receive and use open files from the server.
#line 8
allow camera system_server:fd use;
#line 8


allow camera self:capability { sys_nice };

allow camera sensorservice_service:service_manager find;

allow camera system_server:unix_stream_socket { read write };

allow camera video_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow camera input_device:dir { open getattr read search ioctl lock };
allow camera input_device:chr_file { getattr open read ioctl lock };
allow camera media_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow camera gpu_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow camera video_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

allow camera sysfs_prox_snsr:file { { getattr open read ioctl lock } { open append write lock } };
allow camera camera_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow camera camera_data_file:sock_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# /persist access
allow camera persist_file:dir search;
allow camera persist_data_file:dir search;
allow camera persist_data_file:file { getattr open read ioctl lock };

allow camera { cameraserver surfaceflinger }:fd use;
#line 1 "device/huawei/angler/sepolicy/cameraserver.te"
# communicate with camera
allow cameraserver camera:unix_dgram_socket sendto;
allow cameraserver camera_data_file:sock_file write;

# allow communication w/perfd
allow cameraserver perfd_data_file:dir search;
allow cameraserver perfd:unix_stream_socket connectto;
allow cameraserver perfd_data_file:sock_file write;
#line 1 "device/huawei/angler/sepolicy/cnd.te"
type cnd, domain, domain_deprecated;
type cnd_exec, exec_type, file_type;

# Started by init

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init cnd_exec:file { getattr open read execute };
#line 5
allow init cnd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow cnd cnd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow cnd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init cnd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init cnd_exec:process cnd;
#line 5

#line 5

#line 5
type cnd_tmpfs, file_type;
#line 5
type_transition cnd tmpfs:file cnd_tmpfs;
#line 5
allow cnd cnd_tmpfs:file { read write };
#line 5

#line 5



#line 7
    allow cnd shared_log_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
#line 9


allow cnd self:capability { setuid setgid net_raw };

allow cnd self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow cnd self:udp_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

allow cnd sysfs_msm_subsys:dir { open getattr read search ioctl lock };
allow cnd sysfs_msm_subsys:lnk_file { { getattr open read ioctl lock } { open append write lock } };


#line 19
type cnd_qmuxd_socket, file_type;
#line 19

#line 19
# Allow the necessary permissions.
#line 19

#line 19
# Allow the domain to add entries to the directory.
#line 19
allow cnd qmuxd_socket:dir { { open getattr read search ioctl lock } add_name write };
#line 19
# Allow the domain to create the file.
#line 19
allow cnd cnd_qmuxd_socket:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 19
allow cnd cnd_qmuxd_socket:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
#line 19

#line 19
# Make the transition occur by default.
#line 19
type_transition cnd qmuxd_socket:dir cnd_qmuxd_socket;
#line 19
type_transition cnd qmuxd_socket:{ file lnk_file sock_file fifo_file } cnd_qmuxd_socket;
#line 19

#line 19
allow cnd qmuxd_socket:dir remove_name;
#line 19

#line 19

#line 19

#line 19
allow cnd qmuxd_socket:sock_file write;
#line 19
allow cnd qmux:unix_stream_socket connectto;
#line 19

#line 19

#line 19
allow qmux cnd_qmuxd_socket:sock_file { getattr unlink };
#line 19


#line 20
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 20
allow cnd sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 20
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 20
allow cnd self:capability2 block_suspend;
#line 20

#line 1 "device/huawei/angler/sepolicy/device.te"
type diag_device, dev_type, mlstrustedobject;
type dpl_device, dev_type;
type drm_block_device, dev_type;
type media_device, dev_type;
type modem_block_device, dev_type;
type persist_block_device, dev_type;
type ramdump_device, dev_type;
type rmnet_device, dev_type;
type shared_log_device, dev_type;
type ssd_block_device, dev_type;
type subsys_modem_device, dev_type;
type thermal_engine_device, dev_type;
type v41_subdev_device, dev_type;
#line 1 "device/huawei/angler/sepolicy/diag.te"
type diag, domain, domain_deprecated;
type diag_exec, exec_type, file_type;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init diag_exec:file { getattr open read execute };
#line 4
allow init diag:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow diag diag_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow diag init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow init diag:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init diag_exec:process diag;
#line 4

#line 4

#line 4
type diag_tmpfs, file_type;
#line 4
type_transition diag tmpfs:file diag_tmpfs;
#line 4
allow diag diag_tmpfs:file { read write };
#line 4

#line 4

#line 1 "device/huawei/angler/sepolicy/domain.te"

#line 1
    allow { domain -appdomain } diag_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
#line 1 "device/huawei/angler/sepolicy/file.te"
type cnd_socket, file_type;
type diag_logs, file_type, data_file_type, mlstrustedobject;

# Default type for anything under /firmware
type firmware_file, fs_type, contextmount_type;

type ims_socket, file_type;
type irqbalance_socket, file_type;
type perfd_data_file, file_type, data_file_type;
type persist_file, file_type;
type persist_audio_file, file_type;
type persist_data_file, file_type;
type persist_drm_file, file_type;
type persist_sensors_file, file_type;
type postprocd_socket, file_type;
type proc_irq, fs_type;
type proc_kernel_sched, fs_type;
type qmuxd_socket, file_type;
type ssr_data_file, file_type, data_file_type;
type sysfs_led, sysfs_type, fs_type;
type sysfs_gpu_tuning, sysfs_type, fs_type;
type sysfs_fingerprintd, sysfs_type, fs_type;
type sysfs_msm_subsys, sysfs_type, fs_type;
type sysfs_msm_subsys_toggle, sysfs_type, fs_type;
type sysfs_nanoapp_cmd, sysfs_type, fs_type;
type sysfs_performance, sysfs_type, fs_type;
type sysfs_power_management, fs_type, sysfs_type;
type sysfs_prox_snsr, sysfs_type, fs_type;
type sysfs_smdcntl_open_timeout, sysfs_type, fs_type;
type sysfs_surfaceflinger, fs_type, sysfs_type;
type thermald_socket, file_type;
type time_data_file, file_type, data_file_type;
type display_data_file, file_type, data_file_type;
type cnd_data_file, file_type, data_file_type;

type sysfs_wifi_sar, fs_type, sysfs_type;
type sysfs_lcd_mipi, fs_type, sysfs_type;
#line 1 "device/huawei/angler/sepolicy/fingerprintd.te"
allow fingerprintd tee_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
# read/open /dev/input
allow fingerprintd input_device:dir { open getattr read search ioctl lock };
# read/open /dev/input/event6
allow fingerprintd input_device:chr_file { getattr open read ioctl lock };
# write /sys/bus/spi/devices/spi12.0/spi_prepare
allow fingerprintd sysfs_fingerprintd:file { { getattr open read ioctl lock } { open append write lock } };
allow fingerprintd sysfs_fingerprintd:dir search;
allow fingerprintd sysfs_fingerprintd:dir { open getattr read search ioctl lock };
#line 1 "device/huawei/angler/sepolicy/healthd.te"
allow healthd sysfs_thermal:dir { open getattr read search ioctl lock };
allow healthd sysfs_thermal:file { { getattr open read ioctl lock } { open append write lock } };
#line 1 "device/huawei/angler/sepolicy/ims.te"
type ims, domain, domain_deprecated;
type ims_exec, exec_type, file_type;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init ims_exec:file { getattr open read execute };
#line 4
allow init ims:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow ims ims_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow ims init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow init ims:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init ims_exec:process ims;
#line 4

#line 4

#line 4
type ims_tmpfs, file_type;
#line 4
type_transition ims tmpfs:file ims_tmpfs;
#line 4
allow ims ims_tmpfs:file { read write };
#line 4

#line 4


# Policy below to be updated per b/23784951
allow ims self:capability { net_admin net_raw };


#line 9
# Call the servicemanager and transfer references to it.
#line 9
allow ims servicemanager:binder { call transfer };
#line 9
# servicemanager performs getpidcon on clients.
#line 9
allow servicemanager ims:dir search;
#line 9
allow servicemanager ims:file { read open };
#line 9
allow servicemanager ims:process getattr;
#line 9
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 9
# all domains in domain.te.
#line 9


#line 10

#line 10
allow ims property_socket:sock_file write;
#line 10
allow ims init:unix_stream_socket connectto;
#line 10

#line 10
allow ims qcom_ims_prop:property_service set;
#line 10

#line 10
allow ims qcom_ims_prop:file { getattr open read ioctl lock };
#line 10

#line 10


#line 11
type ims_qmuxd_socket, file_type;
#line 11

#line 11
# Allow the necessary permissions.
#line 11

#line 11
# Allow the domain to add entries to the directory.
#line 11
allow ims qmuxd_socket:dir { { open getattr read search ioctl lock } add_name write };
#line 11
# Allow the domain to create the file.
#line 11
allow ims ims_qmuxd_socket:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 11
allow ims ims_qmuxd_socket:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
#line 11

#line 11
# Make the transition occur by default.
#line 11
type_transition ims qmuxd_socket:dir ims_qmuxd_socket;
#line 11
type_transition ims qmuxd_socket:{ file lnk_file sock_file fifo_file } ims_qmuxd_socket;
#line 11

#line 11
allow ims qmuxd_socket:dir remove_name;
#line 11

#line 11

#line 11

#line 11
allow ims qmuxd_socket:sock_file write;
#line 11
allow ims qmux:unix_stream_socket connectto;
#line 11

#line 11

#line 11
allow qmux ims_qmuxd_socket:sock_file { getattr unlink };
#line 11


#line 12

#line 12

#line 12
allow ims cnd_socket:sock_file write;
#line 12
allow ims cnd:unix_stream_socket connectto;
#line 12

#line 12


allow ims ims_service:service_manager add;

allow ims ims_socket:sock_file write;
allow ims self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow ims self:udp_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow ims self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow ims self:netlink_route_socket { { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } } nlmsg_write nlmsg_read };

allow ims sysfs_msm_subsys:dir { open getattr read search ioctl lock };
allow ims sysfs_msm_subsys:lnk_file { getattr open read ioctl lock };
#line 1 "device/huawei/angler/sepolicy/init-mcfg-sh.te"
type init-mcfg-sh, domain, domain_deprecated;
type init-mcfg-sh_exec, exec_type, file_type;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init init-mcfg-sh_exec:file { getattr open read execute };
#line 4
allow init init-mcfg-sh:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow init-mcfg-sh init-mcfg-sh_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow init-mcfg-sh init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow init init-mcfg-sh:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init init-mcfg-sh_exec:process init-mcfg-sh;
#line 4

#line 4

#line 4
type init-mcfg-sh_tmpfs, file_type;
#line 4
type_transition init-mcfg-sh tmpfs:file init-mcfg-sh_tmpfs;
#line 4
allow init-mcfg-sh init-mcfg-sh_tmpfs:file { read write };
#line 4

#line 4


allow init-mcfg-sh shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# remove and create /data/misc/radio/modem_config
allow init-mcfg-sh radio_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow init-mcfg-sh radio_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

allow init-mcfg-sh firmware_file:dir { open getattr read search ioctl lock };
allow init-mcfg-sh firmware_file:file { getattr open read ioctl lock };

# execute toybox/toolbox
allow init-mcfg-sh toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 1 "device/huawei/angler/sepolicy/init-power-sh.te"
type init-power-sh, domain, domain_deprecated;
type init-power-sh_exec, exec_type, file_type;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init init-power-sh_exec:file { getattr open read execute };
#line 4
allow init init-power-sh:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow init-power-sh init-power-sh_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow init-power-sh init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow init init-power-sh:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init init-power-sh_exec:process init-power-sh;
#line 4

#line 4

#line 4
type init-power-sh_tmpfs, file_type;
#line 4
type_transition init-power-sh tmpfs:file init-power-sh_tmpfs;
#line 4
allow init-power-sh init-power-sh_tmpfs:file { read write };
#line 4

#line 4


allow init-power-sh shell_exec:file { getattr open read ioctl lock };
allow init-power-sh sysfs_devices_system_cpu:file { open append write lock };
allow init-power-sh sysfs_performance:dir { open getattr read search ioctl lock };
allow init-power-sh sysfs_performance:file { open append write lock };
allow init-power-sh sysfs_thermal:dir { open getattr read search ioctl lock };
allow init-power-sh sysfs_thermal:file { { getattr open read ioctl lock } { open append write lock } };
allow init-power-sh proc_kernel_sched:file { open append write lock };

# allow labeling of interactive /sys files created post-initial restorecon
allow init-power-sh sysfs:{ dir file lnk_file } relabelfrom;
allow init-power-sh sysfs_devices_system_cpu:{ dir file lnk_file } relabelto;

# allow writes to sysfs files that have not yet been labeled
allow init-power-sh sysfs:file { { getattr open read ioctl lock } { open append write lock } };
allow init-power-sh sysfs_usb:file { open append write lock };

# execute toybox/toolbox
allow init-power-sh toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 1 "device/huawei/angler/sepolicy/init-qseecomd-sh.te"
type init-angler-qseecomd-sh, domain;
type init-angler-qseecomd-sh_exec, exec_type, file_type;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init init-angler-qseecomd-sh_exec:file { getattr open read execute };
#line 4
allow init init-angler-qseecomd-sh:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow init-angler-qseecomd-sh init-angler-qseecomd-sh_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow init-angler-qseecomd-sh init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow init init-angler-qseecomd-sh:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init init-angler-qseecomd-sh_exec:process init-angler-qseecomd-sh;
#line 4

#line 4

#line 4
type init-angler-qseecomd-sh_tmpfs, file_type;
#line 4
type_transition init-angler-qseecomd-sh tmpfs:file init-angler-qseecomd-sh_tmpfs;
#line 4
allow init-angler-qseecomd-sh init-angler-qseecomd-sh_tmpfs:file { read write };
#line 4

#line 4


allow init-angler-qseecomd-sh shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# execute toybox/toolbox
allow init-angler-qseecomd-sh toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 1 "device/huawei/angler/sepolicy/init.te"
allow init tmpfs:lnk_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 1 "device/huawei/angler/sepolicy/inputeventfind.te"
type inputeventfind, domain, domain_deprecated;
type inputeventfind_exec, exec_type, file_type;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init inputeventfind_exec:file { getattr open read execute };
#line 4
allow init inputeventfind:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow inputeventfind inputeventfind_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow inputeventfind init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow init inputeventfind:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init inputeventfind_exec:process inputeventfind;
#line 4

#line 4

#line 4
type inputeventfind_tmpfs, file_type;
#line 4
type_transition inputeventfind tmpfs:file inputeventfind_tmpfs;
#line 4
allow inputeventfind inputeventfind_tmpfs:file { read write };
#line 4

#line 4


# search for appropriate input device
allow inputeventfind input_device:dir { open getattr read search ioctl lock };
allow inputeventfind input_device:chr_file { getattr open read ioctl lock };

# create symlink to /dev/stm_sensor
allow inputeventfind device:dir { add_name write };
allow inputeventfind video_device:lnk_file create;
type_transition inputeventfind device:lnk_file video_device;
#line 1 "device/huawei/angler/sepolicy/irqbalance.te"
type irqbalance, domain, domain_deprecated;
type irqbalance_exec, exec_type, file_type;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init irqbalance_exec:file { getattr open read execute };
#line 4
allow init irqbalance:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow irqbalance irqbalance_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow irqbalance init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow init irqbalance:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init irqbalance_exec:process irqbalance;
#line 4

#line 4

#line 4
type irqbalance_tmpfs, file_type;
#line 4
type_transition irqbalance tmpfs:file irqbalance_tmpfs;
#line 4
allow irqbalance irqbalance_tmpfs:file { read write };
#line 4

#line 4
;

allow irqbalance sysfs_devices_system_cpu:file { { getattr open read ioctl lock } { open append write lock } };
allow irqbalance proc_irq:dir { open getattr read search ioctl lock };
allow irqbalance proc_irq:file { { getattr open read ioctl lock } { open append write lock } };
#line 1 "device/huawei/angler/sepolicy/irsc_util.te"
type irsc_util, domain, domain_deprecated;
type irsc_util_exec, exec_type, file_type;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init irsc_util_exec:file { getattr open read execute };
#line 4
allow init irsc_util:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow irsc_util irsc_util_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow irsc_util init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow init irsc_util:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init irsc_util_exec:process irsc_util;
#line 4

#line 4

#line 4
type irsc_util_tmpfs, file_type;
#line 4
type_transition irsc_util tmpfs:file irsc_util_tmpfs;
#line 4
allow irsc_util irsc_util_tmpfs:file { read write };
#line 4

#line 4
;

allow irsc_util self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
#line 1 "device/huawei/angler/sepolicy/kernel.te"
# TODO - root cause why the kernel generating this denial.
allow kernel domain:process setsched;
#line 1 "device/huawei/angler/sepolicy/location.te"
type location, domain, domain_deprecated;
type location_exec, exec_type, file_type;

# Started by init

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init location_exec:file { getattr open read execute };
#line 5
allow init location:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow location location_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow location init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init location:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init location_exec:process location;
#line 5

#line 5

#line 5
type location_tmpfs, file_type;
#line 5
type_transition location tmpfs:file location_tmpfs;
#line 5
allow location location_tmpfs:file { read write };
#line 5

#line 5


allow location location_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

allow location self:capability { setuid setgid net_raw };

allow location self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };


#line 13
# Call the servicemanager and transfer references to it.
#line 13
allow location servicemanager:binder { call transfer };
#line 13
# servicemanager performs getpidcon on clients.
#line 13
allow servicemanager location:dir search;
#line 13
allow servicemanager location:file { read open };
#line 13
allow servicemanager location:process getattr;
#line 13
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 13
# all domains in domain.te.
#line 13


#line 14
# Call the server domain and optionally transfer references to it.
#line 14
allow location system_server:binder { call transfer };
#line 14
# Allow the serverdomain to transfer references to the client on the reply.
#line 14
allow system_server location:binder transfer;
#line 14
# Receive and use open files from the server.
#line 14
allow location system_server:fd use;
#line 14

allow location sensorservice_service:service_manager find;

allow location system_server:unix_stream_socket { read write };

# slim_daemon
allow location sysfs_msm_subsys:dir { open getattr read search ioctl lock };
allow location sysfs_msm_subsys:lnk_file { { getattr open read ioctl lock } { open append write lock } };


#line 23
type location_qmuxd_socket, file_type;
#line 23

#line 23
# Allow the necessary permissions.
#line 23

#line 23
# Allow the domain to add entries to the directory.
#line 23
allow location qmuxd_socket:dir { { open getattr read search ioctl lock } add_name write };
#line 23
# Allow the domain to create the file.
#line 23
allow location location_qmuxd_socket:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 23
allow location location_qmuxd_socket:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
#line 23

#line 23
# Make the transition occur by default.
#line 23
type_transition location qmuxd_socket:dir location_qmuxd_socket;
#line 23
type_transition location qmuxd_socket:{ file lnk_file sock_file fifo_file } location_qmuxd_socket;
#line 23

#line 23
allow location qmuxd_socket:dir remove_name;
#line 23

#line 23

#line 23

#line 23
allow location qmuxd_socket:sock_file write;
#line 23
allow location qmux:unix_stream_socket connectto;
#line 23

#line 23

#line 23
allow qmux location_qmuxd_socket:sock_file { getattr unlink };
#line 23

#line 1 "device/huawei/angler/sepolicy/mediaserver.te"

#line 1
# Call the server domain and optionally transfer references to it.
#line 1
allow mediaserver rild:binder { call transfer };
#line 1
# Allow the serverdomain to transfer references to the client on the reply.
#line 1
allow rild mediaserver:binder transfer;
#line 1
# Receive and use open files from the server.
#line 1
allow mediaserver rild:fd use;
#line 1

# send data to camera socket
allow mediaserver camera_data_file:sock_file write;
allow mediaserver camera:unix_stream_socket connectto;
allow mediaserver camera:unix_dgram_socket sendto;
#read/write /dev/media[0-N]
allow mediaserver media_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
#read/write /dev/msm_audio_cal

#line 9
  allow mediaserver diag_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
#line 11

#read/write /dev/v4l-subdev[0-N]
allow mediaserver v41_subdev_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

allow mediaserver persist_file:dir search;
allow mediaserver persist_audio_file:dir search;
allow mediaserver persist_audio_file:file { getattr open read ioctl lock };

# allow communication w/perfd
allow mediaserver perfd_data_file:dir search;
allow mediaserver perfd_data_file:sock_file write;
allow mediaserver perfd:unix_dgram_socket sendto;
allow mediaserver perfd:unix_stream_socket connectto;
#line 1 "device/huawei/angler/sepolicy/nanoapp_cmd.te"
type nanoapp_cmd, domain;
type nanoapp_cmd_exec, exec_type, file_type;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init nanoapp_cmd_exec:file { getattr open read execute };
#line 4
allow init nanoapp_cmd:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow nanoapp_cmd nanoapp_cmd_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow nanoapp_cmd init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow init nanoapp_cmd:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init nanoapp_cmd_exec:process nanoapp_cmd;
#line 4

#line 4

#line 4
type nanoapp_cmd_tmpfs, file_type;
#line 4
type_transition nanoapp_cmd tmpfs:file nanoapp_cmd_tmpfs;
#line 4
allow nanoapp_cmd nanoapp_cmd_tmpfs:file { read write };
#line 4

#line 4


allow nanoapp_cmd sensors_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow nanoapp_cmd sysfs_nanoapp_cmd:dir search;
allow nanoapp_cmd sysfs_nanoapp_cmd:file { { getattr open read ioctl lock } { open append write lock } };
#line 1 "device/huawei/angler/sepolicy/netd.te"
#line 1 "device/huawei/angler/sepolicy/netmgrd.te"
# Network utilities (radio process)
type netmgrd, domain, domain_deprecated;
type netmgrd_exec, exec_type, file_type;

# Started by init

#line 6

#line 6
# Allow the necessary permissions.
#line 6

#line 6
# Old domain may exec the file and transition to the new domain.
#line 6
allow init netmgrd_exec:file { getattr open read execute };
#line 6
allow init netmgrd:process transition;
#line 6
# New domain is entered by executing the file.
#line 6
allow netmgrd netmgrd_exec:file { entrypoint open read execute getattr };
#line 6
# New domain can send SIGCHLD to its caller.
#line 6
allow netmgrd init:process sigchld;
#line 6
# Enable AT_SECURE, i.e. libc secure mode.
#line 6
#line 6
#line 6
allow init netmgrd:process { siginh rlimitinh };
#line 6

#line 6
# Make the transition occur by default.
#line 6
type_transition init netmgrd_exec:process netmgrd;
#line 6

#line 6

#line 6
type netmgrd_tmpfs, file_type;
#line 6
type_transition netmgrd tmpfs:file netmgrd_tmpfs;
#line 6
allow netmgrd netmgrd_tmpfs:file { read write };
#line 6

#line 6



#line 8
typeattribute netmgrd netdomain;
#line 8

allow netmgrd self:capability { setuid setgid net_admin net_raw };


#line 12

#line 12
allow netmgrd property_socket:sock_file write;
#line 12
allow netmgrd init:unix_stream_socket connectto;
#line 12

#line 12
allow netmgrd net_radio_prop:property_service set;
#line 12

#line 12
allow netmgrd net_radio_prop:file { getattr open read ioctl lock };
#line 12

#line 12


allow netmgrd self:netlink_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow netmgrd self:netlink_route_socket nlmsg_write;
allow netmgrd self:netlink_xfrm_socket { { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } } nlmsg_write nlmsg_read};
allow netmgrd self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow netmgrd netd_socket:sock_file { open append write lock };
allow netmgrd net_data_file:dir { open getattr read search ioctl lock };
allow netmgrd net_data_file:file { getattr open read ioctl lock };

allow netmgrd shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow netmgrd system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

allow netmgrd sysfs_msm_subsys:dir { open getattr read search ioctl lock };
allow netmgrd sysfs_msm_subsys:lnk_file { getattr open read ioctl lock };

# Access to /proc/sys/net/*
allow netmgrd proc_net:file { { getattr open read ioctl lock } { open append write lock } };
allow netmgrd proc_net:dir { open getattr read search ioctl lock };


#line 32
type netmgrd_qmuxd_socket, file_type;
#line 32

#line 32
# Allow the necessary permissions.
#line 32

#line 32
# Allow the domain to add entries to the directory.
#line 32
allow netmgrd qmuxd_socket:dir { { open getattr read search ioctl lock } add_name write };
#line 32
# Allow the domain to create the file.
#line 32
allow netmgrd netmgrd_qmuxd_socket:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 32
allow netmgrd netmgrd_qmuxd_socket:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
#line 32

#line 32
# Make the transition occur by default.
#line 32
type_transition netmgrd qmuxd_socket:dir netmgrd_qmuxd_socket;
#line 32
type_transition netmgrd qmuxd_socket:{ file lnk_file sock_file fifo_file } netmgrd_qmuxd_socket;
#line 32

#line 32
allow netmgrd qmuxd_socket:dir remove_name;
#line 32

#line 32

#line 32

#line 32
allow netmgrd qmuxd_socket:sock_file write;
#line 32
allow netmgrd qmux:unix_stream_socket connectto;
#line 32

#line 32

#line 32
allow qmux netmgrd_qmuxd_socket:sock_file { getattr unlink };
#line 32



#line 34
    allow netmgrd shared_log_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
#line 34
    allow netmgrd diag_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
#line 37


# execute toybox/toolbox
allow netmgrd toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

#Allow netmgrd to use wakelock

#line 43
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 43
allow netmgrd sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 43
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 43
allow netmgrd self:capability2 block_suspend;
#line 43

#line 1 "device/huawei/angler/sepolicy/oem_qmi_server.te"
type oem_qmi_server, domain, domain_deprecated, mlstrustedsubject;
type oem_qmi_server_exec, exec_type, file_type;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init oem_qmi_server_exec:file { getattr open read execute };
#line 4
allow init oem_qmi_server:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow oem_qmi_server oem_qmi_server_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow oem_qmi_server init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow init oem_qmi_server:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init oem_qmi_server_exec:process oem_qmi_server;
#line 4

#line 4

#line 4
type oem_qmi_server_tmpfs, file_type;
#line 4
type_transition oem_qmi_server tmpfs:file oem_qmi_server_tmpfs;
#line 4
allow oem_qmi_server oem_qmi_server_tmpfs:file { read write };
#line 4

#line 4



# b/22871314
allow oem_qmi_server shared_log_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

allow oem_qmi_server sysfs_msm_subsys:dir { open getattr read search ioctl lock };
allow oem_qmi_server sysfs_msm_subsys:lnk_file { { getattr open read ioctl lock } { open append write lock } };

allow oem_qmi_server self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

# Access device /dev/diag

#line 16
    allow oem_qmi_server diag_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
#line 18



#line 20
type oem_qmi_server_qmuxd_socket, file_type;
#line 20

#line 20
# Allow the necessary permissions.
#line 20

#line 20
# Allow the domain to add entries to the directory.
#line 20
allow oem_qmi_server qmuxd_socket:dir { { open getattr read search ioctl lock } add_name write };
#line 20
# Allow the domain to create the file.
#line 20
allow oem_qmi_server oem_qmi_server_qmuxd_socket:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 20
allow oem_qmi_server oem_qmi_server_qmuxd_socket:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
#line 20

#line 20
# Make the transition occur by default.
#line 20
type_transition oem_qmi_server qmuxd_socket:dir oem_qmi_server_qmuxd_socket;
#line 20
type_transition oem_qmi_server qmuxd_socket:{ file lnk_file sock_file fifo_file } oem_qmi_server_qmuxd_socket;
#line 20

#line 20
allow oem_qmi_server qmuxd_socket:dir remove_name;
#line 20

#line 20

#line 20

#line 20
allow oem_qmi_server qmuxd_socket:sock_file write;
#line 20
allow oem_qmi_server qmux:unix_stream_socket connectto;
#line 20

#line 20

#line 20
allow qmux oem_qmi_server_qmuxd_socket:sock_file { getattr unlink };
#line 20

#line 1 "device/huawei/angler/sepolicy/perfd.te"
type perfd, domain, domain_deprecated;
type perfd_exec, exec_type, file_type;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init perfd_exec:file { getattr open read execute };
#line 4
allow init perfd:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow perfd perfd_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow perfd init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow init perfd:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init perfd_exec:process perfd;
#line 4

#line 4

#line 4
type perfd_tmpfs, file_type;
#line 4
type_transition perfd tmpfs:file perfd_tmpfs;
#line 4
allow perfd perfd_tmpfs:file { read write };
#line 4

#line 4


allow perfd cameraserver:process signull;

allow perfd perfd_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow perfd perfd_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow perfd perfd_data_file:sock_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

allow perfd sysfs_performance:dir { open getattr read search ioctl lock };
allow perfd sysfs_performance:file { { getattr open read ioctl lock } { open append write lock } };
allow perfd proc_kernel_sched:file { { getattr open read ioctl lock } { open append write lock } };

allow perfd sysfs_thermal:dir search;
allow perfd sysfs_thermal:file { { getattr open read ioctl lock } { open append write lock } };

allow perfd sysfs_power_management:file { open append write lock };

# allow writing to /sys/devices/system/cpu/*
allow perfd sysfs_devices_system_cpu:file { { getattr open read ioctl lock } { open append write lock } };

# perfd uses kill(pid, 0) to determine if a process exists.
# Determining if a process exists does not require the kill capability
# since a permission denied indicates the process exists.
#line 1 "device/huawei/angler/sepolicy/peripheral_manager.te"
type per_mgr, domain, domain_deprecated;
type per_mgr_exec, exec_type, file_type;

#line 3

#line 3
# Allow the necessary permissions.
#line 3

#line 3
# Old domain may exec the file and transition to the new domain.
#line 3
allow init per_mgr_exec:file { getattr open read execute };
#line 3
allow init per_mgr:process transition;
#line 3
# New domain is entered by executing the file.
#line 3
allow per_mgr per_mgr_exec:file { entrypoint open read execute getattr };
#line 3
# New domain can send SIGCHLD to its caller.
#line 3
allow per_mgr init:process sigchld;
#line 3
# Enable AT_SECURE, i.e. libc secure mode.
#line 3
#line 3
#line 3
allow init per_mgr:process { siginh rlimitinh };
#line 3

#line 3
# Make the transition occur by default.
#line 3
type_transition init per_mgr_exec:process per_mgr;
#line 3

#line 3

#line 3
type per_mgr_tmpfs, file_type;
#line 3
type_transition per_mgr tmpfs:file per_mgr_tmpfs;
#line 3
allow per_mgr per_mgr_tmpfs:file { read write };
#line 3

#line 3
;

allow per_mgr shared_log_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

allow per_mgr sysfs_msm_subsys:dir { open getattr read search ioctl lock };
allow per_mgr sysfs_msm_subsys:lnk_file { getattr open read ioctl lock };


#line 10
typeattribute per_mgr binderservicedomain;
#line 10


#line 11
# Call the servicemanager and transfer references to it.
#line 11
allow per_mgr servicemanager:binder { call transfer };
#line 11
# servicemanager performs getpidcon on clients.
#line 11
allow servicemanager per_mgr:dir search;
#line 11
allow servicemanager per_mgr:file { read open };
#line 11
allow servicemanager per_mgr:process getattr;
#line 11
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 11
# all domains in domain.te.
#line 11


#line 12
# Call the server domain and optionally transfer references to it.
#line 12
allow per_mgr per_proxy:binder { call transfer };
#line 12
# Allow the serverdomain to transfer references to the client on the reply.
#line 12
allow per_proxy per_mgr:binder transfer;
#line 12
# Receive and use open files from the server.
#line 12
allow per_mgr per_proxy:fd use;
#line 12


#line 13
# Call the server domain and optionally transfer references to it.
#line 13
allow per_mgr rild:binder { call transfer };
#line 13
# Allow the serverdomain to transfer references to the client on the reply.
#line 13
allow rild per_mgr:binder transfer;
#line 13
# Receive and use open files from the server.
#line 13
allow per_mgr rild:fd use;
#line 13

allow per_mgr per_mgr_service:service_manager add;

allow per_mgr subsys_modem_device:chr_file { getattr open read ioctl lock };

allow per_mgr self:capability net_raw;
allow per_mgr self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
#line 1 "device/huawei/angler/sepolicy/peripheral_proxy.te"
type per_proxy, domain, domain_deprecated;
type per_proxy_exec, exec_type, file_type;

#line 3

#line 3
# Allow the necessary permissions.
#line 3

#line 3
# Old domain may exec the file and transition to the new domain.
#line 3
allow init per_proxy_exec:file { getattr open read execute };
#line 3
allow init per_proxy:process transition;
#line 3
# New domain is entered by executing the file.
#line 3
allow per_proxy per_proxy_exec:file { entrypoint open read execute getattr };
#line 3
# New domain can send SIGCHLD to its caller.
#line 3
allow per_proxy init:process sigchld;
#line 3
# Enable AT_SECURE, i.e. libc secure mode.
#line 3
#line 3
#line 3
allow init per_proxy:process { siginh rlimitinh };
#line 3

#line 3
# Make the transition occur by default.
#line 3
type_transition init per_proxy_exec:process per_proxy;
#line 3

#line 3

#line 3
type per_proxy_tmpfs, file_type;
#line 3
type_transition per_proxy tmpfs:file per_proxy_tmpfs;
#line 3
allow per_proxy per_proxy_tmpfs:file { read write };
#line 3

#line 3
;


#line 5
# Call the servicemanager and transfer references to it.
#line 5
allow per_proxy servicemanager:binder { call transfer };
#line 5
# servicemanager performs getpidcon on clients.
#line 5
allow servicemanager per_proxy:dir search;
#line 5
allow servicemanager per_proxy:file { read open };
#line 5
allow servicemanager per_proxy:process getattr;
#line 5
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 5
# all domains in domain.te.
#line 5


#line 6
# Call the server domain and optionally transfer references to it.
#line 6
allow per_proxy per_mgr:binder { call transfer };
#line 6
# Allow the serverdomain to transfer references to the client on the reply.
#line 6
allow per_mgr per_proxy:binder transfer;
#line 6
# Receive and use open files from the server.
#line 6
allow per_proxy per_mgr:fd use;
#line 6


allow per_proxy per_mgr_service:service_manager find;
allow per_proxy sysfs_msm_subsys:dir { open getattr read search ioctl lock };
allow per_proxy sysfs_msm_subsys:lnk_file { getattr open read ioctl lock };
#line 1 "device/huawei/angler/sepolicy/platform_app.te"

#line 1
   # qxdmlogger rundiag perms
#line 1
   allow platform_app diag_logs:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
#line 1
   allow platform_app diag_logs:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 1
   allow platform_app diag_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
#line 6


allow platform_app oem_qmi_server:unix_stream_socket connectto;type postprocd, domain, domain_deprecated;
#line 2 "device/huawei/angler/sepolicy/postprocd.te"
type postprocd_exec, exec_type, file_type;

# Started by init

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init postprocd_exec:file { getattr open read execute };
#line 5
allow init postprocd:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow postprocd postprocd_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow postprocd init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init postprocd:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init postprocd_exec:process postprocd;
#line 5

#line 5

#line 5
type postprocd_tmpfs, file_type;
#line 5
type_transition postprocd tmpfs:file postprocd_tmpfs;
#line 5
allow postprocd postprocd_tmpfs:file { read write };
#line 5

#line 5



#line 7

#line 7
allow postprocd property_socket:sock_file write;
#line 7
allow postprocd init:unix_stream_socket connectto;
#line 7

#line 7
allow postprocd system_prop:property_service set;
#line 7

#line 7
allow postprocd system_prop:file { getattr open read ioctl lock };
#line 7

#line 7


allow postprocd graphics_device:dir search;
allow postprocd graphics_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow postprocd display_data_file:dir search;
allow postprocd sysfs_led:dir { open getattr read search ioctl lock };
allow postprocd sysfs_led:file { { getattr open read ioctl lock } { open append write lock } };
#line 1 "device/huawei/angler/sepolicy/property.te"
type contexthub_prop, property_type;
type ctl_ppd_prop, property_type;
type qcom_ims_prop, property_type;
type radio_atfwd_prop, property_type;
#line 1 "device/huawei/angler/sepolicy/qmux.te"
# Qualcomm Management Interface Multiplexer
type qmux, domain, domain_deprecated;
type qmux_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init qmux_exec:file { getattr open read execute };
#line 5
allow init qmux:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow qmux qmux_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow qmux init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init qmux:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init qmux_exec:process qmux;
#line 5

#line 5

#line 5
type qmux_tmpfs, file_type;
#line 5
type_transition qmux tmpfs:file qmux_tmpfs;
#line 5
allow qmux qmux_tmpfs:file { read write };
#line 5

#line 5



#line 7
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 7
allow qmux sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 7
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 7
allow qmux self:capability2 block_suspend;
#line 7

allow qmux sysfs_msm_subsys:dir { open getattr read search ioctl lock };
allow qmux sysfs_msm_subsys:lnk_file { getattr open read ioctl lock };

allow qmux qmuxd_socket:dir { open search write add_name remove_name lock };
allow qmux qmuxd_socket:sock_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

allow qmux radio_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Access to /sys/devices/virtual/smdpkt/smdcntl*/open_timeout
allow qmux sysfs_smdcntl_open_timeout:file { { getattr open read ioctl lock } { open append write lock } };
#line 1 "device/huawei/angler/sepolicy/qti.te"
type qti, domain, domain_deprecated;
type qti_exec, exec_type, file_type;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init qti_exec:file { getattr open read execute };
#line 4
allow init qti:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow qti qti_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow qti init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow init qti:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init qti_exec:process qti;
#line 4

#line 4

#line 4
type qti_tmpfs, file_type;
#line 4
type_transition qti tmpfs:file qti_tmpfs;
#line 4
allow qti qti_tmpfs:file { read write };
#line 4

#line 4


allow qti sysfs_msm_subsys:dir { open getattr read search ioctl lock };
allow qti sysfs_msm_subsys:lnk_file { getattr open read ioctl lock };

allow qti self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

allow qti dpl_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow qti rmnet_device:chr_file { { getattr open read ioctl lock } { open append write lock } };


#line 14
type qti_qmuxd_socket, file_type;
#line 14

#line 14
# Allow the necessary permissions.
#line 14

#line 14
# Allow the domain to add entries to the directory.
#line 14
allow qti qmuxd_socket:dir { { open getattr read search ioctl lock } add_name write };
#line 14
# Allow the domain to create the file.
#line 14
allow qti qti_qmuxd_socket:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 14
allow qti qti_qmuxd_socket:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
#line 14

#line 14
# Make the transition occur by default.
#line 14
type_transition qti qmuxd_socket:dir qti_qmuxd_socket;
#line 14
type_transition qti qmuxd_socket:{ file lnk_file sock_file fifo_file } qti_qmuxd_socket;
#line 14

#line 14
allow qti qmuxd_socket:dir remove_name;
#line 14

#line 14

#line 14

#line 14
allow qti qmuxd_socket:sock_file write;
#line 14
allow qti qmux:unix_stream_socket connectto;
#line 14

#line 14

#line 14
allow qmux qti_qmuxd_socket:sock_file { getattr unlink };
#line 14

#line 1 "device/huawei/angler/sepolicy/radio.te"
allow radio oem_qmi_server:unix_stream_socket write;
allow radio oem_qmi_server:unix_stream_socket connectto;
allow radio rild_qmuxd_socket:sock_file write;

#line 4
type radio_qmuxd_socket, file_type;
#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Allow the domain to add entries to the directory.
#line 4
allow radio qmuxd_socket:dir { { open getattr read search ioctl lock } add_name write };
#line 4
# Allow the domain to create the file.
#line 4
allow radio radio_qmuxd_socket:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 4
allow radio radio_qmuxd_socket:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition radio qmuxd_socket:dir radio_qmuxd_socket;
#line 4
type_transition radio qmuxd_socket:{ file lnk_file sock_file fifo_file } radio_qmuxd_socket;
#line 4

#line 4
allow radio qmuxd_socket:dir remove_name;
#line 4

#line 4

#line 4

#line 4
allow radio qmuxd_socket:sock_file write;
#line 4
allow radio qmux:unix_stream_socket connectto;
#line 4

#line 4

#line 4
allow qmux radio_qmuxd_socket:sock_file { getattr unlink };
#line 4

#line 1 "device/huawei/angler/sepolicy/rild.te"
# Grant access to Qualcomm MSM Interface (QMI) radio sockets to RILD

#line 2
type rild_qmuxd_socket, file_type;
#line 2

#line 2
# Allow the necessary permissions.
#line 2

#line 2
# Allow the domain to add entries to the directory.
#line 2
allow rild qmuxd_socket:dir { { open getattr read search ioctl lock } add_name write };
#line 2
# Allow the domain to create the file.
#line 2
allow rild rild_qmuxd_socket:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 2
allow rild rild_qmuxd_socket:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
#line 2

#line 2
# Make the transition occur by default.
#line 2
type_transition rild qmuxd_socket:dir rild_qmuxd_socket;
#line 2
type_transition rild qmuxd_socket:{ file lnk_file sock_file fifo_file } rild_qmuxd_socket;
#line 2

#line 2
allow rild qmuxd_socket:dir remove_name;
#line 2

#line 2

#line 2

#line 2
allow rild qmuxd_socket:sock_file write;
#line 2
allow rild qmux:unix_stream_socket connectto;
#line 2

#line 2

#line 2
allow qmux rild_qmuxd_socket:sock_file { getattr unlink };
#line 2



#line 4
# Call the server domain and optionally transfer references to it.
#line 4
allow rild per_mgr:binder { call transfer };
#line 4
# Allow the serverdomain to transfer references to the client on the reply.
#line 4
allow per_mgr rild:binder transfer;
#line 4
# Receive and use open files from the server.
#line 4
allow rild per_mgr:fd use;
#line 4


#line 5
# Call the server domain and optionally transfer references to it.
#line 5
allow rild audioserver:binder { call transfer };
#line 5
# Allow the serverdomain to transfer references to the client on the reply.
#line 5
allow audioserver rild:binder transfer;
#line 5
# Receive and use open files from the server.
#line 5
allow rild audioserver:fd use;
#line 5


#line 6
# Call the server domain and optionally transfer references to it.
#line 6
allow rild mediaserver:binder { call transfer };
#line 6
# Allow the serverdomain to transfer references to the client on the reply.
#line 6
allow mediaserver rild:binder transfer;
#line 6
# Receive and use open files from the server.
#line 6
allow rild mediaserver:fd use;
#line 6


#line 7
# Call the servicemanager and transfer references to it.
#line 7
allow rild servicemanager:binder { call transfer };
#line 7
# servicemanager performs getpidcon on clients.
#line 7
allow servicemanager rild:dir search;
#line 7
allow servicemanager rild:file { read open };
#line 7
allow servicemanager rild:process getattr;
#line 7
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 7
# all domains in domain.te.
#line 7


allow rild sysfs_msm_subsys:dir { open getattr read search ioctl lock };
allow rild sysfs_msm_subsys:lnk_file read;

allow rild sysfs_wifi_sar:file { getattr { open append write lock }};

allow rild sysfs_lcd_mipi:file { { getattr open read ioctl lock } { open append write lock } };

allow rild time:unix_stream_socket connectto;

allow rild audioserver_service:service_manager find;
allow rild mediaserver_service:service_manager find;
allow rild per_mgr_service:service_manager find;
#line 1 "device/huawei/angler/sepolicy/rmt.te"
# remote storage process
type rmt, domain, domain_deprecated;
type rmt_exec, exec_type, file_type;


#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init rmt_exec:file { getattr open read execute };
#line 5
allow init rmt:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow rmt rmt_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow rmt init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init rmt:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init rmt_exec:process rmt;
#line 5

#line 5

#line 5
type rmt_tmpfs, file_type;
#line 5
type_transition rmt tmpfs:file rmt_tmpfs;
#line 5
allow rmt rmt_tmpfs:file { read write };
#line 5

#line 5


allow rmt shared_log_device:chr_file { { getattr open read ioctl lock } { open append write lock } };


#line 9
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 9
allow rmt sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 9
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 9
allow rmt self:capability2 block_suspend;
#line 9

allow rmt self:capability { setuid setgid setpcap net_raw sys_admin };

# Allow access to /dev/uio0.
allow rmt uio_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

allow rmt self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };

allow rmt root_block_device:blk_file { getattr open read ioctl lock };
allow rmt modem_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };
allow rmt block_device:dir search;
#line 1 "device/huawei/angler/sepolicy/sensortool.te"
type sensortool, domain, domain_deprecated;
type sensortool_exec, exec_type, file_type;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init sensortool_exec:file { getattr open read execute };
#line 4
allow init sensortool:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow sensortool sensortool_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow sensortool init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow init sensortool:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init sensortool_exec:process sensortool;
#line 4

#line 4

#line 4
type sensortool_tmpfs, file_type;
#line 4
type_transition sensortool tmpfs:file sensortool_tmpfs;
#line 4
allow sensortool sensortool_tmpfs:file { read write };
#line 4

#line 4


allow sensortool self:capability sys_nice;

allow sensortool sensors_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

#line 9
# Each domain gets a unique devpts type.
#line 9
type sensortool_devpts, fs_type;
#line 9
# Label the pty with the unique type when created.
#line 9
type_transition sensortool devpts:chr_file sensortool_devpts;
#line 9
# Allow use of the pty after creation.
#line 9
allow sensortool sensortool_devpts:chr_file { open getattr read write ioctl };
#line 9
# Note: devpts:dir search and ptmx_device:chr_file rw_file_perms
#line 9
# allowed to everyone via domain.te.
#line 9

#line 1 "device/huawei/angler/sepolicy/service.te"
type atfwd_service,             service_manager_type;
type cne_service,               service_manager_type;
type ims_service,               service_manager_type;
type per_mgr_service,           service_manager_type;
#line 1 "device/huawei/angler/sepolicy/ssr.te"
type ssr, domain, domain_deprecated;
type ssr_exec, exec_type, file_type;

# Started by init

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init ssr_exec:file { getattr open read execute };
#line 5
allow init ssr:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow ssr ssr_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow ssr init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init ssr:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init ssr_exec:process ssr;
#line 5

#line 5

#line 5
type ssr_tmpfs, file_type;
#line 5
type_transition ssr tmpfs:file ssr_tmpfs;
#line 5
allow ssr ssr_tmpfs:file { read write };
#line 5

#line 5



#line 7
  # read the contents of the /dev directory
#line 7
  allow ssr device:dir { open getattr read search ioctl lock };
#line 7
  allow ssr ramdump_device:chr_file { getattr open read ioctl lock };
#line 7

#line 7
  allow ssr ssr_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
#line 7
  allow ssr ssr_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 7
  allow ssr sysfs_msm_subsys:dir { open getattr read search ioctl lock };
#line 7
  allow ssr sysfs_msm_subsys:lnk_file { getattr open read ioctl lock };
#line 16

#line 1 "device/huawei/angler/sepolicy/ssr_setup.te"
type ssr_setup, domain, domain_deprecated;
type ssr_setup_exec, exec_type, file_type;

#line 3

#line 3
# Allow the necessary permissions.
#line 3

#line 3
# Old domain may exec the file and transition to the new domain.
#line 3
allow init ssr_setup_exec:file { getattr open read execute };
#line 3
allow init ssr_setup:process transition;
#line 3
# New domain is entered by executing the file.
#line 3
allow ssr_setup ssr_setup_exec:file { entrypoint open read execute getattr };
#line 3
# New domain can send SIGCHLD to its caller.
#line 3
allow ssr_setup init:process sigchld;
#line 3
# Enable AT_SECURE, i.e. libc secure mode.
#line 3
#line 3
#line 3
allow init ssr_setup:process { siginh rlimitinh };
#line 3

#line 3
# Make the transition occur by default.
#line 3
type_transition init ssr_setup_exec:process ssr_setup;
#line 3

#line 3

#line 3
type ssr_setup_tmpfs, file_type;
#line 3
type_transition ssr_setup tmpfs:file ssr_setup_tmpfs;
#line 3
allow ssr_setup ssr_setup_tmpfs:file { read write };
#line 3

#line 3
;

allow ssr_setup sysfs_msm_subsys:dir { open getattr read search ioctl lock };
allow ssr_setup sysfs_msm_subsys:lnk_file { { getattr open read ioctl lock } { open append write lock } };
allow ssr_setup sysfs_msm_subsys_toggle:file { { getattr open read ioctl lock } { open append write lock } };
#line 1 "device/huawei/angler/sepolicy/surfaceflinger.te"
allow surfaceflinger sysfs_surfaceflinger:file { { getattr open read ioctl lock } { open append write lock } };
allow surfaceflinger display_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow surfaceflinger display_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 1 "device/huawei/angler/sepolicy/system_app.te"

#line 1

#line 1

#line 1
allow system_app cnd_socket:sock_file write;
#line 1
allow system_app cnd:unix_stream_socket connectto;
#line 1

#line 1

allow system_app time:unix_stream_socket connectto;
allow system_app oem_qmi_server:unix_stream_socket connectto;


#line 5

#line 5
allow system_app property_socket:sock_file write;
#line 5
allow system_app init:unix_stream_socket connectto;
#line 5

#line 5
allow system_app ctl_ppd_prop:property_service set;
#line 5

#line 5
allow system_app ctl_ppd_prop:file { getattr open read ioctl lock };
#line 5

#line 5


allow system_app atfwd_service:service_manager add;
allow system_app cne_service:service_manager add;

# allow CNEService to write /data/connectivity
allow system_app cnd_data_file:dir { open search write add_name remove_name lock };
# allow CNEService to create profile.txt
allow system_app cnd_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 1 "device/huawei/angler/sepolicy/system_server.te"
# Needed by hubconnection for sensor hub
allow system_server sensors_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow system_server uhid_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

allow system_server sysfs_led:dir { open getattr read search ioctl lock };
allow system_server sysfs_led:file { { getattr open read ioctl lock } { open append write lock } };

allow system_server sysfs_gpu_tuning:dir { open getattr read search ioctl lock };
allow system_server sysfs_gpu_tuning:file { { getattr open read ioctl lock } { open append write lock } };

allow system_server sysfs_msm_subsys:dir { open getattr read search ioctl lock };
allow system_server sysfs_msm_subsys:lnk_file { getattr open read ioctl lock };

# Grant access to Qualcomm MSM Interface (QMI) radio sockets to system services
# (e.g., LocationManager)

#line 16
type system_server_qmuxd_socket, file_type;
#line 16

#line 16
# Allow the necessary permissions.
#line 16

#line 16
# Allow the domain to add entries to the directory.
#line 16
allow system_server qmuxd_socket:dir { { open getattr read search ioctl lock } add_name write };
#line 16
# Allow the domain to create the file.
#line 16
allow system_server system_server_qmuxd_socket:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 16
allow system_server system_server_qmuxd_socket:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
#line 16

#line 16
# Make the transition occur by default.
#line 16
type_transition system_server qmuxd_socket:dir system_server_qmuxd_socket;
#line 16
type_transition system_server qmuxd_socket:{ file lnk_file sock_file fifo_file } system_server_qmuxd_socket;
#line 16

#line 16
allow system_server qmuxd_socket:dir remove_name;
#line 16

#line 16

#line 16

#line 16
allow system_server qmuxd_socket:sock_file write;
#line 16
allow system_server qmux:unix_stream_socket connectto;
#line 16

#line 16

#line 16
allow qmux system_server_qmuxd_socket:sock_file { getattr unlink };
#line 16


# talk to perfd
allow system_server perfd_data_file:dir search;
allow system_server perfd_data_file:sock_file write;
allow system_server perfd:unix_stream_socket connectto;

allow system_server persist_file:dir search;
allow system_server persist_file:file { getattr open read ioctl lock };

# hubconnection to get and set sensors.contexthub.* properties

#line 27

#line 27
allow system_server property_socket:sock_file write;
#line 27
allow system_server init:unix_stream_socket connectto;
#line 27

#line 27
allow system_server contexthub_prop:property_service set;
#line 27

#line 27
allow system_server contexthub_prop:file { getattr open read ioctl lock };
#line 27

#line 27
;

allow system_server per_mgr_service:service_manager find;

# To improve app launch times - we would like to force all tasks to
# run on big cores for app launch (sched_boost) - instead of just
# boosting them to make it "more likely" to run on big cores.
allow system_server zygote:process setsched;

# remove fingerprint dataset when remove user account
allow system_server fingerprintd_data_file:file { getattr open read ioctl lock };
allow system_server fingerprintd_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow system_server fingerprintd_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };

# Access /dev/graphics/fb0 for setting display persistence
allow system_server graphics_device:dir search;
allow system_server graphics_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Access for thermal-engine
allow system_server sysfs_thermal:file write;
#line 1 "device/huawei/angler/sepolicy/tee.te"
allow tee self:capability { setuid setgid sys_rawio };

allow tee block_device:dir { getattr search };
allow tee drm_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };
allow tee ssd_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

allow tee firmware_file:dir { open getattr read search ioctl lock };
allow tee firmware_file:file { getattr open read ioctl lock };

#allow tee to access dir /data/system/users/0-N/fpdata and the file
allow tee fingerprintd_data_file:file { { getattr open read ioctl lock } { open append write lock } };
allow tee fingerprintd_data_file:dir { open getattr read search ioctl lock };

# Set the sys.listeners.registered property

#line 15

#line 15
allow tee property_socket:sock_file write;
#line 15
allow tee init:unix_stream_socket connectto;
#line 15

#line 15
allow tee system_prop:property_service set;
#line 15

#line 15
allow tee system_prop:file { getattr open read ioctl lock };
#line 15

#line 15


allow tee time:unix_stream_socket connectto;

allow tee persist_file:dir { open getattr read search ioctl lock };
allow tee persist_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow tee persist_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow tee persist_drm_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow tee persist_drm_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

#create fingerprint data under /data/fpc
# b/23190122
allow tee system_data_file:dir { open getattr read search ioctl lock };
allow tee fingerprintd_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow tee fingerprintd_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 1 "device/huawei/angler/sepolicy/thermald.te"
type thermald, domain, domain_deprecated;
type thermald_exec, exec_type, file_type;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init thermald_exec:file { getattr open read execute };
#line 4
allow init thermald:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow thermald thermald_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow thermald init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow init thermald:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init thermald_exec:process thermald;
#line 4

#line 4

#line 4
type thermald_tmpfs, file_type;
#line 4
type_transition thermald tmpfs:file thermald_tmpfs;
#line 4
allow thermald thermald_tmpfs:file { read write };
#line 4

#line 4


allow thermald shared_log_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow thermald thermal_engine_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

allow thermald self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
type_transition thermald socket_device:sock_file thermald_socket;
allow thermald thermald_socket:sock_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

allow thermald sysfs_thermal:dir { open getattr read search ioctl lock };
allow thermald sysfs_thermal:file { { getattr open read ioctl lock } { open append write lock } };

allow thermald sysfs_msm_subsys:dir { open getattr read search ioctl lock };
allow thermald sysfs_msm_subsys:lnk_file { { getattr open read ioctl lock } { open append write lock } };

allow thermald sysfs_thermal:file write;

# Grant access to Qualcomm MSM Interface (QMI) radio sockets to system services
# (e.g., LocationManager)

#line 23
type thermald_qmuxd_socket, file_type;
#line 23

#line 23
# Allow the necessary permissions.
#line 23

#line 23
# Allow the domain to add entries to the directory.
#line 23
allow thermald qmuxd_socket:dir { { open getattr read search ioctl lock } add_name write };
#line 23
# Allow the domain to create the file.
#line 23
allow thermald thermald_qmuxd_socket:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 23
allow thermald thermald_qmuxd_socket:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
#line 23

#line 23
# Make the transition occur by default.
#line 23
type_transition thermald qmuxd_socket:dir thermald_qmuxd_socket;
#line 23
type_transition thermald qmuxd_socket:{ file lnk_file sock_file fifo_file } thermald_qmuxd_socket;
#line 23

#line 23
allow thermald qmuxd_socket:dir remove_name;
#line 23

#line 23

#line 23

#line 23
allow thermald qmuxd_socket:sock_file write;
#line 23
allow thermald qmux:unix_stream_socket connectto;
#line 23

#line 23

#line 23
allow qmux thermald_qmuxd_socket:sock_file { getattr unlink };
#line 23


# Reboot the device

#line 26

#line 26
allow thermald property_socket:sock_file write;
#line 26
allow thermald init:unix_stream_socket connectto;
#line 26

#line 26
allow thermald powerctl_prop:property_service set;
#line 26

#line 26
allow thermald powerctl_prop:file { getattr open read ioctl lock };
#line 26

#line 26

#line 1 "device/huawei/angler/sepolicy/time.te"
type time, domain, domain_deprecated;
type time_exec, exec_type, file_type;

# Started by init

#line 5

#line 5
# Allow the necessary permissions.
#line 5

#line 5
# Old domain may exec the file and transition to the new domain.
#line 5
allow init time_exec:file { getattr open read execute };
#line 5
allow init time:process transition;
#line 5
# New domain is entered by executing the file.
#line 5
allow time time_exec:file { entrypoint open read execute getattr };
#line 5
# New domain can send SIGCHLD to its caller.
#line 5
allow time init:process sigchld;
#line 5
# Enable AT_SECURE, i.e. libc secure mode.
#line 5
#line 5
#line 5
allow init time:process { siginh rlimitinh };
#line 5

#line 5
# Make the transition occur by default.
#line 5
type_transition init time_exec:process time;
#line 5

#line 5

#line 5
type time_tmpfs, file_type;
#line 5
type_transition time tmpfs:file time_tmpfs;
#line 5
allow time time_tmpfs:file { read write };
#line 5

#line 5


allow time self:capability { setuid setgid };


allow time rtc_device:chr_file { getattr open read ioctl lock };
allow time alarm_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

allow time time_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow time time_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow time sysfs_msm_subsys:dir { open getattr read search ioctl lock };
allow time sysfs_msm_subsys:lnk_file { getattr open read ioctl lock };

allow time self:socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };


#line 20
    allow time shared_log_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
#line 22

#line 1 "device/huawei/angler/sepolicy/ueventd.te"
allow ueventd firmware_file:dir { open getattr read search ioctl lock };
allow ueventd firmware_file:file { getattr open read ioctl lock };
allow ueventd sysfs_led:file { { getattr open read ioctl lock } { open append write lock } };
allow ueventd sysfs_gpu_tuning:file { { getattr open read ioctl lock } { open append write lock } };
allow ueventd sysfs_thermal:file { { getattr open read ioctl lock } { open append write lock } };
#read and write /sys/bus/spi/devices/spi12.0/spi_prepare
allow ueventd sysfs_fingerprintd:file { { getattr open read ioctl lock } { open append write lock } };
allow ueventd sysfs_nanoapp_cmd:file { open append write lock };
#line 1 "device/huawei/angler/sepolicy/vold.te"
# generated by proc scan, unnecessary
#line 1 "vendor/custom/sepolicy/platform_app.te"
allow platform_app nfc_service:service_manager find;
#line 1 "vendor/custom/sepolicy/property.te"
type adbtcp_prop, property_type;
#line 1 "vendor/custom/sepolicy/sysinit.te"
type sysinit, domain;
type sysinit_exec, exec_type, file_type;


#line 4

#line 4
# Allow the necessary permissions.
#line 4

#line 4
# Old domain may exec the file and transition to the new domain.
#line 4
allow init sysinit_exec:file { getattr open read execute };
#line 4
allow init sysinit:process transition;
#line 4
# New domain is entered by executing the file.
#line 4
allow sysinit sysinit_exec:file { entrypoint open read execute getattr };
#line 4
# New domain can send SIGCHLD to its caller.
#line 4
allow sysinit init:process sigchld;
#line 4
# Enable AT_SECURE, i.e. libc secure mode.
#line 4
#line 4
#line 4
allow init sysinit:process { siginh rlimitinh };
#line 4

#line 4
# Make the transition occur by default.
#line 4
type_transition init sysinit_exec:process sysinit;
#line 4

#line 4

#line 4
type sysinit_tmpfs, file_type;
#line 4
type_transition sysinit tmpfs:file sysinit_tmpfs;
#line 4
allow sysinit sysinit_tmpfs:file { read write };
#line 4

#line 4


#============= sysinit ==============
allow sysinit devpts:chr_file { { { getattr open read ioctl lock } { open append write lock } } };
allow sysinit shell_exec:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } };
allow sysinit system_file:file { { { getattr open read ioctl lock } { getattr execute execute_no_trans } } };
allow sysinit self:process setcurrent;

#line 1 "vendor/custom/sepolicy/system.te"
# allow adb related properties to be set
allow system_server adbtcp_prop:property_service set;
#line 1 "system/sepolicy/roles"
role r;
role r types domain;
#line 1 "system/sepolicy/users"
user u roles { r } level s0 range s0 - s0:c0.c1023;
#line 1 "system/sepolicy/initial_sid_contexts"
sid kernel u:r:kernel:s0
sid security u:object_r:kernel:s0
sid unlabeled u:object_r:unlabeled:s0
sid fs u:object_r:labeledfs:s0
sid file u:object_r:unlabeled:s0
sid file_labels u:object_r:unlabeled:s0
sid init u:object_r:unlabeled:s0
sid any_socket u:object_r:unlabeled:s0
sid port u:object_r:port:s0
sid netif u:object_r:netif:s0
sid netmsg u:object_r:unlabeled:s0
sid node u:object_r:node:s0
sid igmp_packet u:object_r:unlabeled:s0
sid icmp_socket u:object_r:unlabeled:s0
sid tcp_socket u:object_r:unlabeled:s0
sid sysctl_modprobe u:object_r:unlabeled:s0
sid sysctl u:object_r:proc:s0
sid sysctl_fs u:object_r:unlabeled:s0
sid sysctl_kernel u:object_r:unlabeled:s0
sid sysctl_net u:object_r:unlabeled:s0
sid sysctl_net_unix u:object_r:unlabeled:s0
sid sysctl_vm u:object_r:unlabeled:s0
sid sysctl_dev u:object_r:unlabeled:s0
sid kmod u:object_r:unlabeled:s0
sid policy u:object_r:unlabeled:s0
sid scmp_packet u:object_r:unlabeled:s0
sid devnull u:object_r:null_device:s0
#line 1 "system/sepolicy/fs_use"
# Label inodes via getxattr.
fs_use_xattr yaffs2 u:object_r:labeledfs:s0;
fs_use_xattr jffs2 u:object_r:labeledfs:s0;
fs_use_xattr ext2 u:object_r:labeledfs:s0;
fs_use_xattr ext3 u:object_r:labeledfs:s0;
fs_use_xattr ext4 u:object_r:labeledfs:s0;
fs_use_xattr xfs u:object_r:labeledfs:s0;
fs_use_xattr btrfs u:object_r:labeledfs:s0;
fs_use_xattr f2fs u:object_r:labeledfs:s0;
fs_use_xattr squashfs u:object_r:labeledfs:s0;

# Label inodes from task label.
fs_use_task pipefs u:object_r:pipefs:s0;
fs_use_task sockfs u:object_r:sockfs:s0;

# Label inodes from combination of task label and fs label.
# Define type_transition rules if you want per-domain types.
fs_use_trans devpts u:object_r:devpts:s0;
fs_use_trans tmpfs u:object_r:tmpfs:s0;
fs_use_trans devtmpfs u:object_r:device:s0;
fs_use_trans shm u:object_r:shm:s0;
fs_use_trans mqueue u:object_r:mqueue:s0;

#line 1 "system/sepolicy/genfs_contexts"
# Label inodes with the fs label.
genfscon rootfs / u:object_r:rootfs:s0
# proc labeling can be further refined (longest matching prefix).
genfscon proc / u:object_r:proc:s0
genfscon proc /iomem u:object_r:proc_iomem:s0
genfscon proc /meminfo u:object_r:proc_meminfo:s0
genfscon proc /net u:object_r:proc_net:s0
genfscon proc /net/xt_qtaguid/ctrl u:object_r:qtaguid_proc:s0
genfscon proc /cpuinfo u:object_r:proc_cpuinfo:s0
genfscon proc /sysrq-trigger u:object_r:proc_sysrq:s0
genfscon proc /sys/fs/protected_hardlinks u:object_r:proc_security:s0
genfscon proc /sys/fs/protected_symlinks u:object_r:proc_security:s0
genfscon proc /sys/fs/suid_dumpable u:object_r:proc_security:s0
genfscon proc /sys/kernel/core_pattern u:object_r:usermodehelper:s0
genfscon proc /sys/kernel/dmesg_restrict u:object_r:proc_security:s0
genfscon proc /sys/kernel/hotplug u:object_r:usermodehelper:s0
genfscon proc /sys/kernel/kptr_restrict u:object_r:proc_security:s0
genfscon proc /sys/kernel/modprobe u:object_r:usermodehelper:s0
genfscon proc /sys/kernel/modules_disabled u:object_r:proc_security:s0
genfscon proc /sys/kernel/poweroff_cmd u:object_r:usermodehelper:s0
genfscon proc /sys/kernel/randomize_va_space u:object_r:proc_security:s0
genfscon proc /sys/kernel/usermodehelper u:object_r:usermodehelper:s0
genfscon proc /sys/net u:object_r:proc_net:s0
genfscon proc /sys/vm/mmap_min_addr u:object_r:proc_security:s0
genfscon proc /sys/vm/drop_caches u:object_r:proc_drop_caches:s0
genfscon proc /uid_cputime/show_uid_stat u:object_r:proc_uid_cputime_showstat:s0
genfscon proc /uid_cputime/remove_uid_range u:object_r:proc_uid_cputime_removeuid:s0

# selinuxfs booleans can be individually labeled.
genfscon selinuxfs / u:object_r:selinuxfs:s0
genfscon cgroup / u:object_r:cgroup:s0
# sysfs labels can be set by userspace.
genfscon sysfs / u:object_r:sysfs:s0
genfscon inotifyfs / u:object_r:inotify:s0
genfscon vfat / u:object_r:vfat:s0
genfscon debugfs / u:object_r:debugfs:s0
genfscon tracefs / u:object_r:debugfs_tracing:s0
genfscon fuse / u:object_r:fuse:s0
genfscon configfs / u:object_r:configfs:s0
genfscon sdcardfs / u:object_r:sdcardfs:s0
genfscon pstore / u:object_r:pstorefs:s0
genfscon functionfs / u:object_r:functionfs:s0
genfscon usbfs / u:object_r:usbfs:s0
genfscon binfmt_misc / u:object_r:binfmt_miscfs:s0
#line 1 "device/huawei/angler/sepolicy/genfs_contexts"
genfscon proc /bluetooth/sleep/btwrite                u:object_r:proc_bluetooth_writable:s0
genfscon proc /bluetooth/sleep/lpm                    u:object_r:proc_bluetooth_writable:s0
genfscon proc /irq                                    u:object_r:proc_irq:s0
genfscon proc /sys/kernel/sched_boost                 u:object_r:proc_kernel_sched:s0
genfscon proc /sys/kernel/sched_downmigrate           u:object_r:proc_kernel_sched:s0
genfscon proc /sys/kernel/sched_freq_dec_notify       u:object_r:proc_kernel_sched:s0
genfscon proc /sys/kernel/sched_freq_inc_notify       u:object_r:proc_kernel_sched:s0
genfscon proc /sys/kernel/sched_init_task_load        u:object_r:proc_kernel_sched:s0
genfscon proc /sys/kernel/sched_migration_fixup       u:object_r:proc_kernel_sched:s0
genfscon proc /sys/kernel/sched_small_task            u:object_r:proc_kernel_sched:s0
genfscon proc /sys/kernel/sched_upmigrate             u:object_r:proc_kernel_sched:s0
#line 1 "system/sepolicy/port_contexts"
# portcon statements go here, e.g.
# portcon tcp 80 u:object_r:http_port:s0

